#!/usr/bin/env python -u
from socket import socket,SHUT_RDWR
import struct
import os
import sys
import select
import shutil

def getmsg(fd):
  header=fd.read(48)
  if len(header) == 0:
    return '',1000,0,0
  if len(header) != 48:
    raise Exception('short read')
  hdr=struct.unpack('Iihbbbbbbiiiiiiii',header)
  if hdr[0] > 48:
    numtoread=hdr[0]-48
    bytes=''
    while len(bytes) < numtoread:
      b=fd.read(numtoread-len(bytes))
      if len(b) == 0:
        raise Exception('short read')
      else:
        bytes=bytes+b
    return (header+bytes,hdr[3],hdr[4],hdr)
  else:
    return (header,hdr[3],hdr[4],hdr)

fifodir=sys.argv[1]

sys.stdout=open('%s/mdsip-server.log' % (fifodir,),'w')
sys.stderr=sys.stdout

os.mkfifo(fifodir+'/in')
os.mkfifo(fifodir+'/out')

if 'mdsip_server_host' in os.environ:
  s=socket()
  print "Connecting to mdsip server"
  sys.stdout.flush()
  host=os.environ['mdsip_server_host']
  if 'mdsip_server_port' in os.environ:
    port=int(os.environ['mdsip_server_port'])
  else:
    port=8000
  s.connect((host,port))
  socket_in=s.makefile('rb',-1)
  socket_out=s.makefile('wb',0)
  print "Done"
else:
  import subprocess
  p=subprocess.Popen('mdsip -P http',shell=True,
                     stdin=subprocess.PIPE,stdout=subprocess.PIPE)
  socket_in=p.stdout
  socket_out=p.stdin
stdin_data=''
socket_data=''
old_stdin='sdfjksld'
sys.stdout.flush()
try:
  while 1:
    while 1:
      print "opening input fifo"
      sys.stdout.flush()
      fifo_in=os.fdopen(os.open(fifodir+'/in',os.O_RDONLY|os.O_NONBLOCK))
      print "done"
      sys.stdout.flush()
      print "Waiting for input on fifo"
      sys.stdout.flush()
      s=select.select([fifo_in],[],[],1)
      if fifo_in in s[0]:
        print "About to read from fifo"
        sys.stdout.flush()
        stdin_data=fifo_in.read()
        print 'Done, got %d bytes' % (len(stdin_data),)
#        print repr(stdin_data)
        if stdin_data == 'bye'.ljust(48,'-'):
          raise Exception('disconnected')
        sys.stdout.flush()
        if len(stdin_data) == 0:
          print "Got 0 bytes in fifo_in, reopening"
          sys.stdout.flush()
        elif stdin_data == old_stdin:
          print "Got same data again"
          sys.stdout.flush()
          pass
        else:
          old_stdin=stdin_data
          fifo_in.close()
          break
    s=select.select([],[socket_out],[],.1)
    if socket_out not in s[1]:
      raise Exception('No read on output socket. goodbye')
    print 'writing stdin_data'
    sys.stdout.flush()
    socket_out.write(stdin_data)
    socket_out.flush()
    print 'done %d bytes' % (len(stdin_data),)
    stdin_data=''
    sys.stdout.flush()
    while 1:
      print 'looping trying to get response from socket'
      sys.stdout.flush()
      s=select.select([socket_in],[],[],1)
      if socket_in in s[0]:
        print 'about to read from socket'
        sys.stdout.flush()
        socket_data,nargs,idx,hdr=getmsg(socket_in)
        print 'done got %d bytes' % (len(socket_data),)
        sys.stdout.flush()
        break
    print 'About to open output fifo'
    sys.stdout.flush()
    fifo_out=open(fifodir+'/out','r+b')
    print 'Done. Now writing %d bytes to output fifo' % (len(socket_data),)
    sys.stdout.flush()
    fifo_out.write(socket_data)
    fifo_out.flush()
    fifo_out.close()
except Exception,e:
  print "Got exception:",e
finally:
  try:
    if not local:
      s.shutdown(SHUT_RDWR)
    s.close()
  except:
    pass
  try:
    shutil.rmtree(fifodir)
  except:
    pass

