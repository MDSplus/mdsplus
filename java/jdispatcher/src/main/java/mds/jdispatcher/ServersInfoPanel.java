package mds.jdispatcher;
/*
 * ServerShowDialog.java
 *
 * Created on July 22, 2008, 11:18 AM
 */



/**
 *
 * @author  taliercio
 */

import java.awt.*;
import java.awt.event.*;
import java.net.*;
import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.*;


public class ServersInfoPanel extends JPanel {
	private static final long serialVersionUID = 1L;
	private String    address;
	private int       info_port;
	private Hashtable<String, ServerInfo> serversInfo = null;

	/** Creates new form ServerShowDialog */
	public ServersInfoPanel() {
		initComponents();
		this.jTable1.setComponentPopupMenu(this.serverActionPopup);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */

	private void initComponents() {
		setLayout(new BorderLayout());
		serverActionPopup = new JPopupMenu();
		jPanel1 = new JPanel();
		update = new JButton();
		jPanel2 = new JPanel();
		jScrollPane1 = new JScrollPane();
		jTable1 = new JTable();

		startServer = new JMenuItem("Start");
		startServer.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final ActionEvent evt) {
				final TableModel tm = jTable1.getModel();
				for(int i : jTable1.getSelectedRows())
				{
					final String s = (String)tm.getValueAt(i, 2);
					serversInfo.get(s).startServer();
				}
			}
		});
		serverActionPopup.add(startServer);

		stopServer = new JMenuItem("Stop");
		stopServer.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				final TableModel tm = jTable1.getModel();
				for(int i : jTable1.getSelectedRows())
				{
					final String s = (String)tm.getValueAt(i, 2);
					serversInfo.get(s).stopServer();
				}
			}
		});
		serverActionPopup.add(stopServer);


		update.setText("Servers State Update");
		update.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				try
				{
					ServersInfoPanel.this.updateServersState();
				}
				catch(final Exception exc)
				{
					exc.printStackTrace();
					System.out.println("Error : "+exc);
				}
			}
		});
		jPanel1.add(update);

		startAllServer = new JButton("Start All Servers");
		startAllServer.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(final ActionEvent evt) {
				final Enumeration<ServerInfo> i = serversInfo.elements();
				while(i.hasMoreElements())
					i.nextElement().startServer();
			}
		});
		jPanel1.add(startAllServer);


		killAllServer = new JButton("Kill All Servers");
		killAllServer.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
				final Enumeration<ServerInfo> i = serversInfo.elements();
				while(i.hasMoreElements())
					i.nextElement().stopServer();
			}
		});
		jPanel1.add(killAllServer);


		add(jPanel1, BorderLayout.PAGE_END);

		jPanel2.setLayout(new BorderLayout());

		jTable1.setModel(new DefaultTableModel(
				new Object [][] {},
				new String [] {"State", "Class Name", "Address", "Action"}
				) {
			private static final long serialVersionUID = 1L;
			boolean[] canEdit = new boolean [] {
					false, false, false, false
			};
			@Override
			public boolean isCellEditable(final int rowIndex, final int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		jTable1.addMouseListener(new JTableButtonMouseListener(jTable1) );
		jScrollPane1.setViewportView(jTable1);
		jTable1.getColumnModel().getColumn(0).setMinWidth(50);
		jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);
		jTable1.getColumnModel().getColumn(0).setMaxWidth(50);
		jTable1.getColumnModel().getColumn(0).setCellRenderer(new StateRenderer());

		jTable1.getColumnModel().getColumn(1).setMinWidth(180);
		jTable1.getColumnModel().getColumn(1).setPreferredWidth(180);
		jTable1.getColumnModel().getColumn(1).setMaxWidth(180);

		jTable1.getColumnModel().getColumn(2).setMinWidth(200);
		jTable1.getColumnModel().getColumn(2).setPreferredWidth(200);
		jTable1.getColumnModel().getColumn(2).setMaxWidth(200);


		jTable1.getColumnModel().getColumn(3).setMinWidth(200);
		jTable1.getColumnModel().getColumn(3).setPreferredWidth(200);
		jTable1.getColumnModel().getColumn(3).setCellRenderer(new ActionRenderer());

		jPanel2.add(jScrollPane1, BorderLayout.CENTER);

		add(jPanel2, BorderLayout.CENTER);
	}

	// Variables declaration - do not modify
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTable jTable1;
	private javax.swing.JButton killAllServer;
	private javax.swing.JPopupMenu serverActionPopup;
	private javax.swing.JButton startAllServer;
	private javax.swing.JMenuItem startServer;
	private javax.swing.JMenuItem stopServer;
	private javax.swing.JButton update;
	// End of variables declaration

	public void updateServerState(final String serverAddress, final boolean state)
	{
		try
		{
			final DefaultTableModel md = ( DefaultTableModel ) this.jTable1.getModel();

			final ServerInfo si = serversInfo.get(serverAddress);
			if(si != null)
				md.setValueAt(new Boolean(state), si.getPos(), 0);
		}
		catch(final Exception exc)
		{
			exc.printStackTrace();
			System.out.println("Error : "+exc);
		}
	}

	public void setServersInfo(final Hashtable<String, ServerInfo> serversInfo)
	{
		this.serversInfo = serversInfo;
	}

	public boolean checkInfoServer(final String address, final int info_port)
	{
		return this.address != null && address.equals(this.address) && info_port == this.info_port;
	}


	public void updateServersState()  throws Exception
	{

		final Socket s = new Socket(address, info_port);
		s.setSoTimeout(5000);
		final DataOutputStream dos = new DataOutputStream(s.getOutputStream());
		final DataInputStream dis = new DataInputStream(s.getInputStream());

		dos.writeUTF("servers");
		final int numServer = dis.readInt();

		for(int i = 0; i < numServer; i++)
		{
			final String serverClass = dis.readUTF();
			final String addressSrv = dis.readUTF();
			final boolean active = dis.readBoolean();
			if( serversInfo != null && addressSrv != null && addressSrv.length() != 0 )
			{
				final DefaultTableModel md = ( DefaultTableModel ) this.jTable1.getModel();

				final ServerInfo si = serversInfo.get(addressSrv);
				if( si == null)
				{
					System.out.println("ERROR : Server Address "+ addressSrv +" for server class "+serverClass+" not found");
					continue;
				}
				si.setActive(active);
				final int numRow = md.getRowCount();
				int j;
				for(j = 0; j < numRow; j++)
				{
					final Object o = md.getValueAt(j, 2);
					if(o != null && o.equals(addressSrv))
					{
						md.setValueAt(new Boolean(active), j, 0);
						break;
					}
				}
			}
		}
		s.close();
	}


	public void loadServerState(final String address, final int info_port) throws Exception
	{
		this.address = address;
		this.info_port = info_port;

		final Socket s = new Socket(address, info_port);
		s.setSoTimeout(5000);
		final DataOutputStream dos = new DataOutputStream(s.getOutputStream());
		final DataInputStream dis = new DataInputStream(s.getInputStream());

		dos.writeUTF("servers");
		final int numServer = dis.readInt();

		for(int i = 0; i < numServer; i++)
		{
			final String serverClass = dis.readUTF();
			final String addressSrv = dis.readUTF();
			final boolean active = dis.readBoolean();

			if( serversInfo != null && addressSrv != null && addressSrv.length() != 0 )
			{
				final DefaultTableModel md = ( DefaultTableModel ) this.jTable1.getModel();

				final ServerInfo si = serversInfo.get(addressSrv);
				if( si == null)
				{
					System.out.println("ERROR : Server Address "+ addressSrv +" for server class "+serverClass+" not found");
					continue;
				}

				si.setActive(active);

				final int numRow = md.getRowCount();
				int j;

				for(j = 0; j < numRow; j++)
				{
					final Object o = md.getValueAt(j, 2);
					if(o != null && o.equals(addressSrv))
					{
						md.setValueAt(new Boolean(active), j, 0);
						break;
					}
				}

				if(j == numRow)
				{
					si.setPos(j);
					md.addRow( si.getAsArray() );
				}

			}

		}
		s.close();
	}

	public void updateServersInfoAction(final MdsMonitorEvent event)
	{
		final DefaultTableModel md = ( DefaultTableModel ) this.jTable1.getModel();
		final ServerInfo si = serversInfo.get(event.server_address);
		if(si != null)
			md.setValueAt(event, si.getPos(), 3);
	}

	public class ActionRenderer extends JLabel implements TableCellRenderer
	{
		private static final long serialVersionUID = 1L;

		@Override
		public Component getTableCellRendererComponent(final JTable table, final Object value,
				final boolean isSelected, final boolean hasFocus,
				final int row, final int column)
		{
			if(value instanceof MdsMonitorEvent)
			{
				final MdsMonitorEvent e = (MdsMonitorEvent)value;
				switch(e.mode)
				{
				case MdsMonitorEvent.MonitorDoing :
					setForeground(Color.BLUE);
					break;
				case MdsMonitorEvent.MonitorDone :
					if( (e.status & 1) != 0 )
						setForeground(Color.GREEN);
					else
						setForeground(Color.RED);
					break;
				}
				this.setText(e.node_path);
			}
			else
				this.setText("");
			return this;
		}
	}

	public class StateRenderer extends JPanel implements TableCellRenderer
	{
		private static final long serialVersionUID = 1L;

		@Override
		public Component getTableCellRendererComponent(final JTable table, final Object value,
				final boolean isSelected, final boolean hasFocus,
				final int row, final int column)
		{
			if(value instanceof Boolean)
			{
				final Boolean b = (Boolean)value;
				if(b.booleanValue())
					setBackground(Color.GREEN);
				else
					setBackground(Color.RED);
			}
			return this;
		}
	}


	public class ButtonRenderer implements TableCellRenderer
	{
		@Override
		public Component getTableCellRendererComponent(final JTable table, final Object value,
				final boolean isSelected, final boolean hasFocus,
				final int row, final int column)
		{
			return (Component)value;
		}
	}


	class JTableButtonMouseListener implements MouseListener {
		private final JTable table;

		private void forwardEventToButton(final MouseEvent e) {
			final TableColumnModel columnModel = table.getColumnModel();
			final int column = columnModel.getColumnIndexAtX(e.getX());
			final int row    = e.getY() / table.getRowHeight();
			Object value;
			JButton button;
			MouseEvent buttonEvent;

			if(row >= table.getRowCount() || row < 0 ||
					column >= table.getColumnCount() || column < 0)
				return;

			value = table.getValueAt(row, column);

			if(!(value instanceof JButton))
				return;

			button = (JButton)value;
			buttonEvent = SwingUtilities.convertMouseEvent(table, e, button);
			button.dispatchEvent(buttonEvent);

			// This is necessary so that when a button is pressed and released
			// it gets rendered properly.  Otherwise, the button may still appear
			// pressed down when it has been released.
			table.repaint();
		}

		public JTableButtonMouseListener(final JTable table) {
			this.table = table;
		}

		@Override
		public void mouseClicked(final MouseEvent e) {
			forwardEventToButton(e);
		}

		@Override
		public void mouseEntered(final MouseEvent e) {
			forwardEventToButton(e);
		}

		@Override
		public void mouseExited(final MouseEvent e) {
			forwardEventToButton(e);
		}

		@Override
		public void mousePressed(final MouseEvent e) {
			forwardEventToButton(e);
		}

		@Override
		public void mouseReleased(final MouseEvent e) {
			forwardEventToButton(e);
		}
	}

}
