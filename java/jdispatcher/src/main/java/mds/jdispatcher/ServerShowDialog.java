package mds.jdispatcher;
/*
 * ServerShowDialog.java
 *
 * Created on July 22, 2008, 11:18 AM
 */

/**
 *
 * @author  taliercio
 */
import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import java.net.*;
import java.io.*;
import java.util.*;
import javax.swing.table.*;

public class ServerShowDialog extends JPanel
{
	private static final long serialVersionUID = 1L;
	private String address;
	private int info_port;
	private Hashtable<String, ServerInfo> serversInfo = null;

	/** Creates new form ServerShowDialog */
	public ServerShowDialog(java.awt.Frame parent, boolean modal)
	{
//        super(parent, modal);
//        this.setPreferredSize(new Dimension(700,500));
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents()
	{
		jPanel1 = new JPanel();
		jButton1 = new JButton();
		startAllServer = new JButton("Start All");
		killAllServer = new JButton("Kill All");
		jButton2 = new JButton();
		jPanel2 = new JPanel();
		jScrollPane1 = new JScrollPane();
		jTable1 = new JTable();
		// setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		// setTitle("Servers List");
		jButton1.setText("Update");
		jButton1.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				jButton1ActionPerformed(evt);
			}
		});
		jPanel1.add(jButton1);
		startAllServer.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				startAllServerActionPerformed(evt);
			}
		});
		jPanel1.add(startAllServer);
		killAllServer.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				killAllServerActionPerformed(evt);
			}
		});
		jPanel1.add(killAllServer);
		jButton2.setText("Cancel");
		jButton2.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				jButton2ActionPerformed(evt);
			}
		});
		jPanel1.add(jButton2);
		// getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);
		add(jPanel1, java.awt.BorderLayout.PAGE_END);
		jPanel2.setLayout(new java.awt.BorderLayout());
		jTable1.setModel(new DefaultTableModel(new Object[][] {}, new String[]
		{ "State", "Class Name", "Address", "Start", "Stop" })
		{
			private static final long serialVersionUID = 1L;
			final private boolean[] canEdit = new boolean[]
			{ false, true, true, false, false };

			@Override
			public boolean isCellEditable(int rowIndex, int columnIndex)
			{
				return canEdit[columnIndex];
			}
		});
		jTable1.addMouseListener(new JTableButtonMouseListener(jTable1));
		jScrollPane1.setViewportView(jTable1);
		jTable1.getColumnModel().getColumn(0).setMinWidth(50);
		jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);
		jTable1.getColumnModel().getColumn(0).setMaxWidth(50);
		jTable1.getColumnModel().getColumn(0).setCellRenderer(new StateRenderer());
		jTable1.getColumnModel().getColumn(3).setCellEditor(null);
		jTable1.getColumnModel().getColumn(3).setCellRenderer(new ButtonRenderer());
		jTable1.getColumnModel().getColumn(4).setCellRenderer(new ButtonRenderer());
		jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);
		// getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);
		add(jPanel2, java.awt.BorderLayout.CENTER);
	}

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)
	{// GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
		this.updateServerState();
	}

	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt)
	{// GEN-FIRST:event_jButton2ActionPerformed
// TODO add your handling code here:
		setVisible(false);
	}

	private void killAllServerActionPerformed(java.awt.event.ActionEvent evt)
	{
		final Iterator<ServerInfo> i = serversInfo.values().iterator();
		while (i.hasNext())
			i.next().stopServer();
	}

	private void startAllServerActionPerformed(java.awt.event.ActionEvent evt)
	{
		final Iterator<ServerInfo> i = serversInfo.values().iterator();
		while (i.hasNext())
			i.next().startServer();
	}

	/**
	 * @param args the command line arguments
	 */
	/*
	 * public static void main(String args[]) { java.awt.EventQueue.invokeLater(new
	 * Runnable() { public void run() { ServerShowDialog dialog = new
	 * ServerShowDialog(new javax.swing.JFrame(), true);
	 * dialog.addWindowListener(new java.awt.event.WindowAdapter() { public void
	 * windowClosing(java.awt.event.WindowEvent e) { System.exit(0); } });
	 * dialog.setVisible(true); } }); }
	 */
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTable jTable1;
	private javax.swing.JButton killAllServer;
	private javax.swing.JButton startAllServer;

	public void updateServerState()
	{
		try
		{
			loadServerState(address, info_port);
		}
		catch (final Exception exc)
		{
			final ShowMessage alert = new ShowMessage(exc.getMessage());
			SwingUtilities.invokeLater(alert);
		}
	}

	public void setServersInfo(Hashtable<String, ServerInfo> serversInfo)
	{ this.serversInfo = serversInfo; }

	public void loadServerState(String address, int info_port) throws Exception
	{
		this.address = address;
		this.info_port = info_port;
		final Socket s = new Socket(address, info_port);
		s.setSoTimeout(500);
		final DataOutputStream dos = new DataOutputStream(s.getOutputStream());
		final DataInputStream dis = new DataInputStream(s.getInputStream());
		dos.writeUTF("servers");
		final int numServer = dis.readInt();
		for (int i = 0; i < numServer; i++)
		{
			// System.out.println(dis.readUTF()+" "+dis.readUTF()+" "+dis.readBoolean()+"
			// "+dis.readInt());
			// addString(dis.readUTF(), dis.readUTF(), dis.readBoolean());
			final String serverClass = dis.readUTF();
			final String addressSrv = dis.readUTF();
			final boolean active = dis.readBoolean();
			final int aDoing = dis.readInt();
			System.out.println("Class :" + serverClass + "Server :" + addressSrv + " doing " + aDoing);
			if (serversInfo != null && addressSrv != null && addressSrv.length() != 0)
			{
				// System.out.println(serversInfo.get(addressSrv));
				final DefaultTableModel md = (DefaultTableModel) this.jTable1.getModel();
				final ServerInfo si = serversInfo.get(addressSrv);
				si.setActive(active);
				final int numRow = md.getRowCount();
				int j;
				for (j = 0; j < numRow; j++)
				{
					final Object o = md.getValueAt(j, 2);
					if (o != null && o.equals(addressSrv))
					{
						md.setValueAt(new Boolean(active), j, 0);
						break;
					}
				}
				if (j == numRow)
					md.addRow(si.getAsArray());
			}
		}
		s.close();
	}

	public class StateRenderer extends JPanel implements TableCellRenderer
	{
		private static final long serialVersionUID = 1L;

		@Override
		public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus,
				int row, int column)
		{
			if (value instanceof Boolean)
			{
				final Boolean b = (Boolean) value;
				if (b.booleanValue())
					setBackground(Color.GREEN);
				else
					setBackground(Color.RED);
			}
			return this;
		}
	}

	public class ButtonRenderer implements TableCellRenderer
	{
		@Override
		public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus,
				int row, int column)
		{
			/*
			 * if (isSelected) { setForeground(table.getSelectionForeground());
			 * setBackground(table.getSelectionBackground()); } else{
			 * setForeground(table.getForeground());
			 * setBackground(UIManager.getColor("Button.background")); }
			 */
			// command = value.toString();
			// setText( (value == null) ? "" : value.toString() );
			// return this;
			return (Component) value;
		}
	}

	class JTableButtonMouseListener implements MouseListener
	{
		private final JTable table;

		private void forwardEventToButton(MouseEvent e)
		{
			final TableColumnModel columnModel = table.getColumnModel();
			final int column = columnModel.getColumnIndexAtX(e.getX());
			final int row = e.getY() / table.getRowHeight();
			Object value;
			JButton button;
			MouseEvent buttonEvent;
			if (row >= table.getRowCount() || row < 0 || column >= table.getColumnCount() || column < 0)
				return;
			value = table.getValueAt(row, column);
			if (!(value instanceof JButton))
				return;
			button = (JButton) value;
			buttonEvent = SwingUtilities.convertMouseEvent(table, e, button);
			button.dispatchEvent(buttonEvent);
			// This is necessary so that when a button is pressed and released
			// it gets rendered properly. Otherwise, the button may still appear
			// pressed down when it has been released.
			table.repaint();
		}

		public JTableButtonMouseListener(JTable table)
		{
			this.table = table;
		}

		@Override
		public void mouseClicked(MouseEvent e)
		{
			forwardEventToButton(e);
		}

		@Override
		public void mouseEntered(MouseEvent e)
		{
			forwardEventToButton(e);
		}

		@Override
		public void mouseExited(MouseEvent e)
		{
			forwardEventToButton(e);
		}

		@Override
		public void mousePressed(MouseEvent e)
		{
			forwardEventToButton(e);
		}

		@Override
		public void mouseReleased(MouseEvent e)
		{
			forwardEventToButton(e);
		}
	}

	class ShowMessage implements Runnable
	{
		String msg;

		public ShowMessage(String msg)
		{
			this.msg = msg;
		}

		@Override
		public void run()
		{
			JOptionPane.showMessageDialog(null, msg, "alert", JOptionPane.ERROR_MESSAGE);
		}
	}
}
