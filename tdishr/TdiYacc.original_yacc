%{

#ifdef WIN32
#pragma warning (disable : 4244 4102 ) /* int to short conversions and unreferenced label */
#endif

/*	TdiYacc.Y
	YACC converts this to TdiYacc.C to compile TDI statements.
	Each YACC-LEX symbol has a returned token and a yylval value.
	Precedence is associated with a token and is set left and right below.
	TdiLex_... routines and TdiRefFunction depend on tokens from TdiYacc.
	Tdi0Decompile depends on TdiRefFunction and precedence.

	Josh Stillerman and Thomas W. Fredian, MIT PFC, TDI$PARSE.Y.
	Ken Klare, LANL P-4	(c)1989,1990,1991

	Note statements like	{;} {a;} {a,b,c;}
	Watch -3^4*5	Fortran says -((3^4)*5), CC/high-unary-precedence would give ((-3)^4)*5
	Watch 3^-4*5	Fortran illegal, Vax 3^(-(4*5)), CC would give (3^(-4))*5
	NEED x^float	where float=int(float) to be x^int.
	NEED x^2	square(x) and x^.5 to be sqrt(x).
	Limitations:
		() implies no arguments. Use (*) for one. (x,*,y) is permitted, (x,,y) may be.
		255 statements, 253 commas and arguments. NEED to check, done in RESOLVE.
		Recursion will not work as coded, could happen in IMMEDIATE of compile.
		(YYMAXDEPTH - something) arguments.
		All binary stores are allowed, watch a > = b, it is not (a (>=) b), it is (a = (a > b)).

	Sneaky "neat" tricks:
	F90 style constructors: [scalars,vectors,etc] become vector or compound to become array.
	a//b//c generates CONCAT(a,b,c).
	Could NEED: Also a MIN b MIN c gives MIN(a,b,c).
	path(a) is function described at node. Not after 9/25/89.
		May require (path)(a) if path-ness not clear.
	path[b] subscripts whatever is at node. Same problem.
	NOT and INOT of AND OR etc., form NAND or AND_NOT etc. See KNOT1 and KNOT2. Not after 9/25/89.
*/
#include <mdsdescrip.h>
#include <mdsdescrip.h>
#include "tdirefcat.h"
#include "tdireffunction.h"
#include "tdirefzone.h"
#include <libroutines.h>
#include <strroutines.h>
#include <stdio.h>
#include <string.h>
#include <tdimessages.h>
#include <mds_stdarg.h>
static char *cvsrev = "@(#)$RCSfile$ $Revision$ $Date$";

extern unsigned short
	OpcAbort,
	OpcAdd,
	OpcCase,
	OpcComma,
	OpcConditional,
	OpcConcat,
	OpcDefault,
	OpcEquals,
	OpcEqualsFirst,
	OpcExtFunction,
	OpcFun,
	OpcInT,
	OpcInT_UNSIGNED,
	OpcLabel,
	OpcMultiply,
	OpcPostDec,
	OpcPostInc,
	OpcPreInc,
	OpcStatement,
	OpcSubscript,
	OpcUnaryMinus,
	OpcUnaryPlus,
	OpcUsing,
	OpcVector;

struct TdiZoneStruct TdiRefZone = {0};

extern int TdiYacc_RESOLVE();
extern int TdiLex();
extern int TdiYacc_IMMEDIATE();
extern int TdiYacc_BUILD();
extern int TdiYacc_ARG();
extern int TdiLexPath();

#define YYMAXDEPTH	250

#define yyparse		TdiYacc
#define _RESOLVE(arg)	if (TdiYacc_RESOLVE(&arg.rptr)) {yyerror(0);}
#define _FULL1(opcode,arg1,out)			if (TdiYacc_BUILD(255, 1, opcode, &out, &arg1)) {yyerror(0);}
#define _FULL2(opcode,arg1,arg2,out)		if (TdiYacc_BUILD(255, 2, opcode, &out, &arg1, &arg2)) {yyerror(0);}
	/*****************************
	Two args for image->routine.
	*****************************/
#define _JUST0(opcode,out)			if (TdiYacc_BUILD(2, 0, opcode, &out)) {yyerror(0);}
#define _JUST1(opcode,arg1,out)			if (TdiYacc_BUILD(3, 1, opcode, &out, &arg1)) {yyerror(0);}
#define _JUST2(opcode,arg1,arg2,out)		if (TdiYacc_BUILD(2, 2, opcode, &out, &arg1, &arg2)) {yyerror(0);}
#define _JUST3(opcode,arg1,arg2,arg3,out)	if (TdiYacc_BUILD(3, 3, opcode, &out, &arg1, &arg2, &arg3)) {yyerror(0);}
#define _JUST4(opcode,arg1,arg2,arg3,arg4,out)	if (TdiYacc_BUILD(4, 4, opcode, &out, &arg1, &arg2, &arg3, &arg4)) {yyerror(0);}

static struct marker _EMPTY_MARKER = {0,0};

%}
	/**********************************************************
	This becomes typedef YYSTYPE for yylval.
	We use builtin number for expressions and name for routine.
	**********************************************************/
%union	{struct marker mark;}

%start program

	/***********************************************************
	Tokens are the result of Lex.
	***********************************************************/
%token	<mark>	ERROR	IDENT	POINT	TEXT	VALUE

%token	<mark>	BREAK	CASE	COND	DEFAULT	DO	ELSE	ELSEW	FOR
%token	<mark>	GOTO	IF	LABEL	RETURN	SIZEOF	SWITCH	USING	WHERE	WHILE

%token	<mark>	ARG	CAST	CONST	INC
%token	<mark>	ADD	CONCAT	IAND	IN	IOR	IXOR	LEQV
%token	<mark>	POWER	PROMO	RANGE	SHIFT	BINEQ
%token	<mark>	LAND	LEQ	LGE	LOR	MUL	UNARY
%token	<mark>	LANDS	LEQS	LGES	LORS	MULS	UNARYS
%token	<mark>	FUN	MODIF	VBL

%type	<mark>	program	stmt_lst	stmt	slabel	label	using	using0	fun	funvbl
%type	<mark>	exp	ass	opt
%type	<mark>	unaryX	postX	primaX
%type	<mark>	bracket	paren	sub	textX

	/*****************************************************************
	Precedence: lowest to highest. -=not available, ?=not explicit
		CC	F90	Vax F77	IDL
%left	STATE	/*?	?	?	?	; {} IF etc.
***/
%left ','	/*15	-	-	-	, name(a,b op c...) decompiles as name(a,(b,c)...) but name(a,b=c)*/
%right '`'	/*-	-	-	-	`*/
%right '=' BINEQ/*14	?	?	?	= *= >>= etc.*/
%right RANGE	/*-	?	?	?	: ..	should bind more than // or IN maybe, less than +*/
%right '?'	/*13	-	-	-	?:*/
%right PROMO	/*-	-	-	-	@*/
		/*-	12.bop.	-	-	defined binary	.UNION.*/
%left LEQV	/*-	11.EQV.	8.EQV.	3 XOR	EQV NEQV*/
%left LOR LORS	/*12	10.OR.	7.OR.	3 OR	|| OR*/
%left LAND LANDS/*11	9.AND.	6.AND.	2 AND	&& AND*/
%left IOR	/*10	-	(7)	3 OR	|*/
%left IXOR	/*9 ^	-	(8)	3 XOR*/
%left IAND	/*8	-	(6)	2 AND	& AND*/
%left LEQ LEQS	/*7	7	4	3 EQ	== != <> EQ NE*/
%left LGE LGES	/*6	7	4	3 LT	< > <= >= LT GT LE GE*/
%left IN	/*-	-	-	-	IN	(subset)*/
%left CONCAT	/*-	6	3	3 +	//*/
		/*-	-	-	3	< >	(min max)*/
%left SHIFT	/*5	-	-	-	<< >>*/
%left ADD	/*4	5	3	3	+ - .binary.*/
%left MUL MULS '*'/*3 %	3	2	2 # MOD	* / */
%right POWER	/*-	2	1	1	** ^*/
/***
%right UNARY UNARYS/*2 * &	4 + -	3	?	+ - .unary.*/
		/*2	8.NOT.	5	?	~ ! NOT INOT SIZEOF
		/*2	-	-	-	++ --
%right CAST	/*2	-	-	-	(cast)
		/*-	1.uop.	-	-	defined unary .INVERSE.
%left POST	/*1. ->	?	?	?	(e) p(e) p[args] p++ p--
	*****************************************************************/

%%
	/***********
	Definitions.
	***********/
	/*********************************************************
	Problem, with word-form and symbolic mapped together,
	we cannot reconstruct just named ones. Would require
	reserved words: EQ GE GT LE LT NE AND OR EQV NEQV MOD NOT
	for LEQ LGE LAND LOR LEQV MUL UNARY tokens.
	Solution: symbol tokens: LEQS LGES LANDS LORS MULS UNARYS.
	NEED more if a IAND b (equal to a & b) is valid binary.
	Other tabular tokens give IDENT. $nonstandard and _names give VBL.
	*********************************************************/
slabel	: LABEL	VBL			{$$=$2;}
	;
label	: CONST	| IDENT	| CAST	| DEFAULT	| GOTO	| SIZEOF	| UNARY
	| BREAK	| ELSE	| ELSEW	| CASE	| DO	| RETURN
	| FOR	| IF	| LABEL	| SWITCH	| USING	| WHERE	| WHILE
	| IN	| LAND	| LEQ	| LEQV	| LGE	| LOR	| MUL
	| MODIF	| FUN	| VBL
	;

	/*********************************************************
	CONCAT/COMMA require function with same/correct token.
	With match we can append, otherwise create a big one.
	We separate comma in expression from comma in subscript
	because subscripts permit null/full value.
	*********************************************************/
ass	: '`'	ass			{$$.rptr=$2.rptr; $$.builtin= -2;
					TdiRefZone.l_status=TdiYacc_IMMEDIATE(&$$.rptr);
					if (!(TdiRefZone.l_status & 1)) {yyerror(0);}
					}
	| unaryX '=' ass		{_JUST2(OpcEquals,$1,$3,$$);}/*assign right-to-left*/
	| unaryX BINEQ ass		{struct marker tmp;		/*binary operation and assign*/
						_JUST2($2.builtin,$1,$3,tmp); 
						_JUST1(OpcEqualsFirst,tmp,$$);}
	| ass RANGE	ass		{if ($3.rptr && $3.rptr->dtype == DTYPE_RANGE)
						if ($3.rptr->ndesc == 2)
							{$$=$3;
							$$.rptr->dscptrs[2]=$$.rptr->dscptrs[1];
							$$.rptr->dscptrs[1]=$$.rptr->dscptrs[0];
							$$.rptr->dscptrs[0]=(struct descriptor *)$1.rptr;
							++$$.rptr->ndesc;}
						else {TdiRefZone.l_status=TdiEXTRA_ARG; return(1);}
					else	{static unsigned int vmlen = sizeof(struct descriptor_range);
						LibGetVm(&vmlen, &$$.rptr, &TdiRefZone.l_zone);
						$$.rptr->length = 0;
						$$.rptr->dtype = DTYPE_RANGE;
						$$.rptr->class = CLASS_R;
						$$.rptr->pointer = 0;
						$$.rptr->ndesc = 2;
						$$.rptr->dscptrs[0]=(struct descriptor *)$1.rptr;
						$$.rptr->dscptrs[1]=(struct descriptor *)$3.rptr;
						_RESOLVE($$);}
					}
	| ass '?' ass RANGE ass		{_JUST3(OpcConditional,$3,$5,$1,$$);}/*COND right-to-left*/
	| ass PROMO	ass		{_JUST2($2.builtin,$1,$3,$$);}/*PROMO right-to-left*/
	| ass LEQV	ass		{_JUST2($2.builtin,$1,$3,$$);}/*LEQV*/
	| ass LOR	ass		{_JUST2($2.builtin,$1,$3,$$);}/*LOR*/
	| ass LORS	ass		{_JUST2($2.builtin,$1,$3,$$);}/*LORS*/
	| ass LAND	ass		{_JUST2($2.builtin,$1,$3,$$);}/*LAND*/
	| ass LANDS	ass		{_JUST2($2.builtin,$1,$3,$$);}/*LANDS*/
	| ass IOR	ass		{_JUST2($2.builtin,$1,$3,$$);}/*IOR*/
	| ass IXOR	ass		{_JUST2($2.builtin,$1,$3,$$);}/*IXOR*/
	| ass IAND	ass		{_JUST2($2.builtin,$1,$3,$$);}/*IAND*/
	| ass LEQ	ass		{_JUST2($2.builtin,$1,$3,$$);}/*LEQ*/
	| ass LEQS	ass		{_JUST2($2.builtin,$1,$3,$$);}/*LEQS*/
	| ass LGE	ass		{_JUST2($2.builtin,$1,$3,$$);}/*LGE*/
	| ass LGES	ass		{_JUST2($2.builtin,$1,$3,$$);}/*LGES*/
	| ass IN	ass		{_JUST2($2.builtin,$1,$3,$$);}/*IS_IN*/
	| ass CONCAT	ass		{if ($$.rptr == 0) $$=$3;
					else if ($$.rptr->dtype == DTYPE_FUNCTION
					&&	*(unsigned short *)$$.rptr->pointer == OpcConcat
					&&	$$.rptr->ndesc < 250)
						{$$.rptr->dscptrs[$$.rptr->ndesc++]=(struct descriptor *)$3.rptr;
						_RESOLVE($$);}
					else {_FULL2($2.builtin,$1,$3,$$);}
					}
	| ass SHIFT	ass		{_JUST2($2.builtin,$1,$3,$$);}	/*SHIFT*/
	| ass ADD	ass		{_JUST2($2.builtin,$1,$3,$$);}	/*ADD*/
	| ass MUL	ass		{_JUST2($2.builtin,$1,$3,$$);}	/*MUL*/
	| ass MULS	ass		{_JUST2($2.builtin,$1,$3,$$);}	/*MULS*/
	| ass '*'	ass		{_JUST2(OpcMultiply,$1,$3,$$);}
	| ass POWER	ass		{_JUST2($2.builtin,$1,$3,$$);}	/*POWER right-to-left*/
	| unaryX
	| '*'				{_EMPTY_MARKER;}
	;
unaryX	: ADD		unaryX	{int j;
					if ($1.builtin == OpcAdd)	j=OpcUnaryPlus;
					else				j=OpcUnaryMinus;
					_JUST1(j,$2,$$);}
	| UNARY		unaryX	{_JUST1($1.builtin,$2,$$);}	/*UNARY*/
	| UNARYS	unaryX	{_JUST1($1.builtin,$2,$$);}	/*UNARYS*/
	| INC		unaryX	{_JUST1($1.builtin,$2,$$);}			/*preINC*/
	| postX
	;
		/********************************************************************
		Argument lists, optional or required. No arguments for empty list ().
		Use * for single missing argument. (*) is 1 missing, (,) is two.
		USING must have first argument with relative paths.
		********************************************************************/
bracket	: '[' ass		{_FULL1(OpcVector,$2,$$);}		/*constructor*/
	| '['		{_JUST0(OpcVector,$$);}		/*null constructor*/
	| bracket ',' ass	{if ($$.rptr->ndesc >= 250) {
					_RESOLVE($1);
					_FULL1(OpcVector,$1,$$);
				}
				$$.rptr->dscptrs[$$.rptr->ndesc++] = (struct descriptor *)$3.rptr;
				}
	;
exp	: opt ',' opt			{if ($$.rptr			/*comma is left-to-right weakest*/
					&&	$$.builtin != -2
					&&	$$.rptr->dtype == DTYPE_FUNCTION
					&&	*(unsigned short *)$$.rptr->pointer == OpcComma
					&&	$$.rptr->ndesc < 250)
						$$.rptr->dscptrs[$$.rptr->ndesc++]=(struct descriptor *)$3.rptr;
					else _FULL2(OpcComma,$1,$3,$$);/*first comma*/
					}
	| ass
	;
sub	: exp			{if ($$.rptr
				&&	$$.builtin != -2
				&& $$.rptr->dtype == DTYPE_FUNCTION
				&& *(unsigned short *)$$.rptr->pointer == OpcComma) ;
				else _JUST1(OpcAbort,$1,$$);}		/*first subscript*/
	|			{_JUST0(OpcAbort,$$);}			/*empty argument list*/
        ;
paren	: '(' exp ')'		{$$=$2; $$.builtin= -2;}		/*expression group*/
	| '(' stmt_lst ')'	{$$=$2; $$.builtin= -2;}		/*statement group*/
	;
using0	: USING '('		{++TdiRefZone.l_rel_path;}
	;
using	: using0 ass ',' ass ',' {_FULL2(OpcAbort,$2,$4,$$); --TdiRefZone.l_rel_path;}
	| using0 ass ',' ','	{_FULL2(OpcAbort,$2,_EMPTY_MARKER,$$); --TdiRefZone.l_rel_path;}
	;
opt	: exp
	|			{$$=_EMPTY_MARKER;}			/*null argument*/
	;
		/*******************************************
		Postfix expression. NEED to understand effect of primary lvalue.
		*******************************************/
postX	: primaX
	| postX '[' sub ']'	{int j;
					$$=$3;
					$$.rptr->pointer= (unsigned char *)&OpcSubscript;
					for (j=$$.rptr->ndesc; --j>=0; )
						$$.rptr->dscptrs[j+1]=$$.rptr->dscptrs[j];
					$$.rptr->dscptrs[0]=(struct descriptor *)$1.rptr;
					$$.rptr->ndesc++;
					_RESOLVE($$);
				}
	| postX INC		{int j=$2.builtin==OpcPreInc ? OpcPostInc : OpcPostDec;
					_JUST1(j,$1,$$);}		/*postINC*/
	| label '(' sub ')'	{$$=$3;
				if ($1.builtin < 0) {int j;		/*unknown today*/
					$$.rptr->pointer= (unsigned char *)&OpcExtFunction;
					for (j=$$.rptr->ndesc; --j>=0;)
						$$.rptr->dscptrs[j+2]=$$.rptr->dscptrs[j];
					$$.rptr->dscptrs[0]=0;
					$$.rptr->dscptrs[1]=(struct descriptor *)$1.rptr;
					$$.rptr->ndesc += 2;
				}
				else	{				/*intrinsic*/
					*(unsigned short *)$$.rptr->pointer=$1.builtin;
					_RESOLVE($$);}
				}
	| label POINT '(' sub ')' {int j;
				$$=$4;			/*external*/
				$$.rptr->dtype=DTYPE_CALL;
				$$.rptr->length=0;
				$$.rptr->pointer=0;
				for (j=$$.rptr->ndesc; --j>=0;)
					$$.rptr->dscptrs[j+2]=$$.rptr->dscptrs[j];
				$$.rptr->dscptrs[0]=(struct descriptor *)$1.rptr;
				$$.rptr->dscptrs[1]=(struct descriptor *)$2.rptr;
				$$.rptr->ndesc += 2;
				}
	| label POINT label '(' sub ')' {int j;
				$$=$5;			/*typed external*/
				StrUpcase($3.rptr, $3.rptr);
				for (j=TdiCAT_MAX; --j>=0;)
					if (strncmp(TdiREF_CAT[j].name, (char *)$3.rptr->pointer, $3.rptr->length) == 0
					&& strlen(TdiREF_CAT[j].name) == $3.rptr->length) break;
				if (j<0) {TdiRefZone.l_status=TdiINVDTYDSC; return(1);}
				$$.rptr->dtype=DTYPE_CALL;
				$$.rptr->length=1;
				*(unsigned char *)$$.rptr->pointer=(unsigned char)j;
				for (j=$$.rptr->ndesc; --j>=0;)
					$$.rptr->dscptrs[j+2]=$$.rptr->dscptrs[j];
				$$.rptr->dscptrs[0]=(struct descriptor *)$1.rptr;
				$$.rptr->dscptrs[1]=(struct descriptor *)$2.rptr;
				$$.rptr->ndesc += 2;
				}
	| using sub ')'		{int j;	/*USING(expr,[default],[shotid],[expt])*/
					$$.rptr->pointer= (unsigned char *)&OpcUsing;
					for (j=0; j < $2.rptr->ndesc; ++j)
						$$.rptr->dscptrs[$$.rptr->ndesc++]=$2.rptr->dscptrs[j];
				}
	| using0 ass ',' ass ')' {_JUST2(OpcUsing,$2,$4,$$); --TdiRefZone.l_rel_path;}
	;
		/*****************************************************
		ANSI C says "..." "..." is compile-time concatenation.
		*****************************************************/
textX	: TEXT
	| textX TEXT		{MAKE_S(DTYPE_T, $1.rptr->length + $2.rptr->length, $$.rptr);
					StrConcat($$.rptr, $1.rptr, $2.rptr MDS_END_ARG);
				}
	;
		/********************************************************************
		We reserve all names starting with $ or _ for constants or variables.
		Wait to make path/arg/const for simple; they may be text for -> or (.
		Simple name are members of current node in tree.
		********************************************************************/
primaX	: MODIF VBL		{_JUST1($1.builtin,$2,$$);}		/*IN/INOUT/OPTIONAL/OUT/PUBLIC/PRIVATE variable*/
	| MODIF MODIF VBL	{struct marker tmp;			/*OPTIONAL IN/INOUT/OUT*/
					_JUST1($2.builtin,$3,tmp);
					_JUST1($1.builtin,tmp,$$);}
	| label			{if (*$$.rptr->pointer == '$') {
					if($$.builtin < 0) $$.rptr->dtype=DTYPE_IDENT;
					else if ((TdiRefFunction[$$.builtin].token & LEX_M_TOKEN) == (unsigned int)LEX_ARG
					&& !((TdiRefZone.l_status=TdiYacc_ARG(&$$)) & 1)) {yyerror(0);}
					else if ((TdiRefFunction[$$.builtin].token & LEX_M_TOKEN) == (unsigned int)LEX_CONST)
						_JUST0($1.builtin,$$);
				}
				else if (*$$.rptr->pointer == '_')
					$$.rptr->dtype=DTYPE_IDENT;
				else if (TdiLexPath($1.rptr->length, $1.rptr->pointer, &$$) == ERROR)
					{yyerror(0);}
				}
	| VALUE
	| textX
	| paren								/*primary parentheses*/
	| bracket ']'		{_RESOLVE($$);}				/*constructor*/
	;
	/******************************************************
	A terminal semicolon in lex makes final exp into stmt.
	Do not build a statement list unless and until needed.
	These constructs cost little and add a lot.
	******************************************************/
funvbl	: FUN label				{$$=$2;}				/* FUN vbl(list)stmt	*/
	| FUN MODIF label			{_JUST1($2.builtin,$3,$$);}		/* FUN PRIVATE/PUBLIC vbl(list)stmt*/
	| MODIF FUN label			{_JUST1($1.builtin,$3,$$);}		/* PRIVATE/PUBLIC FUN vbl(list)stmt*/
	;
fun	: funvbl '(' sub ')'			{int j;	$$=$3;
							$$.rptr->pointer= (unsigned char *)&OpcFun;
							for (j=$$.rptr->ndesc; --j>=0;)
								$$.rptr->dscptrs[j+2]=$$.rptr->dscptrs[j];
							$$.rptr->dscptrs[0]=(struct descriptor *)$1.rptr;
							$$.rptr->ndesc += 2;
							/*++TdiRefZone.l_rel_path;*/
						}
	;
stmt	: BREAK ';'				{_JUST0($1.builtin,$$);}		/* BREAK/CONTINUE;	*/
	| CASE paren stmt			{_FULL2($1.builtin,$2,$3,$$);}		/* CASE(exp) stmt	*/
	| CASE DEFAULT stmt			{_FULL1($2.builtin,$3,$$);}		/* CASE DEFAULT stmt	*/
	| DO '{' stmt_lst '}' WHILE paren ';'	{_JUST2($1.builtin,$6,$3,$$);}		/* DO stmt WHILE(exp);	*/
	| FOR '(' opt ';' opt ';' opt ')' stmt	{_JUST4($1.builtin,$3,$5,$7,$9,$$);}	/* FOR(opt;opt;opt)stmt */
	| GOTO VBL ';'				{_JUST1($1.builtin,$2,$$);}		/* GOTO label;		*/
	| IF paren stmt ELSE stmt		{_JUST3($1.builtin,$2,$3,$5,$$);}	/* IF(exp)stmtELSEstmt	*/
	| IF paren stmt				{_JUST2($1.builtin,$2,$3,$$);}		/* IF(exp)stmt		*/
	| slabel RANGE stmt			{_FULL2(OpcLabel,$1,$3,$$);}		/* LABEL label:stmt	*/
/***	| RETURN opt ';'			{if ($2.rptr == 0) {_JUST0($1.builtin,$$);}/* RETURN;		*/
/***						else {_JUST1($1.builtin,$2,$$);}	}/* RETURN exp;		*/
	| SWITCH paren stmt			{_JUST2($1.builtin,$2,$3,$$);}		/* SWITCH(exp)stmt	*/
	| WHERE paren stmt ELSEW stmt		{_JUST3($1.builtin,$2,$3,$5,$$);}	/* WHERE(exp)stmtELSEWHEREstmt	*/
	| WHERE paren stmt			{_JUST2($1.builtin,$2,$3,$$);}		/* WHERE(exp)stmt	*/
	| WHILE paren stmt			{_JUST2($1.builtin,$2,$3,$$);}		/* WHILE(exp)stmt	*/
	| fun stmt				{/*TdiRefZone.l_rel_path--;*/
						$$.rptr->dscptrs[1]=(struct descriptor *)$2.rptr;}
	| '`' stmt				{$$.rptr=$2.rptr; $$.builtin= -2;
						TdiRefZone.l_status=TdiYacc_IMMEDIATE(&$$.rptr);
						if (!(TdiRefZone.l_status & 1)) {yyerror(0);}
						}
	| '{' stmt_lst '}'			{$$=$2; _RESOLVE($$);}		/* {statement list}	*/
	| opt ';'
	;
stmt_lst : stmt
	| stmt_lst stmt	{short opcode;
				if ($$.rptr == 0) {$$=$2;}		/* initial null statement	*/
				else if ($2.rptr == 0) {}		/* trailing null statement	*/
				else if ($$.rptr->dtype == DTYPE_FUNCTION
				&& $$.rptr->ndesc < 250
				&& ((opcode = *(unsigned short *)$$.rptr->pointer) == OpcStatement
					|| opcode == OpcCase
					|| opcode == OpcDefault
					|| opcode == OpcLabel
				)) {$$.rptr->dscptrs[$$.rptr->ndesc++]=(struct descriptor *)$2.rptr;}
				else	{_FULL2(OpcStatement,$1,$2,$$);}
			}
	;
program : stmt_lst	{_RESOLVE($$);		/*statements*/
			TdiRefZone.a_result=(struct descriptor_d *)$$.rptr;
			TdiRefZone.l_status=1;}/* success */
	|		{$$=_EMPTY_MARKER;}				/* nothing	*/
	| ERROR		{}						/* LEX_ERROR	*/
	| error		{TdiRefZone.l_status=TdiSYNTAX;}		/* YACC error	*/
	;
%%

const
LEX_ERROR	= ERROR,
LEX_IDENT	= IDENT,
LEX_POINT	= POINT,
LEX_TEXT	= TEXT,
LEX_VALUE	= VALUE,
LEX_ARG		= ARG,
LEX_BREAK	= BREAK,
LEX_CASE	= CASE,
LEX_COND	= COND,
LEX_DEFAULT	= DEFAULT,
LEX_DO		= DO,
LEX_ELSE	= ELSE,
LEX_ELSEW	= ELSEW,
LEX_FOR		= FOR,
LEX_GOTO	= GOTO,
LEX_IF		= IF,
LEX_LABEL	= LABEL,
LEX_RETURN	= RETURN,
LEX_SIZEOF	= SIZEOF,
LEX_SWITCH	= SWITCH,
LEX_USING	= USING,
LEX_WHERE	= WHERE,
LEX_WHILE	= WHILE,
LEX_CAST	= CAST,
LEX_CONST	= CONST,
LEX_INC		= INC,
LEX_ADD		= ADD,
LEX_BINEQ	= BINEQ,
LEX_CONCAT	= CONCAT,
LEX_IAND	= IAND,
LEX_IN		= IN,
LEX_IOR		= IOR,
LEX_IXOR	= IXOR,
LEX_LEQV	= LEQV,
LEX_POWER	= POWER,
LEX_PROMO	= PROMO,
LEX_RANGE	= RANGE,
LEX_SHIFT	= SHIFT,
LEX_LAND	= LAND,
LEX_LEQ		= LEQ,
LEX_LGE		= LGE,
LEX_LOR		= LOR,
LEX_MUL		= MUL,
LEX_UNARY	= UNARY,
LEX_LANDS	= LANDS,
LEX_LEQS	= LEQS,
LEX_LGES	= LGES,
LEX_LORS	= LORS,
LEX_MULS	= MULS,
LEX_UNARYS	= UNARYS,
LEX_FUN		= FUN,
LEX_VBL		= VBL,
LEX_MODIF	= MODIF;

YYSTYPE *TdiYylvalPtr = &yylval;
