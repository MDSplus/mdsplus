/*
 * Generated by the ICS builderXcessory (BX).
 *
 *
 * Builder Xcessory 3.5.1 VMS.
 *
 */
module MAIN_UIL
version = 'V1.0'
names = case_sensitive
!(BX) bx_info("app_class", "BuilderProduct")
!(BX) bx_info("app_name", "builderProduct")
!(BX) bx_info("app_defaults", "APP-DEFAULTS.DAT")
!(BX) bx_info("c++_old_construct", "false")
!(BX) bx_info("c++_unmanage_dialogs", "true")
!(BX) bx_info("c++_gen_derived", "true")
!(BX) bx_info("c++_target", "MAIN-CXX.EXE")
!(BX) bx_info("c++_hdrext", "HXX")
!(BX) bx_info("c++_srcext", "CXX")
!(BX) bx_info("c++_callbacks", "CALLBACKS-CXX", true)
!(BX) bx_info("c++_utilities", "BXUTILS-CXX", true)
!(BX) bx_info("c++_constants", "DEFS-CXX", true)
!(BX) bx_info("c++_baseclass", "UIComponent", true)
!(BX) bx_info("c++_main", "MAIN-CXX", true)
!(BX) bx_info("c++_makefile", "MAKEFILE-CXX.MMS", true)
!(BX) bx_info("c++_imakefile", "MAKEFILE-CXX.COM", true)
!(BX) bx_info("c_reverse_dialogs", "true")
!(BX) bx_info("c_dialogs_in_routine", "true")
!(BX) bx_info("c_unmanage_dialogs", "true")
!(BX) bx_info("c_target", "MAIN-C.EXE")
!(BX) bx_info("c_utilities", "BXUTILS-C.C", true)
!(BX) bx_info("c_constants", "CREATION-C.H", true)
!(BX) bx_info("c_callbacks", "CALLBACKS-C.C", true)
!(BX) bx_info("c_creation", "CREATION-C.C", true)
!(BX) bx_info("c_main", "MAIN-C.C", true)
!(BX) bx_info("c_makefile", "MAKEFILE-C.MMS", true)
!(BX) bx_info("c_imakefile", "MAKEFILE-C.COM", true)
!(BX) bx_info("uil_target", "MAIN-UIL.EXE")
!(BX) bx_info("uil_utilities", "BXUTILS-UIL.C", true)
!(BX) bx_info("uil_constants", "MAIN-UIL.H", true)
!(BX) bx_info("uil_callbacks", "CALLBACKS-UIL.C", true)
!(BX) bx_info("uil_uil", "ACTMON.UIL", true)
!(BX) bx_info("uil_main", "MAIN-UIL.C", true)
!(BX) bx_info("uil_makefile", "MAKEFILE-UIL.MMS", true)
!(BX) bx_info("uil_imakefile", "MAKEFILE-UIL.COM", true)
!(BX) bx_info("include_path", "[]", false)
!(BX) bx_info("xrunner_command", "$(M_ROOT)/arch/X11.5/Xm1.2/mic_xm.o", false)
!(BX) bx_info("c++_libraries", "sys$share:decw$dxmlibshr12.exe/share,sys$share:decw$xmlibshr12.exe/s"&
!(BX)	"hare,sys$share:decw$mrmlibshr12.exe/share,sys$share:decw$xtlibshrr5."&
!(BX)	"exe/share,sys$share:decw$xlibshr.exe/share,sys$share:decc$shr.exe/sh"&
!(BX)	"are")
!(BX) bx_info("c++_flags", "/standard=vaxc/define=(__STDC__=1)")
!(BX) bx_info("c++_cc", "CC")
!(BX) bx_info("system_directory", "BX$SYSTEM:")
!(BX) bx_info("builder_version", "Builder Xcessory 3.5.1 VMS")
!(BX) bx_info("uil", "uil")
!(BX) bx_info("cc", "cc")
!(BX) bx_info("cpp", "CC")
!(BX) bx_info("cOutputIncludes", "/standard=vaxc/define=(__STDC__=1)")
!(BX) bx_info("cOutputLibraries", "sys$share:decw$dxmlibshr12.exe/share,sys$share:decw$xmlibshr12.ex"&
!(BX)	"e/share,sys$share:decw$mrmlibshr12.exe/share,sys$share:decw$xtlib"&
!(BX)	"shrr5.exe/share,sys$share:decw$xlibshr.exe/share,sys$share:decc$s"&
!(BX)	"hr.exe/share")
!(BX) bx_info("uilCOutputIncludes", "/standard=vaxc/define=(__STDC__=1)")
!(BX) bx_info("uilUILOutputIncludes", "/motif")
!(BX) bx_info("uilOutputLibraries", "sys$share:decw$dxmlibshr12.exe/share,sys$share:decw$xmlibshr12."&
!(BX)	"exe/share,sys$share:decw$mrmlibshr12.exe/share,sys$share:decw$x"&
!(BX)	"tlibshrr5.exe/share,sys$share:decw$xlibshr.exe/share,sys$share:"&
!(BX)	"decc$shr.exe/share")
!(BX) bx_info("cppOutputIncludes", "/standard=vaxc/define=(__STDC__=1)")
!(BX) bx_info("cppOutputLibraries", "sys$share:decw$dxmlibshr12.exe/share,sys$share:decw$xmlibshr12."&
!(BX)	"exe/share,sys$share:decw$mrmlibshr12.exe/share,sys$share:decw$x"&
!(BX)	"tlibshrr5.exe/share,sys$share:decw$xlibshr.exe/share,sys$share:"&
!(BX)	"decc$shr.exe/share")
!(BX) bx_info("builder_version", "Builder Xcessory 3.5.1 VMS")
!(BX) bx_info("ansi", "false")
!(BX) bx_info("use_locales", "false")
!(BX) bx_info("new_mrm_style", "true")
!(BX) bx_info("c_wrap_lines", "true")
!(BX) bx_info("uil_wrap_lines", "true")
!(BX) bx_info("integrate_purify", "false")
!(BX) bx_info("purify_command", "purify")
!(BX) bx_info("integrate_xrunner", "false")
!(BX) bx_info("xrunner_command", "$(M_ROOT)/arch/X11.5/Xm1.2/mic_xm.o")

value
    DEVICE_NID :  -1;
    DEVICE$N_NAME :  1;
    DEVICE$N_COMMENT :  2;
    DEVICE$N_INIT_ACTION :  0;
    DEVICE$N_STORE_ACTION :  0;
    DEVICE$K_NODES_PER_INP :  3;
    DEVICE$N_INP_HEAD :  0;
    DEVICE$N_INP_ENDIDX :  2;
    DEVICE$N_INP_STARTIDX :  1;
    DEVICE$N_INPUTS :  12;
procedure AddListTree();
procedure TurnOnOff(integer);
procedure DisplayData();
procedure DisplayNci();
procedure ModifyData();
procedure SetupDevice();
procedure MenuUnmap();
procedure MTurnOnOff(integer);
procedure MSetupDevice();
procedure MDisplayData();
procedure MDisplayNci();
procedure MModifyData();
procedure CloseTree();
procedure OpenTree();
procedure Exit;
procedure Disable(integer);
procedure ConfirmAbort(integer);
procedure SetKillTarget();
list BaseStyle : arguments {
};

list BaseStyleReasons : callbacks {
};

!(BX)list BaseStyleHandlers : handlers {
!(BX)};


!(BX)object topLevelShell : TopLevelShell widget {
!(BX)    arguments {
!(BX)        XmNx = 153;
!(BX)        XmNy = 511;
!(BX)        XmNwidth = 800;
!(BX)        XmNheight = 434;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmMainWindow main;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object main : XmMainWindow widget {
    arguments {
        XmNwidth = 800;
        XmNheight = 454;
    };
    controls {
         managed XmForm mainForm;
         managed XmMenuBar menuBar;
    };
    callbacks {
    };
};

object mainForm : XmForm widget {
    arguments {
    };
    controls {
         managed XmPanedWindow panedWindow;
         managed XmRowColumn rowColumn;
    };
    callbacks {
    };
};

object rowColumn : XmRowColumn widget {
    arguments {
        XmNorientation = XmHORIZONTAL;
        XmNtopAttachment = XmATTACH_NONE;
        XmNbottomAttachment = XmATTACH_FORM;
        XmNleftAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNbottomOffset = 0;
        XmNleftOffset = 0;
        XmNrightOffset = 0;
    };
    controls {
         managed XmLabel label;
         managed XmText server_name;
         managed XmPushButton abort_server_b;
         managed XmPushButton kill_server_b;
         managed XmPushButton kill_dispatcher_b;
    };
    callbacks {
    };
};

object label : XmLabel widget {
    arguments {
        XmNlabelString = compound_string("Server:");
        XmNwidth = 52;
        XmNheight = 32;
    };
    controls {
    };
    callbacks {
    };
};

object server_name : XmText widget {
    arguments {
        XmNeditable = false;
        XmNcolumns = 32;
        XmNheight = 32;
    };
    controls {
    };
    callbacks {
    };
};

object abort_server_b : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Abort Server");
        XmNwidth = 96;
        XmNheight = 32;
        XmNsensitive = false;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure ConfirmAbort(0);
    };
};

object kill_server_b : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Kill Server");
        XmNwidth = 80;
        XmNheight = 32;
        XmNsensitive = false;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure ConfirmAbort(1);
    };
};

object kill_dispatcher_b : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Kill Dispatcher");
        XmNwidth = 106;
        XmNheight = 32;
        XmNsensitive = false;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure ConfirmAbort(2);
    };
};

object panedWindow : XmPanedWindow widget {
    arguments {
        XmNtopAttachment = XmATTACH_FORM;
        XmNbottomAttachment = XmATTACH_WIDGET;
	XmNbottomWidget = XmRowColumn rowColumn;
        XmNleftAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
    };
    controls {
         managed XmScrolledWindow scrolledWindow;
         managed XmScrolledWindow scrolledWindow1;
         managed XmScrolledWindow scrolledWindow2;
    };
    callbacks {
    };
};

object scrolledWindow : XmScrolledWindow widget {
    arguments {
    };
    controls {
         managed XmList log;
    };
    callbacks {
    };
};

object log : XmList widget {
    arguments {
        XmNsensitive = true;
        XmNhighlightThickness = 0;
        XmNshadowThickness = 0;
        XmNfontList = font_table(
		font('FIXED',character_set=iso_latin1));
        XmNselectionPolicy = XmMULTIPLE_SELECT;
    };
    controls {
    };
    callbacks {
    };
};

object scrolledWindow1 : XmScrolledWindow widget {
    arguments {
    };
    controls {
         managed XmList errors;
    };
    callbacks {
    };
};

object errors : XmList widget {
    arguments {
        XmNsensitive = true;
        XmNhighlightThickness = 0;
        XmNshadowThickness = 0;
        XmNfontList = font_table(
		font('FIXED',character_set=iso_latin1));
        XmNselectionPolicy = XmMULTIPLE_SELECT;
    };
    controls {
    };
    callbacks {
    };
};

object scrolledWindow2 : XmScrolledWindow widget {
    arguments {
    };
    controls {
         managed XmList current_actions;
    };
    callbacks {
    };
};

object current_actions : XmList widget {
    arguments {
        XmNsensitive = true;
        XmNhighlightThickness = 0;
        XmNshadowThickness = 0;
        XmNfontList = font_table(
		font('FIXED',character_set=iso_latin1));
        XmNselectionPolicy = XmSINGLE_SELECT;
    };
    controls {
    };
    callbacks {
!        XmNdefaultActionCallback = procedure SetKillTarget();
	 XmNsingleSelectionCallback = procedure SetKillTarget();
    };
};

object menuBar : XmMenuBar widget {
    arguments {
    };
    controls {
         managed XmCascadeButtonGadget cascadeButtonGadget;
         managed XmCascadeButtonGadget cascadeButtonGadget1;
    };
    callbacks {
    };
};

object cascadeButtonGadget : XmCascadeButtonGadget widget {
    arguments {
        XmNlabelString = compound_string("File");
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu;
    };
    callbacks {
    };
};

object pulldownMenu : XmPulldownMenu widget {
    arguments {
    };
    controls {
         managed XmPushButtonGadget pushButtonGadget;
    };
    callbacks {
    };
};

object pushButtonGadget : XmPushButtonGadget widget {
    arguments {
        XmNlabelString = compound_string("Exit");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure Exit(0);
    };
};

object cascadeButtonGadget1 : XmCascadeButtonGadget widget {
    arguments {
        XmNlabelString = compound_string("Options");
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu1;
    };
    callbacks {
    };
};

object pulldownMenu1 : XmPulldownMenu widget {
    arguments {
    };
    controls {
         managed XmToggleButtonGadget toggleButtonGadget;
         managed XmToggleButtonGadget toggleButtonGadget1;
         managed XmToggleButtonGadget toggleButtonGadget2;
         managed XmToggleButtonGadget toggleButtonGadget3;
         managed XmToggleButtonGadget toggleButtonGadget4;
         managed XmToggleButtonGadget toggleButtonGadget5;
         managed XmToggleButtonGadget toggleButtonGadget6;
         managed XmToggleButtonGadget toggleButtonGadget7;
    };
    callbacks {
    };
};

object toggleButtonGadget : XmToggleButtonGadget widget {
    arguments {
        XmNlabelString = compound_string("Action Outline Update Disabled");
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure Disable(0);
    };
};

object toggleButtonGadget1 : XmToggleButtonGadget widget {
    arguments {
        XmNlabelString = compound_string("Action Outline Off");
        XmNset = false;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure Disable(3);
    };
};

object toggleButtonGadget2 : XmToggleButtonGadget widget {
    arguments {
        XmNlabelString = compound_string("Action Log Update Disabled");
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure Disable(1);
    };
};

object toggleButtonGadget3 : XmToggleButtonGadget widget {
    arguments {
        XmNlabelString = compound_string("Action Log Off");
        XmNset = false;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure Disable(4);
    };
};

object toggleButtonGadget4 : XmToggleButtonGadget widget {
    arguments {
        XmNlabelString = compound_string("Action Errors Updates Disabled");
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure Disable(2);
    };
};

object toggleButtonGadget5 : XmToggleButtonGadget widget {
    arguments {
        XmNlabelString = compound_string("Action Errors Off");
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure Disable(5);
    };
};

object toggleButtonGadget6 : XmToggleButtonGadget widget {
    arguments {
        XmNlabelString = compound_string("Current Actions Updates Disabled" &
 "");
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure Disable(6);
    };
};

object toggleButtonGadget7 : XmToggleButtonGadget widget {
    arguments {
        XmNlabelString = compound_string("Current Actions Off");
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure Disable(7);
    };
};
end module;
