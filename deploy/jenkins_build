#!/bin/bash

set -e
MAKE=${MAKE:="env LANG=en_US.UTF-8 make"};
if [ "$BRANCH" = "stable" ]; then export BNAME=""; else export BNAME="-"${BRANCH}; fi;

test_64 () {
    mkdir -p ${WORKSPACE}/64test;
    pushd ${WORKSPACE}/64test;
    mkdir -p ./buildroot;
    MDSPLUS_DIR=$(pwd)/buildroot;
    MDS_PATH=${MDSPLUS_DIR}/tdi;
    ${SRCDIR}/configure  \
	     --prefix=${MDSPLUS_DIR} \
	     --exec_prefix=${MDSPLUS_DIR} \
	     --bindir=${MDSPLUS_DIR}/bin64 \
	     --libdir=${MDSPLUS_DIR}/lib64 \
	     --with-gsi=/usr:gcc64 \
	     --with-java_target=6 \
	     --with-java_bootclasspath=${SRCDIR}/rt.jar \
	     --enable-debug --host=x86_64-linux;
    if ( ! $MAKE && $MAKE install )
    then
	$MAKE docker stop;
	exit 1;
    fi;
    $MAKE -k tests TEST_FORMAT=tap;
    tests_tap64=$?;
    $MAKE -k tests-valgrind TEST_FORMAT=tap;
    tests_valgrind64=$?;
    $MAKE docker stop;
    set -e;
    popd;
}

test_32() {
    mkdir -p ${WORKSPACE}/32test;
    pushd ${WORKSPACE}/32test;
    mkdir -p ./buildroot;
    MDSPLUS_DIR=$(pwd)/buildroot;
    MDS_PATH=${MDSPLUS_DIR}/tdi;
    ${SRCDIR}/configure \
	     --prefix=${MDSPLUS_DIR} \
	     --exec_prefix=${MDSPLUS_DIR} \
	     --bindir=${MDSPLUS_DIR}/bin32 \
	     --libdir=${MDSPLUS_DIR}/lib32 \
	     --with-gsi=/usr:gcc32 \
	     --with-java_target=6 \
	     --with-java_bootclasspath=${SRCDIR}/rt.jar \
	     --enable-debug --host=i686-linux;
    if ( ! $MAKE && $MAKE install )
    then
	$MAKE docker stop;
	exit 1;
    fi;
    set +e;
    $MAKE -k tests TEST_FORMAT=tap;
    tests_tap32=$?;
    $MAKE -k tests-valgrind TEST_FORMAT=tap;
    tests_valgrind32=$?;
    $MAKE docker stop;
    set -e;
    popd;
}

check_tests() {
    failed=0;
    if [ "$tests_tap64" = "1" ]
    then
	echo "64-bit tap tests failed!!!";
	failed=1;
    fi;
    if [ "$tests_valgrind64" = "1" ]
    then
	echo "64-bit valgrind tests failed!!!";
	failed=1;
    fi;
    if [ "$tests_tap32" = "1" ]
    then
	echo "32-bit tap tests failed!!!";
	failed=1;
    fi;
    if [ "$tests_valgrind32" = "1" ]
    then
	echo "32-bit valgrind tests failed!!!";
	failed=1;
    fi;
    if [ "$failed" = "1" ]
    then
	exit 1;
    fi;
}

build_64 () {
    mkdir -p ${WORKSPACE}/usr/local/mdsplus;
    mkdir -p ${WORKSPACE}/64rel;
    pushd ${WORKSPACE}/64rel;
    MDSPLUS_DIR=${WORKSPACE}/usr/local/mdsplus;
    ${SRCDIR}/configure \
	     --prefix=${MDSPLUS_DIR} \
	     --exec_prefix=${MDSPLUS_DIR} \
	     --bindir=${MDSPLUS_DIR}/bin64 \
	     --libdir=${MDSPLUS_DIR}/lib64 \
	     --with-gsi=/usr:gcc64 \
	     --with-java_target=6 \
	     --with-java_bootclasspath=${SRCDIR}/rt.jar \
	     --host=x86_64-linux;
    if ( ! $MAKE && $MAKE install )
    then
	$MAKE docker stop;
	exit 1;
    fi;
    $MAKE docker stop
    popd;
}

build_32 () {
    mkdir -p ${WORKSPACE}/32rel;
    pushd ${WORKSPACE}/32rel;
    ${SRCDIR}/configure --with-docker-image=${DOCKER_IMAGE} \
	     --prefix=${MDSPLUS_DIR} \
	     --exec_prefix=${MDSPLUS_DIR} \
	     --bindir=${MDSPLUS_DIR}/bin32 \
	     --libdir=${MDSPLUS_DIR}/lib32 \
	     --with-gsi=/usr:gcc64 \
	     --with-java_target=6 \
	     --with-java_bootclasspath=${SRCDIR}/rt.jar \
	     --host=i686-linux;
    if ( ! $MAKE && $MAKE install )
    then
	$MAKE  docker stop;
	exit 1;
    fi
    $MAKE docker stop;
    popd ; 
}

build_rpms () {
    echo "Building rpms";
    mkdir -p ${WORKSPACE}/etc/yum.repos.d;
    mkdir -p ${WORKSPACE}/etc/pki/rpm-gpg/;
    export INSTALLER_DIR=${DISTDIR}/${DIST};
    mkdir -p ${INSTALLER_DIR}/BUILD ${INSTALLER_DIR}/BUILDROOT ${INSTALLER_DIR}/SPECS ${INSTALLER_DIR}/RPMS ${INSTALLER_DIR}/SRPMS;
    cp ${SRCDIR}/deploy/RPM-GPG-KEY-MDSplus ${WORKSPACE}/etc/pki/rpm-gpg/;
    cat - > ${WORKSPACE}/etc/yum.repos.d/mdsplus${BNAME}.repo <<EOF
[MDSplus${BNAME}]
name=MDSplus${BNAME}
baseurl=http://www.mdsplus.org/dist/${DIST}/${BRANCH}/RPMS
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-MDSplus
metadata_expire=300
EOF
    docker run --rm --entrypoint=/bin/bash -v ${SRCDIR}:/source -v ${INSTALLER_DIR}:/installer \
	   -v ${WORKSPACE}:/buildroot -i <<EOF
source /source/jenkins_build.conf
/source/deploy/build_rpms_mdsplus;
EOF
}

build_eggs() {
    export BUILDDIR=${WORKSPACE};
    export EGGS_DIR=${DISTDIR}/EGGS;
    mkdir -p ${EGGS_DIR}
    ${SRCDIR}/deploy/build_eggs;
}

do_tests() {
    if [ "$(echo ${BUILD_TYPE} | grep -c test)" = "1" ]; then exit 0; else exit 1; fi;
}

do_release() {
    if [ "$(echo ${BUILD_TYPE} | grep -c release)" = "1" ]; then exit 0; else exit 1; fi;
}


case ${JOB_NAME} in
    *build_fc*|*build_rhel*)
	export DOCKER_IMAGE=mdsplus/docker:$JOB_NAME
	source ${SRCDIR}/jenkins_build.conf
	if [ do_release ]
	then
	    if [ -z "$DIST" ]; then DIST=${JOB_NAME:6}; fi;
	    if [ -z "$DISTDIR" ]; then DISTDIR=/mdsplus/pre-dist; fi
	    DIST_TAG_FILE=${DISTDIR}/${DIST}/${BRANCH}/mdsplus-${BRANCH}-${MAJOR}.${MINOR}-${RELEASE}
	fi
	if [ do_release -a -r ${DIST_TAG_FILE } )
	then
	    echo "Release already built. Nothing more to do."
	    exit 0;
	fi;
	if [ do_tests ]
	then
	    test_64;
	    test_32;
	    check_tests;
	fi;
	if [ do_release ]
	then
	    build_64;
	    build_32;
	    build_rpms;
	    touch ${DIST_TAG_FILE};
	    build_eggs;
	fi;;
    *release*|*test*)
	branch=${GIT_BRANCH:7};
	release_tag=$(git tag | grep ${branch}_release | sort -V | awk '{line=$0} END{print line}');
	major=$(echo $release_tag | cut -f2 -d-);
	minor=$(echo $release_tag | cut -f3 -d-);
	release=$(echo $release_tag | cut -f4 -d-);
	if [ "$(git rev-list -n 1 $release_tag)" != "${GIT_COMMIT}" ]
	then
	    let release=$release+1;
	    release_tag=${branch}_release-${major}-${minor}-${release};
	    git log --decorate=full > ChangeLog;
	fi;
	cat - <<EOF > jenkins_build.conf
BRANCH=${branch}
RELEASE_TAG=${release_tag}
MAJOR=${major}
MINOR=${minor}
RELEASE=${release}
BUILD_TYPE=$1
EOF
	;;
    *) echo "Unknown job";;
esac
exit 0







if [ -d /installer ]
then
    echo "Building rpms"
    mkdir -p /buildroot/etc/yum.repos.d
    mkdir -p /buildroot/etc/pki/rpm-gpg/
    mkdir -p /installer/BUILD /installer/BUILDROOT /installer/SPECS /installer/RPMS /installer/SRPMS
    cp deploy/RPM-GPG-KEY-MDSplus /buildroot/etc/pki/rpm-gpg/
    outfile=/buildroot/etc/yum.repos.d/mdsplus${BNAME}.repo
    echo [MDSplus${BNAME}] > $outfile
    echo "name=MDSplus${BNAME}" >> $outfile
    echo "baseurl=http://www.mdsplus.org/dist/${DIST}/${BRANCH}/RPMS" >> $outfile
    echo "enabled=1" >> $outfile
    cat - >> $outfile <<EOF
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-MDSplus
metadata_expire=300
EOF
    build_rpms_mdsplus
    #
    # If everything went successfully then make a marker file indicating
    # that an installer has been built for this release.
    #
    touch /installer/mdsplus${BNAME}-${MAJOR}.${MINOR}-${RELEASE}
fi

if [ -d /EGGS ]
then
    #
    # If an /EGGS directory is available build python distribution eggs
    # which will be used by easy_install.
    #
    build_eggs
fi

    
+ branch=twfbld
++ git tag
++ grep twfbld_release
++ sort -V
++ awk '{line=$0} END{print line}'
+ release_tag=twfbld_release-8-0-1
++ echo twfbld_release-8-0-1
++ cut -f2 -d-
+ major=8
++ echo twfbld_release-8-0-1
++ cut -f3 -d-
+ minor=0
++ echo twfbld_release-8-0-1
++ cut -f4 -d-
+ release=1
++ git rev-list -n 1 twfbld_release-8-0-1
+ '[' 613f34599b163416329365090e161bf34ea50c83 '!=' 5d14617662df5d623f49927c70e2a0a57c7227f9 ']'
+ let release=1+1
+ release_tag=twfbld_release-8-0-2
+ git log --decorate=full
+ cat -
