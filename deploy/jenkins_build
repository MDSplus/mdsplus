#!/bin/bash
set -o verbose
set -e
case ${JOB_NAME} in
    *build_fc*|*build_rhel*)
	source ${SRCDIR}/jenkins_build.conf
	export DOCKER_CONTAINER=$JOB_NAME
	export DOCKER_IMAGE=mdsplus/docker:$JOB_NAME
	case ${BUILD_TYPE} in
	    test|release)
		if [ "${BuILD_TYPE}" = "release" ]
		then
		    source ${SRCDIR}/release.conf;
		    if [ "${BuILD_TYPE}" = "release" -a -r ${DISTDIR}/${DIST}/${BRANCH}/mdsplus-${BRANCH}-${MAJOR}.${MINOR}-${RELEASE} ]
		    then
			exit 0;
		    fi;
		fi;
		MAKE=${MAKE:="env LANG=en_US.UTF-8 make"};
		mkdir -p ${WORKSPACE}/64test;
		pushd ${WORKSPACE}/64test;
		mkdir -p ./buildroot;
		MDSPLUS_DIR=$(pwd)/buildroot;
		MDS_PATH=${MDSPLUS_DIR}/tdi;
		${SRCDIR}/configure  \
			 --prefix=${MDSPLUS_DIR} \
			 --exec_prefix=${MDSPLUS_DIR} \
			 --bindir=${MDSPLUS_DIR}/bin64 \
			 --libdir=${MDSPLUS_DIR}/lib64 \
			 --with-gsi=/usr:gcc64 \
			 --with-java_target=6 \
			 --with-java_bootclasspath=${SRCDIR}/rt.jar \
			 --enable-debug --host=x86_64-linux;
		$MAKE;
		$MAKE install;
		set +e
		$MAKE -k tests TEST_FORMAT=tap
		tests_tap64=$?
		$MAKE -k tests-valgrind TEST_FORMAT=tap
		tests_valgrind64=$?
		set -e
		popd;
		mkdir -p ${WORKSPACE}/32test;
		pushd ${WORKSPACE}/32test;
		mkdir -p ./buildroot;
		MDSPLUS_DIR=$(pwd)/buildroot;
		MDS_PATH=${MDSPLUS_DIR}/tdi;
		${SRCDIR}/configure \
			 --prefix=${MDSPLUS_DIR} \
			 --exec_prefix=${MDSPLUS_DIR} \
			 --bindir=${MDSPLUS_DIR}/bin32 \
			 --libdir=${MDSPLUS_DIR}/lib32 \
			 --with-gsi=/usr:gcc32 \
			 --with-java_target=6 \
			 --with-java_bootclasspath=${SRCDIR}/rt.jar \
			 --enable-debug --host=i686-linux;
		$MAKE;
		$MAKE install;
		set +e;
		$MAKE -k tests TEST_FORMAT=tap;
		tests_tap32=$?;
		$MAKE -k tests-valgrind TEST_FORMAT=tap;
		tests_valgrind32=$?;
		set -e;
		popd;
		failed=0;
		if [ "$tests_tap64" != "0" ]
		then
		    echo "64-bit tap tests failed!!!";
		    failed=1;
		fi;
		if [ "$tests_valgrind64" != "0" ]
		then
		    echo "64-bit valgrind tests failed!!!";
		    failed=1;
		fi;
		if [ "$tests_tap32" != "0" ]
		then
		    echo "32-bit tap tests failed!!!";
		    failed=1;
		fi;
		if [ "$tests_valgrind32" != "0" ]
		then
		    echo "32-bit valgrind tests failed!!!";
		    failed=1;
		fi;
		if [ "$failed" != "0" ]
		then
		    exit 1;
		fi;
		if [ "${BUILD_TYPE}" = "release" ]
		then
		    if [ "$BRANCH" = "stable" ]
		    then
			export BNAME="";
		    else
			export BNAME="-"${BRANCH};
		    fi;
		    mkdir -p ${WORKSPACE}/usr/local/mdsplus;
		    mkdir -p ${WORKSPACE}/64rel;
		    mkdir -p ${WORKSPACE}/32rel;
		    pushd ${WORKSPACE}/64rel;
		    MDSPLUS_DIR=${WORKSPACE}/usr/local/mdsplus;
		    ${SRCDIR}/configure \
			     --prefix=${MDSPLUS_DIR} \
			     --exec_prefix=${MDSPLUS_DIR} \
			     --bindir=${MDSPLUS_DIR}/bin64 \
			     --libdir=${MDSPLUS_DIR}/lib64 \
			     --with-gsi=/usr:gcc64 \
			     --with-java_target=6 \
			     --with-java_bootclasspath=${SRCDIR}/rt.jar \
			     --host=x86_64-linux;
		    $MAKE;
		    $MAKE install;
		    popd;
		    pushd ${WORKSPACE}/32rel;
		    ${SRCDIR}/configure --with-docker-image=${DOCKER_IMAGE} \
			     --prefix=${MDSPLUS_DIR} \
			     --exec_prefix=${MDSPLUS_DIR} \
			     --bindir=${MDSPLUS_DIR}/bin32 \
			     --libdir=${MDSPLUS_DIR}/lib32 \
			     --with-gsi=/usr:gcc64 \
			     --with-java_target=6 \
			     --with-java_bootclasspath=${SRCDIR}/rt.jar \
			     --host=i686-linux;
		    $MAKE;
		    $MAKE install;
		    popd ; 
		    echo "Building rpms";
		    mkdir -p ${WORKSPACE}/etc/yum.repos.d;
		    mkdir -p ${WORKSPACE}/etc/pki/rpm-gpg/;
		    export INSTALLER_DIR=/mdsplus/pre-dist/${JOB_NAME:6};
		    export BUILDDIR=${WORKSPACE};
		    export EGGS_DIR=${SRCDIR}/dist/EGGS;
		    mkdir -p ${INSTALLER_DIR}/BUILD ${INSTALLER_DIR}/BUILDROOT ${INSTALLER_DIR}/SPECS ${INSTALLER_DIR}/RPMS ${INSTALLER_DIR}/SRPMS;
		    cp ${SRCDIR}/deploy/RPM-GPG-KEY-MDSplus ${WORKSPACE}/etc/pki/rpm-gpg/;
		    outfile=${WORKSPACE}/etc/yum.repos.d/mdsplus${BNAME}.repo;
		    echo [MDSplus${BNAME}] > $outfile;
		    echo "name=MDSplus${BNAME}" >> $outfile;
		    echo "baseurl=http://www.mdsplus.org/dist/${DIST}/${BRANCH}/RPMS" >> $outfile;
		    echo "enabled=1" >> $outfile;
		    cat - >> $outfile <<EOF
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-MDSplus
metadata_expire=300
EOF
		    ${SRCDIR}/deploy/build_rpms_mdsplus;
		    #
		    # If everything went successfully then make a marker file indicating
		    # that an installer has been built for this release.
		    #
		    touch ${INSTALLER_DIR}/mdsplus${BNAME}-${MAJOR}.${MINOR}-${RELEASE};

		    ${SRCDIR}/deploy/build_eggs;
		fi;;
	    *) echo "Unknown build type";;
	esac;;
    *release*)
	branch=${GIT_BRANCH:7};
	release_tag=$(git tag | grep ${branch}_release | sort -V | awk '{line=$0} END{print line}');
	major=$(echo $release_tag | cut -f2 -d-);
	minor=$(echo $release_tag | cut -f3 -d-);
	release=$(echo $release_tag | cut -f4 -d-);
	if [ "$(git rev-list -n 1 $release_tag)" != "${GIT_COMMIT}" ]
	then
	    let release=$release+1;
	    release_tag=${branch}_release-${major}-${minor}-${release};
	    git log --decorate=full > ChangeLog;
	fi;
	cat - <<EOF > jenkins_build.conf
BRANCH=${branch}
RELEASE_TAG=${release_tag}
MAJOR=${major}
MINOR=${minor}
RELEASE=${release}
BUILD_TYPE=release
EOF
	;;
    *) echo "Unknown job";;
esac
exit 0







if [ -d /installer ]
then
    echo "Building rpms"
    mkdir -p /buildroot/etc/yum.repos.d
    mkdir -p /buildroot/etc/pki/rpm-gpg/
    mkdir -p /installer/BUILD /installer/BUILDROOT /installer/SPECS /installer/RPMS /installer/SRPMS
    cp deploy/RPM-GPG-KEY-MDSplus /buildroot/etc/pki/rpm-gpg/
    outfile=/buildroot/etc/yum.repos.d/mdsplus${BNAME}.repo
    echo [MDSplus${BNAME}] > $outfile
    echo "name=MDSplus${BNAME}" >> $outfile
    echo "baseurl=http://www.mdsplus.org/dist/${DIST}/${BRANCH}/RPMS" >> $outfile
    echo "enabled=1" >> $outfile
    cat - >> $outfile <<EOF
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-MDSplus
metadata_expire=300
EOF
    build_rpms_mdsplus
    #
    # If everything went successfully then make a marker file indicating
    # that an installer has been built for this release.
    #
    touch /installer/mdsplus${BNAME}-${MAJOR}.${MINOR}-${RELEASE}
fi

if [ -d /EGGS ]
then
    #
    # If an /EGGS directory is available build python distribution eggs
    # which will be used by easy_install.
    #
    build_eggs
fi

    
+ branch=twfbld
++ git tag
++ grep twfbld_release
++ sort -V
++ awk '{line=$0} END{print line}'
+ release_tag=twfbld_release-8-0-1
++ echo twfbld_release-8-0-1
++ cut -f2 -d-
+ major=8
++ echo twfbld_release-8-0-1
++ cut -f3 -d-
+ minor=0
++ echo twfbld_release-8-0-1
++ cut -f4 -d-
+ release=1
++ git rev-list -n 1 twfbld_release-8-0-1
+ '[' 613f34599b163416329365090e161bf34ea50c83 '!=' 5d14617662df5d623f49927c70e2a0a57c7227f9 ']'
+ let release=1+1
+ release_tag=twfbld_release-8-0-2
+ git log --decorate=full
+ cat -
