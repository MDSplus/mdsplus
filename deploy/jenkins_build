#!/bin/bash


test_64 () {
    set -e
    set -o verbose
    if [ -r /mdsplus/workspace/tests ]
    then
	MDSPLUS_DIR=/mdsplus/workspace/tests/64/buildroot;
	MDS_PATH=${MDSPLUS_DIR}/tdi;
	mkdir -p ${MDSPLUS_DIR};
	pushd /mdsplus/workspace/tests/64;
	/mdsplus/source/configure  \
	    --prefix=${MDSPLUS_DIR} \
	    --exec_prefix=${MDSPLUS_DIR} \
	    --bindir=${MDSPLUS_DIR}/bin64 \
	    --libdir=${MDSPLUS_DIR}/lib64 \
	    --with-gsi=/usr:gcc64 \
	    --with-java_target=6 \
	    --with-java_bootclasspath=/mdsplus/source/rt.jar \
	    --enable-debug --host=x86_64-linux;
	$MAKE
	$MAKE install
	set +e
	$MAKE -k tests TEST_FORMAT=tap;
	export tests_tap64=$?;
	$MAKE -k tests-valgrind TEST_FORMAT=tap;
	export tests_valgrind64=$?;
	set -e;
	popd;
    fi;
}

test_32() {
    set -e
    set -o verbose
    if [ -r /mdsplus/workspace/tests ]
    then
	MDSPLUS_DIR=/mdsplus/workspace/tests/32/buildroot;
	MDS_PATH=${MDSPLUS_DIR}/tdi;
	mkdir -p ${MDSPLUS_DIR};
	pushd /mdsplus/workspace/tests/32;
	/mdsplus/source/configure \
	    --prefix=${MDSPLUS_DIR} \
	    --exec_prefix=${MDSPLUS_DIR} \
	    --bindir=${MDSPLUS_DIR}/bin32 \
	    --libdir=${MDSPLUS_DIR}/lib32 \
	    --with-gsi=/usr:gcc32 \
	    --with-java_target=6 \
	    --with-java_bootclasspath=/mdsplus/source/rt.jar \
	    --enable-debug --host=i686-linux;
	$MAKE
	$MAKE install
	set +e;
	$MAKE -k tests TEST_FORMAT=tap;
	export tests_tap32=$?;
	$MAKE -k tests-valgrind TEST_FORMAT=tap;
	export tests_valgrind32=$?;
	set -e;
	popd;
    fi;
}

check_tests() {
    failed=0;
    if [ "$tests_tap64" = "1" ]
    then
	echo "64-bit tap tests failed!!!";
	failed=1;
    fi;
    if [ "$tests_valgrind64" = "1" ]
    then
	echo "64-bit valgrind tests failed!!!";
	failed=1;
    fi;
    if [ "$tests_tap32" = "1" ]
    then
	echo "32-bit tap tests failed!!!";
	failed=1;
    fi;
    if [ "$tests_valgrind32" = "1" ]
    then
	echo "32-bit valgrind tests failed!!!";
	failed=1;
    fi;
    if [ "$failed" = "1" ]
    then
	exit 1;
    fi;
}

build_64 () {
    set -e
    set -o verbose
    if [ -r /mdsplus/workspace/release ]
    then
	MDSPLUS_DIR=/mdsplus/workspace/release/usr/local/mdsplus;
	mkdir -p ${MDSPLUS_DIR};
	mkdir -p /mdsplus/workspace/release/64;
	pushd /mdsplus/workspace/release/64;
	/mdsplus/source/configure \
	    --prefix=${MDSPLUS_DIR} \
	    --exec_prefix=${MDSPLUS_DIR} \
	    --bindir=${MDSPLUS_DIR}/bin64 \
	    --libdir=${MDSPLUS_DIR}/lib64 \
	    --with-gsi=/usr:gcc64 \
	    --with-java_target=6 \
	    --with-java_bootclasspath=/mdsplus/source/rt.jar \
	    --host=x86_64-linux;
	$MAKE
	$MAKE install
	popd;
    fi;
}

build_32 () {
    set -e
    set -o verbose
    if [ -r /mdsplus/workspace/release ]
    then
	MDSPLUS_DIR=/mdsplus/workspace/release/usr/local/mdsplus;
	mkdir -p ${MDSPLUS_DIR};
	mkdir -p /mdsplus/workspace/release/32;
	pushd /mdsplus/workspace/release/32;
	/mdsplus/source/configure  \
	    --prefix=${MDSPLUS_DIR} \
	    --exec_prefix=${MDSPLUS_DIR} \
	    --bindir=${MDSPLUS_DIR}/bin32 \
	    --libdir=${MDSPLUS_DIR}/lib32 \
	    --with-gsi=/usr:gcc64 \
	    --with-java_target=6 \
	    --with-java_bootclasspath=/mdsplus/source/rt.jar \
	    --host=i686-linux;
	$MAKE
	$MAKE install
	popd ;
    fi;
}

build_rpms () {
    set -e
    set -o verbose
    if [ -r /mdsplus/installer ]
    then
	export HOME=/mdsplus/source
        export DISTDIR=/mdsplus/installer/${DIST}
	export BUILDROOT=/mdsplus/workspace/release
	echo "Building rpms";
	mkdir -p /mdsplus/workspace/release/etc/yum.repos.d;
	mkdir -p /mdsplus/workspace/release/etc/pki/rpm-gpg/;
	export INSTALLER_DIR=/mdsplus/installer/${DIST};
	mkdir -p ${INSTALLER_DIR}/BUILD ${INSTALLER_DIR}/BUILDROOT ${INSTALLER_DIR}/SPECS ${INSTALLER_DIR}/RPMS ${INSTALLER_DIR}/SRPMS;
	cp /mdsplus/source/deploy/RPM-GPG-KEY-MDSplus /mdsplus/workspace/release/etc/pki/rpm-gpg/;
	cat - > /mdsplus/workspace/release/etc/yum.repos.d/mdsplus${BNAME}.repo <<EOF
[MDSplus${BNAME}]
name=MDSplus${BNAME}
baseurl=http://www.mdsplus.org/dist/${DIST}/${BRANCH}/RPMS
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-MDSplus
metadata_expire=300
EOF
	pushd /mdsplus/source
	/mdsplus/source/deploy/build_rpms_mdsplus;
	popd
    fi;
}

build_eggs() {
    if [ -r /mdsplus/installer ]
    then
	export BUILDDIR=/mdsplus/workspace;
	export EGGS_DIR=/mdsplus/installer/EGGS;
	mkdir -p ${EGGS_DIR}
	/mdsplus/source/deploy/build_eggs;
    fi;
}

do_tests() {
    if [ "$(echo ${BUILD_TYPE} | grep -c test)" = "1" ]; then exit 0; else exit 1; fi;
}

do_release() {
    if [ "$(echo ${BUILD_TYPE} | grep -c release)" = "1" ]; then exit 0; else exit 1; fi;
}

set -e
set -o verbose
if [ -r /mdsplus/workspace -a -r /mdsplus/source -a -r /mdsplus/source/jenkins_build.conf ]
then
    source build.conf
    MAKE=${MAKE:="env LANG=en_US.UTF-8 make"};
    source /mdsplus/source/jenkins_build.conf
    if [ -r /mdsplus/workspace/release ]
    then
	if [ "$BRANCH" = "stable" ]; then export BNAME=""; else export BNAME="-"${BRANCH}; fi;
	DIST_TAG_FILE=/mdsplus/installer/${DIST}/${BRANCH}/mdsplus-${BRANCH}-${MAJOR}.${MINOR}-${RELEASE}
	export MDSPLUS_VERSION=${MAJOR}.${MINOR}.${RELEASE}
	if [ -r $DIST_TAG_FILE ]
	then
	    echo "This release is already complete. Nothing else to do."
	    exit 0
	fi
    fi
    case ${DIST_TYPE} in
	 redhat)
	     set -e;
	     test_64;
	     test_32;
	     check_tests;
	     build_64;
	     build_32;
	     build_rpms;
	     build_eggs;;
	 *)
	     echo Unknown DIST_TYPE: ${DIST_TYPE}
	     exit 1;;
    esac
    if [ -r /mdsplus/release ]
    then
	touch $DIST_TAG_FILE
    fi
else
    case ${JOB_NAME} in
	build*)
	    docker pull mdsplus/docker:${JOB_NAME}
	    source ${SRCDIR}/jenkins_build.conf
	    if ( do_release )
	    then
		mkdir -p ${WORKSPACE}/release
		if [ -z "${DIST_DIR}" ]
		then
		    DIST_DIR=/mdsplus/pre-dist
		fi
		installer_volume="-v ${DIST_DIR}:/mdsplus/installer"		
	    fi
	    if ( do_tests )
	    then
		mkdir -p ${WORKSPACE}/tests
	    fi;
	    docker run --rm \
		   -u $(id -u):$(id -g) \
		   -v ${SRCDIR}:/mdsplus/source \
		   -v ${WORKSPACE}:/mdsplus/workspace \
		   ${installer_volume} \
		   mdsplus/docker:${JOB_NAME};;
	*release*)
	    branch=${GIT_BRANCH:7};
	    release_tag=$(git tag | grep ${branch}_release | sort -V | awk '{line=$0} END{print line}');
	    major=$(echo $release_tag | cut -f2 -d-);
	    minor=$(echo $release_tag | cut -f3 -d-);
	    release=$(echo $release_tag | cut -f4 -d-);
	    if [ "$(git rev-list -n 1 $release_tag)" != "${GIT_COMMIT}" ]
	    then
		let release=$release+1;
		release_tag=${branch}_release-${major}-${minor}-${release};
		git log --decorate=full > ChangeLog;
	    fi;
	    if [ ! -z "$2" ]
	    then
		tar zxf $2
	    fi
	    cat - <<EOF > ${WORKSPACE}jenkins_build.conf
export BRANCH=${branch}
export RELEASE_TAG=${release_tag}
export MAJOR=${major}
export MINOR=${minor}
export RELEASE=${release}
export BUILD_TYPE=$1
EOF
	    ;;
	*test*)
	    echo "export BUILD_TYPE=$1" > ${WORKSPACE}jenkins_build.conf
	    ;;
	*) echo "Unknown job";
	   exit 1;
	   ;;
    esac
fi
