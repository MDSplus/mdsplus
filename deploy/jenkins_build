#!/bin/bash
print_help() {
    cat - <<EOF
$0

    This script is used for testing and building MDSplus
releases from jenkins. Normally one jenkins job is used
to trigger the builds of many other jobs to either test
MDSplus or build releases on various computing platforms
using docker containers.

    The trigger job would use a command such as:

    $0 --trigger [--test] 
         [--valgrind comma-list-of-tests-or-"all"] 
         [--release] 
         [--keys directory] [--distdir directory]
         [--verbose]

    The --test and --valgrind options will tell the build
jobs to build MDSplus from sources and perform tests on
the compiled code. The --release option will tell the build
jobs to build release versions of MDSplus and put the
installers in a subdirectory of the directory specified with
the --distdir option. The --keys option is for specifying a
directory which has a .gnupg subdirectory containing signing
keys to use when making packages. If the --keys option is not
specified the packages will not be signed. After issuing this
command the trigger job should use the "Trigger/call builds
on other projects" jenkins plugin to trigger the platform
build jobs passing predefined parameters. If just doing
testing a SRCDIR parameter must be defined with a value
of $WORKSPACE. This tells the build job where to get the
source code and configuration parameters for its build
operations. If performing a release you must also pass the
GIT_BRANCH parameter.

     The build jobs would use a command such as:

     $0 --build docker-image

All the build options are passed from the trigger job using
the SRCDIR parameter which informs the build job where to find
 the source and options for the build.

EOF
}

parse_valgrind() {
    IFS=',' read -ra ARR <<< "$1"
    VGTESTS=""
    for i in "${ARR[@]}"; do
	VGTESTS="${i} ${VGTESTS}"
    done
    echo ${VGTESTS}
}

parse_cmd() {
    while [[ "$1" == -* ]] ; do
	case "$1" in
	    -h|--help)
		print_help
		exit 0;;
	    --build)
		OP="BUILD"
		DOCKER_IMAGE=$2
		shift 2;;
	    -s|--srcdir)
		SRCDIR=$2
		shift 2;;
	    -b|--builddir)
		BUILDDIR=$2
		shift 2;;
	    --trigger)
		OP="TRIGGER"
		shift 1;;
	    --test)
		TESTS=yes
		shift 1;;
	    --valgrind)
		VG_TESTS=$(parse_valgrind $2)
		shift 2;;
	    --release)
		MAKE_RELEASE=yes
		shift 1;;
	    --keys)
		SIGN_KEYS=$2
		shift 2;;
	    -v|--verbose)
		VERBOSE=yes
		shift
		;;
	    --distdir)
		DISTDIR=$2
		shift 2;;
	    --workspace)
		WORKSPACE=$2
		shift 2;;
	    *)
		break
		;;
	esac
    done
    if [ $# -ne 0 ] ; then
	echo "Incorrect parameters. Use --help for usage instructions."
	exit 1
    fi
}

test_64 () {
    set -e
    if [ "$VERBOSE" = "yes" ]
    then
	set -o verbose
    fi
    if [ -r /mdsplus/workspace/tests ]
    then
	MDSPLUS_DIR=/mdsplus/workspace/tests/64/buildroot;
	MDS_PATH=${MDSPLUS_DIR}/tdi;
	mkdir -p ${MDSPLUS_DIR};
	pushd /mdsplus/workspace/tests/64;
	/mdsplus/source/configure  \
	    --prefix=${MDSPLUS_DIR} \
	    --exec_prefix=${MDSPLUS_DIR} \
	    --bindir=${MDSPLUS_DIR}/bin64 \
	    --libdir=${MDSPLUS_DIR}/lib64 \
	    --with-gsi=/usr:gcc64 \
	    --with-java_target=6 \
	    --with-java_bootclasspath=/mdsplus/source/rt.jar \
	    --enable-debug --host=x86_64-linux;
	$MAKE
	$MAKE install
	set +e
	$MAKE -k tests TEST_FORMAT=tap;
	tests_64=$?;
	tests_valgrind64=0
	if [ ! -z "${VG_TESTS}" ]
	then
	    if [[ "${VG_TESTS}" == *"all"* ]]
	    then
		$MAKE -k tests-valgrind TEST_FORMAT=tap
	    else
		$MAKE -k tests-valgrind VALGRIND_TOOLS="${VG_TESTS}" TEST_FORMAT=tap;
	    fi
	    tests_valgrind64=$?;
	fi
	set -e;
	popd;
    fi;
}

test_32() {
    set -e
    if [ "$VERBOSE" = "yes" ]
    then
       set -o verbose
    fi
    if [ -r /mdsplus/workspace/tests ]
    then
	MDSPLUS_DIR=/mdsplus/workspace/tests/32/buildroot;
	MDS_PATH=${MDSPLUS_DIR}/tdi;
	mkdir -p ${MDSPLUS_DIR};
	pushd /mdsplus/workspace/tests/32;
	/mdsplus/source/configure \
	    --prefix=${MDSPLUS_DIR} \
	    --exec_prefix=${MDSPLUS_DIR} \
	    --bindir=${MDSPLUS_DIR}/bin32 \
	    --libdir=${MDSPLUS_DIR}/lib32 \
	    --with-gsi=/usr:gcc32 \
	    --with-java_target=6 \
	    --with-java_bootclasspath=/mdsplus/source/rt.jar \
	    --enable-debug --host=i686-linux;
	$MAKE
	$MAKE install
	set +e;
	$MAKE -k tests TEST_FORMAT=tap;
	tests_32=$?;
	tests_valgrind32=0
	if [ ! -z "${VG_TESTS}" ]
	then
	    if [[ "${VG_TESTS}" == *"all"* ]]
	    then
		$MAKE -k tests-valgrind TEST_FORMAT=tap
	    else
		$MAKE -k tests-valgrind VALGRIND_TOOLS="${VG_TESTS}" TEST_FORMAT=tap;
	    fi
	    tests_valgrind32=$?;
	fi
	set -e;
	popd;
    fi;
}

check_tests() {
    failed=0;
    if [ "$tests_64" != "0" ]
    then
	echo "64-bit tests failed!!!";
	failed=1;
    fi;
    if [ "$tests_valgrind64" != "0" ]
    then
	echo "64-bit valgrind tests failed!!!";
	failed=1;
    fi;
    if [ "$tests_32" != "0" ]
    then
	echo "32-bit tests failed!!!";
	failed=1;
    fi;
    if [ "$tests_valgrind32" != "0" ]
    then
	echo "32-bit valgrind tests failed!!!";
	failed=1;
    fi;
    if [ "$failed" = "1" ]
    then
	exit 1;
    fi;
}

build_64 () {
    set -e
    if [ "$VERBOSE" = "yes" ]
    then
	set -o verbose
    fi
    if [ -r /mdsplus/workspace/release ]
    then
	MDSPLUS_DIR=/mdsplus/workspace/release/usr/local/mdsplus;
	mkdir -p ${MDSPLUS_DIR};
	mkdir -p /mdsplus/workspace/release/64;
	pushd /mdsplus/workspace/release/64;
	/mdsplus/source/configure \
	    --prefix=${MDSPLUS_DIR} \
	    --exec_prefix=${MDSPLUS_DIR} \
	    --bindir=${MDSPLUS_DIR}/bin64 \
	    --libdir=${MDSPLUS_DIR}/lib64 \
	    --with-gsi=/usr:gcc64 \
	    --with-java_target=6 \
	    --with-java_bootclasspath=/mdsplus/source/rt.jar \
	    --host=x86_64-linux;
	$MAKE
	$MAKE install
	popd;
    fi;
}

build_32 () {
    set -e
    if [ "$VERBOSE" = "yes" ]
    then
	set -o verbose
    fi
    if [ -r /mdsplus/workspace/release ]
    then
	MDSPLUS_DIR=/mdsplus/workspace/release/usr/local/mdsplus;
	mkdir -p ${MDSPLUS_DIR};
	mkdir -p /mdsplus/workspace/release/32;
	pushd /mdsplus/workspace/release/32;
	/mdsplus/source/configure  \
	    --prefix=${MDSPLUS_DIR} \
	    --exec_prefix=${MDSPLUS_DIR} \
	    --bindir=${MDSPLUS_DIR}/bin32 \
	    --libdir=${MDSPLUS_DIR}/lib32 \
	    --with-gsi=/usr:gcc64 \
	    --with-java_target=6 \
	    --with-java_bootclasspath=/mdsplus/source/rt.jar \
	    --host=i686-linux;
	$MAKE
	$MAKE install
	popd ;
    fi;
}

build_rpms () {
    set -e
    if [ "$VERBOSE" = "yes" ]
    then
	set -o verbose
    fi
    if [ -r /mdsplus/installer ]
    then
        export DISTDIR=/mdsplus/installer/${DIST}
	export BUILDROOT=/mdsplus/workspace/release
	echo "Building rpms";
	mkdir -p /mdsplus/workspace/release/etc/yum.repos.d;
	mkdir -p /mdsplus/workspace/release/etc/pki/rpm-gpg/;
	export INSTALLER_DIR=/mdsplus/installer/${DIST};
	mkdir -p ${INSTALLER_DIR}/BUILD ${INSTALLER_DIR}/BUILDROOT ${INSTALLER_DIR}/SPECS ${INSTALLER_DIR}/RPMS ${INSTALLER_DIR}/SRPMS;
	cp /mdsplus/source/deploy/RPM-GPG-KEY-MDSplus /mdsplus/workspace/release/etc/pki/rpm-gpg/;
	cat - > /mdsplus/workspace/release/etc/yum.repos.d/mdsplus${BNAME}.repo <<EOF
[MDSplus${BNAME}]
name=MDSplus${BNAME}
baseurl=http://www.mdsplus.org/dist/${DIST}/${BRANCH}/RPMS
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-MDSplus
metadata_expire=300
EOF
	pushd /mdsplus/source
	/mdsplus/source/deploy/build_rpms_mdsplus;
	popd
    fi;
}

build_eggs() {
    if [ -r /mdsplus/installer ]
    then
	export BUILDDIR=/mdsplus/workspace;
	export EGGS_DIR=/mdsplus/installer/EGGS;
	mkdir -p ${EGGS_DIR}
	/mdsplus/source/deploy/build_eggs;
    fi;
}


set -e
if [ -f /.dockerinit ]
then
    source build.conf
    MAKE=${MAKE:="env LANG=en_US.UTF-8 make"};
    source /mdsplus/source/jenkins_build.conf
    if [ -r /mdsplus/workspace/release ]
    then
	DIST_TAG_FILE=/mdsplus/installer/${DIST}/${BRANCH}/mdsplus-${BRANCH}-${MAJOR}.${MINOR}-${RELEASE}
	export MDSPLUS_VERSION=${MAJOR}.${MINOR}.${RELEASE}
	if [ -r $DIST_TAG_FILE ]
	then
	    echo "This release is already complete. Nothing else to do."
	    exit 0
	fi
    fi
    case ${DIST_TYPE} in
	redhat)
	    if [ "${TESTS}" = "yes" ]
	    then
		test_64;
		test_32;
		check_tests;
	    fi
	    build_64;
	    build_32;
	    build_rpms;
	    build_eggs;;
	*)
	    echo Unknown DIST_TYPE: ${DIST_TYPE}
	    exit 1;;
    esac
    if [ -r /mdsplus/release ]
    then
	touch $DIST_TAG_FILE
    fi
else
    parse_cmd $@
    case "$OP" in
	BUILD)
	    if [ -z "$WORKSPACE" ]
	    then
		WORKSPACE=$(pwd)
	    fi
	    if [ -z "$DOCKER_IMAGE" ]
	    then
		echo "Docker image not specified"
		print_help
		exit 1;
	    fi
	    docker pull ${DOCKER_IMAGE}
	    if [ -z "$SRCDIR" ]
	    then
		echo "Source directory not specified"
		print_help
		exit 1;
	    fi
	    source ${SRCDIR}/jenkins_build.conf
	    if [ "$MAKE_RELEASE" = "yes" ]
	    then
		mkdir -p ${WORKSPACE}/release
		if [ -z "${DISTDIR}" ]
		then
		    echo "Distribution directory not specified"
		    print_help
		    exit 1;
		fi
		installer_volume="-v ${DISTDIR}:/mdsplus/installer"
	    else
		rm -Rf ${WORKSPACE}/release
	    fi
	    if [ "$TESTS" = "yes" -o "$VG_TESTS" != "" ]
	    then
		mkdir -p ${WORKSPACE}/tests
	    else
		rm -Rf ${WORKSPACE}/tests
	    fi;
	    if [ ! -z "$SIGN_KEYS" ]
	    then
		signkeys="-v ${SIGN_KEYS}/.gnupg:/root/.gnupg"
	    fi
	    docker run --name="${JOB_NAME}${BUILD_NUMBER}" \
		   -u $(id -u):$(id -g) \
		   -v ${SRCDIR}:/mdsplus/source \
		   -v ${WORKSPACE}:/mdsplus/workspace \
		   ${installer_volume} \
		   ${sign_keys} \
		   ${DOCKER_IMAGE};
	    docker rm "${JOB_NAME}${BUILD_NUMBER}";;
	TRIGGER)
	    if [ "$MAKE_RELEASE" = "yes" ]
	    then
		BRANCH=${GIT_BRANCH:7};
		RELEASE_TAG=$(git tag | grep ${branch}_release | sort -V | awk '{line=$0} END{print line}');
		MAJOR=$(echo $RELEASE_TAG | cut -f2 -d-);
		MINOR=$(echo $RELEASE_TAG | cut -f3 -d-);
		RELEASE=$(echo $RELEASE_TAG | cut -f4 -d-);
		if [ "$BRANCH" = "stable" ]
		then
		    BNAME=""
		else
		    BNAME="-${BRANCH}"
		fi
		if [ "$(git rev-list -n 1 $RELEASE_TAG)" != "${GIT_COMMIT}" ]
		then
		    let RELEASE=$RELEASE+1;
		    RELEASE_TAG=${BRANCH}_release-${MAJOR}-${MINOR}-${RELEASE};
		    git log --decorate=full > ChangeLog;
		fi;
		if [ ! -z "$SIGN_KEYS" ]
		then
		   signkeys="export SIGN_KEYS=$SIGN_KEYS"
		fi;
	    fi
	    cat - <<EOF > ${WORKSPACE}/jenkins_build.conf
export MAKE_RELEASE=$MAKE_RELEASE
export TESTS=$TESTS
export VG_TESTS="$VG_TESTS"
export BRANCH=${BRANCH}
export BNAME=${BNAME}
export RELEASE_TAG=${RELEASE_TAG}
export MAJOR=${MAJOR}
export MINOR=${MINOR}
export RELEASE=${RELEASE}
export VERBOSE=${VERBOSE}
export DISTDIR=${DISTDIR}
EOF
	    ;;
	*) echo "Unknown option";
	   exit 1;
	   ;;
    esac
fi
