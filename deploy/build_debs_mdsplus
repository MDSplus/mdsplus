#!/usr/bin/env python

import subprocess,os,sys,xml.etree.ElementTree as ET,fnmatch,tempfile

def getPackageFiles(buildroot,includes,excludes):
    files=list()
    for f in includes:
        f = buildroot+f
        if os.path.isdir(f):
            for root, dirs, filenams in os.walk(f):
                for filenam in filenams:
                    files.append(os.path.join(root,filenam))
        elif ('?' in f) or ('*' in f):
            dirnam=f
            while ('?' in dirnam) or ('*' in dirnam):
                dirnam=os.path.dirname(dirnam)
            for root, dirs, filenams in os.walk(dirnam):
                if fnmatch.fnmatch(root,f):
                    files=files+getPackageFiles(buildroot,[root[len(buildroot):],],excludes)
                else:
                    for filenam in filenams:
                        filenam=os.path.join(root,filenam)
                        if fnmatch.fnmatch(filenam,f):
                            files.append(filenam)
        else:
            try:
                os.stat(f)
                files.append(f)
            except:
                pass
    if len(excludes) > 0:
        hasuid=False
        for exclude in excludes:
            if '/xuid' in exclude:
                print "excluding: %s" % exclude
                hasuid=True
        excludefiles=getPackageFiles(buildroot,excludes,[])
        if hasuid:
            print "Found %d" % len(excludefiles)
            for exclude in excludefiles:
                print "excluding: %s" % exclude
        for exclude in excludefiles:
            if exclude in files:
                files.remove(exclude)
    return files

def externalPackage(info, root, package):
    matchlen=0
    ans = None
    for extpackages in root.getiterator('external_packages'):
        platforms=extpackages.attrib['platforms']
        for platform in platforms.split(','):
            if info['dist'].lower().startswith(platform):
                if len(platform) > matchlen:
                    matchlen = len(platform)
                    pkg = extpackages.find(package)
                    if pkg is not None:
                        if 'package' in pkg.attrib:
                            ans = pkg.attrib['package']
                        else:
                            ans = package
    return ans

def doRequire(info, out, root, require):
    if 'external' in require.attrib:
        pkg=externalPackage(info,root,require.attrib['package'])
        if pkg is not None:
            os.write(out,"Requires: %s\n" % pkg)
    else:
        info['reqpkg']=require.attrib['package']
    os.write(out,"Requires: mdsplus%(BNAME)s-%(reqpkg)s = %(major)d.%(minor)d-%(release)d.%(dist)s\n" % info)

def buildDebs():
    info=dict()
    info['BRANCH']=os.environ['BRANCH']
    info['flavor']=info['BRANCH']
    info['major']=int(os.environ['MAJOR'])
    info['minor']=int(os.environ['MINOR'])
    info['release']=int(os.environ['RELEASE'])
    info['dist']=os.environ['DIST']
    info['arch']=os.environ['ARCH']
    if info['BRANCH']=="stable":
        info['BNAME']=""
    else:
        info['BNAME']="-%s" % info['BRANCH']
    info['rflavor']=info['BNAME']
    tree=ET.parse('deploy/packaging.xml')
    root=tree.getroot()
    debs=list()
    for package in root.getiterator('package'):
        pkg = package.attrib['name']
        if pkg=='MDSplus':
            info['packagename']=""
        else:
            info['packagename']="-%s" % pkg
        info['description']=package.attrib['description']
        info['tmpdir']=tempfile.mkdtemp()
        try:
            os.mkdir("%(tmpdir)s/DEBIAN" % info)
            includes=list()
            for inc in package.getiterator('include'):
                for inctype in inc.attrib:
                    include=inc.attrib[inctype]
                    if inctype != "dironly":
                        includes.append(include)
            excludes=list()
            for exc in package.getiterator('exclude'):
                for exctype in exc.attrib:
                    excludes.append(exc.attrib[exctype])
            if package.find("exclude_staticlibs") is not None:
                excludes.append("/usr/local/mdsplus/lib/*.a")
            if package.find("include_staticlibs") is not None:
                includes.append("/usr/local/mdsplus/lib/*.a")
            files=getPackageFiles("/buildroot/",includes,excludes)
            for f in files:
                info['file']=f[len("/buildroot/")-1:].replace(' ','\\ ').replace('$','\\$')\
                        .replace('(','\\(').replace(')','\\)')
                if subprocess.Popen("""
set -o verbose
set -e
dn=$(dirname %(file)s)
mkdir -p %(tmpdir)s/DEBIAN
mkdir -p "%(tmpdir)s/${dn}"
cp -av /buildroot/%(file)s "%(tmpdir)s/${dn}/"
""" % info,shell=True).wait() != 0:
                    raise Exception("Error building deb")
                sys.stdout.flush()
            depends=list()
            for require in package.getiterator("requires"):
                if 'external' in require.attrib:
                    pkg=externalPackage(info,root,require.attrib['package'])
                    if pkg is not None:
                        depends.append(pkg)
                else:
                    depends.append("mdsplus%s-%s" % (info['rflavor'],require.attrib['package'].replace('_','-')))
            if len(depends)==0:
                info['depends']=''
            else:
                info['depends']="\nDepends: %s" % ','.join(depends)
            info['name']=info['packagename'].replace('_','-')
            f=open("%(tmpdir)s/DEBIAN/control" % info,"w")
            f.write("""Package: mdsplus%(rflavor)s%(name)s
Version: %(major)d.%(minor)d.%(release)d
Section: admin
Priority: optional
Architecture: %(arch)s%(depends)s
Maintainer: Tom Fredian <twf@www.mdsplus.org>
Description: %(description)s
""" % info)
            f.close()
            for s in ("preinst","postinst","prerm","postrm"):
                script=package.find(s)
                if script is not None and ("type" not in script.attrib or script.attrib["type"]!="rpm"):
                    info['script']=s
                    f=open("%(tmpdir)s/DEBIAN/%(script)s" % info,"w")
                    f.write("#!/bin/bash\n")
                    f.write("%s" % (script.text.replace("__INSTALL_PREFIX__","/usr/local")))
                    f.close()
                    os.chmod("%(tmpdir)s/DEBIAN/%(script)s" % info,0775)
            info['debfile']="/tmp/%(flavor)s/DEBS/%(arch)s/mdsplus%(rflavor)s%(packagename)s_%(major)d.%(minor)d.%(release)d_%(arch)s.deb" % info
            if subprocess.Popen("""
set -o verbose
set -e
mkdir -p /tmp/%(flavor)s/DEBS/%(arch)s
cat %(tmpdir)s/DEBIAN/control
dpkg-deb --build %(tmpdir)s %(debfile)s
reprepro -V --waitforlock 20 -b /tmp/repo -C %(flavor)s includedeb MDSplus %(debfile)s
""" % info,shell=True).wait() != 0:
                raise Exception("Problem building package or repository")
            sys.stdout.flush()
            subprocess.Popen("rm -Rf %(tmpdir)s" % info,shell=True).wait()
            debs.append({"deb":info["debfile"],"arch":info["arch"]})
        except:
            subprocess.Popen("rm -Rf %(tmpdir)s" % info,shell=True).wait()
            raise
    if subprocess.Popen("""

set -o verbose
set -e
mkdir -p /installer/repo/conf
cp -f /tmp/repo/conf/distributions /installer/repo/conf/
mkdir -p /installer/repo/db
mkdir -p /installer/repo/dists
mkdir -p /installer/repo/pool
mkdir -p /installer/%(flavor)s/DEBS/amd64
mkdir -p /installer/%(flavor)s/DEBS/i386
mkdir -p /installer/%(flavor)s/DEBS/noarch

""" % info,shell=True).wait() != 0:
        raise Exception("Problem copying repo info")
    for debfile in debs:
        info["debfile"]=debfile["deb"]
        info["arch"]=debfile["arch"]
        info["ndebfile"]=info["debfile"].replace("/tmp","/installer")
        if subprocess.Popen("""

set -o verbose
set -e
cp %(debfile)s %(ndebfile)s
reprepro -V --waitforlock 20 -b /installer/repo -C %(flavor)s includedeb MDSplus %(ndebfile)s

""" % info,shell=True).wait() != 0:
                raise Exception("Error loading %(debfile)s into repository" % info)
        sys.stdout.flush()
    print("Completed deployment")
    sys.stdout.flush()

buildDebs()
