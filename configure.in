dnl Process this file with autoconf to produce a configure script.
dnl @(#)$RCSfile$ $Revision$
AC_PREREQ([2.63])
AC_INIT([MDSplus], [6.0a], [mdsplus@lists.psfc.mit.edu])
AC_CONFIG_AUX_DIR([conf])

AC_CANONICAL_TARGET
AC_CANONICAL_HOST


AM_INIT_AUTOMAKE([1.13.1 foreign subdir-objects])
AM_MAINTAINER_MODE

#AC_CONFIG_HEADER(include/config.h)
#AC_CANONICAL_TARGET
#AC_CANONICAL_HOST
AC_CHECK_SIZEOF(int *)
AC_SYS_LARGEFILE
AC_CHECK_LIB(socket,socket,SOCKETLIB="-l socket",SOCKELIB="")
AC_CHECK_LIB(nsl,inet_addr,NSLLIB="-l nsl",NSLLIB="")
dnl See if we need to use native compilers
AS_CASE(["$host"],
        [alpha-dec-osf*], [${CC=cc}; ${F77=f77}],
        [sparc-sun-solaris2*], [${CC=cc}])


JAVACFLAGS="-encoding UTF-8"
FOR_LINKSHARED=""

dnl Check out the compiler
AC_PROG_CC
AC_PROG_CXX
AS_VAR_SET_IF([NOF77], [], [AC_PROG_F77([gfortran g77 f90 f95])])

AC_MSG_CHECKING([whether to build shared libraries])
AC_ARG_ENABLE([shared],
              [AS_HELP_STRING([--disable-shared],
                              [Prevent building shared libraries])],
              [],
              [enable_shared=yes])

LINKWHOLEON=
LINKWHOLEOFF=
AS_CASE([$enable_shared],
        [yes], [AS_CASE([$host],
                        [*apple*], [LINKWHOLEON=-Wl,-force_load],
                        [*linux*], [LINKWHOLEON=-Wl,--whole-archive;LINKWHOLEOFF=-Wl,--no-whole-archive])])
AC_SUBST([LINKWHOLE])
AC_MSG_RESULT([$enable_shared])


dnl See if the linker supports -rpath-link
AC_MSG_CHECKING([whether the linker supports -rpath-link])
AS_VAR_SET_IF([LDFLAGS], [AS_VAR_SET([save_LDFLAGS], ["$LDFLAGS"])])
AS_VAR_SET([LDFLAGS], [-Wl,-rpath-link=dummy])
AC_LINK_IFELSE([AC_LANG_PROGRAM([], [])],
               [AS_VAR_SET([RPATHLINK], [-Wl,-rpath-link])])
AM_CONDITIONAL([RPATHLINK], [AS_VAR_TEST_SET([RPATHLINK])])
AC_SUBST([RPATHLINK])
AS_UNSET([LDFLAGS])
AS_VAR_SET_IF([save_LDFLAGS], [AS_VAR_SET([LDFLAGS], ["$save_LDFLAGS"])])
AS_UNSET([save_LDFLAGS])
AM_COND_IF([RPATHLINK], [AC_MSG_RESULT([yes])], [AC_MSG_RESULT([no])])

AC_MSG_CHECKING([whether to enable statistics])
AC_ARG_ENABLE([perf],
              [AS_HELP_STRING([--enable-perf],
                              [enable MDSplus I/O statistics])],
              [],
              [AS_VAR_SET([enable_perf], [no])])
AS_CASE([$enable_perf],
        [yes], [AC_DEFINE([USE_PERF], [], [Define if you want to collect performance statistics -- linux only])])
AC_MSG_RESULT([$enable_perf])

AC_MSG_CHECKING([whether to build the java components])
AC_ARG_ENABLE([java],
              [AS_HELP_STRING([--disable-java],
                              [Do not build java libraries and applications])],
              [],
              [AS_VAR_SET([enable_java], [yes])])


dnl ////////////////////////////////////////////////////////////////////////////
dnl ///  TEST TOOLS  ///////////////////////////////////////////////////////////
dnl ////////////////////////////////////////////////////////////////////////////

PKG_CHECK_MODULES([CHECK], [check], [have_check=yes], [have_check=no])
AM_CONDITIONAL(HAVE_CHECK, test x"$have_check" = "xyes")

AC_ARG_ENABLE([valgrind],
              [AS_HELP_STRING([--enable-valgrind],
                              [Use valgrind when running unit tests])],
              [AS_VAR_SET([use_valgrind], [yes])],
              [])

if [[ "$use_valgrind" = "yes" ]]; then
 AC_CHECK_PROG(HAVE_VALGRIND, valgrind, yes, no)
 if [[ "$HAVE_VALGRIND" = "no" ]]; then
  AC_MSG_ERROR([Valgrind not found in PATH. ])
 fi
fi
AM_CONDITIONAL(USE_VALGRIND, test x"$use_valgrind" = "xyes")


dnl AC_ARG_ENABLE([universal],
dnl              [AS_HELP_STRING([--enable-universal],
dnl                              [Build MacOSX Universal Binary])],
dnl              [],
dnl              [AS_VAR_SET([enable_universal], [no])])
dnl
dnl this new java section hoses macos x... why not use the autoconf java macros?
dnl I'm faking a disable so I can enable by hand later...
dnl AS_CASE([$host_vendor],
dnl        [apple], dnl the java section breaks with macos x due to different structure
dnl                 dnl this disables it for now..  is there a AC_PROG_JAVA?
dnl                 [AS_VAR_SET([enable_java], [no])]
dnl                 [AS_VAR_IF([enable_universal], [yes], [CFLAGS="-O2 -g -isysroot /Developer/SDKs/MacOSX10.4u.sdk -arch i386 -arch ppc"]
dnl                                                       [LDFLAGS="-Wl,-syslibroot,/Developer/SDKs/MacOSX10.4u.sdk -arch i386 -arch ppc"]
dnl                                                       [F77=fort77])])
dnl AC_MSG_RESULT([$enable_java])

AC_ARG_WITH([jdk],
            [AS_HELP_STRING([--with-jdk=JDKDIR],
                            [specify location of java jdk])],
            [],
            [AS_VAR_SET_IF([JDK_DIR],
                           [AS_VAR_SET([with_jdk], [$JDK_DIR])],
                           [AS_VAR_SET([with_jdk], [/etc/alternatives/java_sdk])])])

AC_ARG_WITH([visual_studio],
            [AS_HELP_STRING([--with-visual-studio],
                            [directory tree containing visual studio compiler, includes and libs])],
            [],
            [AS_VAR_SET_IF([VS_DIR],
                           [AS_VAR_SET([with_visual_studio], [$VS_DIR])],
                           [])])
VS_DIR=$with_visual_studio

AM_CONDITIONAL([VS],[AS_VAR_TEST_SET([with_visual_studio])])

AC_ARG_WITH([python_include],
            [AS_HELP_STRING([--with-python_include=python-include-directory],
                            [specify location of Python.h])],
            [],
            [AS_VAR_SET_IF([PYTHON_INCLUDE_DIR],
                           [AS_VAR_SET([with_python_include], [$PYTHON_INCLUDE_DIR])],
                           [])])
PYTHON_INCLUDE_DIR=$with_python_include
OLD_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="-I $PYTHON_INCLUDE_DIR"
AC_CHECK_HEADER(Python.h,,PYTHON_INCLUDE_DIR="")
CPPFLAGS="$OLD_CPPFLAGS"

AC_ARG_WITH([java_target],
	    [AS_HELP_STRING([--with-java_target=version],
                            [specify version of compiled classes (i.e. 6)])],
            [JAVACFLAGS="$JAVACFLAGS -source $withval -target $withval"])

AC_ARG_WITH([java_bootclasspath],
	    [AS_HELP_STRING([--with-java_bootclasspath=bootclasspath],
                            [specify the bootclasspath option for use with --with-java_target (i.e. /usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0/jre/lib/rt.jar)])],
            [JAVACFLAGS="$JAVACFLAGS -bootclasspath $withval"])

AS_CASE([$enable_java],
        [yes], [AC_MSG_CHECKING([for presence of Java Development Kit])
                AS_IF([test ! -d $with_jdk/jre],
                      [AC_MSG_RESULT([not found])
                       AC_MSG_WARN([YOU NEED TO SPECIFY THE JAVA JDK DIRECTORY OR DISABLE JAVA])
                       AC_MSG_WARN([The jdk directory can be specified by either defining a JDK_DIR environment])
                       AC_MSG_WARN([variable or by using the --with-jdk=DIR option.])
                       AC_MSG_WARN([You can disable java by using the --disable-java option.])
                       AS_EXIT])
                AC_MSG_RESULT([$with_jdk])
                AC_PATH_PROG([JAVAC], [javac], [], [$with_jdk/bin$PATH_SEPARATOR$PATH])
                AC_PATH_PROG([JAR], [jar], [], [$with_jdk/bin$PATH_SEPARATOR$PATH])
                AC_PATH_PROG([RMIC], [rmic], [], [$with_jdk/bin$PATH_SEPARATOR$PATH])])

AM_CONDITIONAL([GLOBUSLICENSE], [test -r $exec_prefix/GLOBUS_LICENSE])

AC_ARG_WITH([gsi],
            [AS_HELP_STRING([--with-gsi=globus-location:flavor],
                            [Use globus gsi for mdsip communications])],
            [],
            [AS_VAR_SET([with_gsi], [no])])
AS_CASE([$with_gsi],
        [no], [AS_VAR_SET([MDSTCPIP], [mdstcpip])],
        [*pthr*], [AC_MSG_WARN([Do NOT INCLUDE pthr in the globus flavor!])
                   AS_EXIT],
        [MDSTCPIP="mdstcpip roam"
         GLOBUS_LOCATION=`echo $withval | awk -F: '{print $1}'`
         GLOBUS_FLAVOR=`echo $withval | awk -F: '{print $2}'`
         AS_VAR_IF([GLOBUS_FLAVOR], [], 
                   [AC_MSG_WARN([YOU NEED TO PROVIDE GLOBUS_LOCATION and FLAVOR when using the --with-gsi option])
                    AC_MSG_WARN([Format:   --with-gsi=globus-install-directory:flavor])
                    AC_MSG_WARN([Example:  --with-gsi=/usr/local/gt3:gcc32dbg])
                    AC_MSG_WARN([])
                    AC_MSG_WARN([Note do not include pthr in the flavor as it is automatically added.])
                    AS_EXIT])])

AC_MSG_CHECKING([for an srb installation])
AC_ARG_WITH([srb],
            [AS_HELP_STRING([--with-srb=srb-install-dir],
                            [Enable srb capabilities])],
            [],
            [AS_VAR_SET([with_srb], [no])])
AS_CASE([$with_srb],
        [no], [],
        [yes], [AC_MSG_WARN([YOU NEED TO PROVIDE THE LOCATION OF THE unixIO subdirectory of your srb installation])
                AC_MSG_WARN([when using the --with-srb option])
                AC_MSG_WARN([])
                AC_MSG_WARN([Format:   --with-srb=srb-install-directory])
                AC_MSG_WARN([Example:  --with-srb=/scratch/slocal/testc/SRB3_2client/unixIO])
                AS_EXIT],
        [SRBLIB="-L${with_srb} -lsrbUio"
         SRBINCLUDE="-I${with_srb}"
         AC_DEFINE(SRB)])
AC_MSG_RESULT([$with_srb])

dnl Look for labview include file
AC_MSG_CHECKING([for labview])
AC_ARG_WITH([labview],
            [AS_HELP_STRING([--with-labview=labview-top-dir],
                            [specify location of labview such as /usr/local/natinst/Labview])],
            [],
            [AS_VAR_SET_IF([LABVIEW_DIR], [with_labview=$LABVIEW_DIR], [with_labview=no])])
AS_CASE([$with_labview],
        [no], [],
        [yes], [AC_MSG_ERROR([Labview location required])],
        [LV_CINTOOLS="$with_labview/cintools"
         LV="mdsobjects/labview"])
AC_MSG_RESULT([$with_labview])

AC_MSG_CHECKING([whether to enable profiled code])
AC_ARG_ENABLE([gcc_profiling],
              [AS_HELP_STRING([--enable-gcc_profiling],
                              [enable gcc profiling])],
              [],
              [with_gcc_profiling=no])
AS_CASE([$with_gcc_profiling],
        [yes], [GCCPROF="-pg"],
        [no], [GCCPROF=""],
        [AC_MSG_ERROR([--enable-gcc_profiling does not take an argument])])
AC_MSG_RESULT([$with_gcc_profiling])

AC_MSG_CHECKING([for idl])
AC_ARG_WITH([idl],
            [AS_HELP_STRING([--with-idl=idl-top-dir],
                            [specify location of idl such as /usr/local/itt/idl])],
            [],
            [with_idl=yes])
AS_CASE([$with_idl],
        [yes], [AS_VAR_SET_IF([IDL_DIR],
                              [with_idl=$IDL_DIR],
                              [AS_IF([test -r /usr/local/itt/idl], [with_idl=/usr/local/itt/idl],
                                     [test -r /usr/local/itt/idl], [with_idl=/usr/local/rsi/idl],
                                     [with_idl=no])])])
AS_CASE([$with_idl],
        [no], [],
        [IDL_INC="-I$with_idl/external"
         IDLMDSEVENT="idlmdsevent"
         IDLMDSWIDGETS="idlmdswidgets"])
AC_MSG_RESULT([$with_idl])

dnl FIXME: Remove this hack
AS_VAR_IF([with_idl], [no], [IDL_DIR=""], [IDL_DIR=$with_idl])


AC_MSG_CHECKING([for mingw])
AS_CASE([$host],
        [*mingw*],[AS_VAR_SET([MINGW])])
AM_CONDITIONAL([MINGW], [AS_VAR_TEST_SET([MINGW])])
AM_COND_IF([MINGW], [AC_MSG_RESULT([yes])], [AC_MSG_RESULT([no])])

FORLD=ld
LD=ld
LD_LDARC=""
LD_LDSHARE=""
IDL_LD=""
LIBPRE="lib"

CFLAGS="$CFLAGS $GCCPROF -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

CPPFLAGS="-I\$(top_srcdir)/include $CPPFLAGS"

if test "$exec_prefix" = "NONE" -a "$prefix" = "NONE"
then
  : ${uiddir:=$ac_default_prefix/uid}
elif test "$exec_prefix" = "NONE"
then
  : ${uiddir:=$prefix/uid}
else
  : ${uiddir:=$exec_prefix/uid}
fi
MAKEUIDDIR="\$(top_srcdir)/uid/"
MAKESHLIBDIR="\$(top_srcdir)/lib/"
MAKEBINDIR="\$(top_srcdir)/bin/"
MAKELIBDIR="\$(top_srcdir)/lib/"
EXPORTS_FILE=""
JDK_LIVECONNECT="$with_jdk/jre/lib/plugin.jar"
TAR_EXCLUDE="-e"
HUP_TO_XINETD=""
HUP_TO_INETD=""
UILCMD="uil"
FOR_LDFLAGS=""
MINGW="no"
SHARETYPE=".so"

THREAD="-pthread"
AC_SUBST([THREAD])
ICONS=""
MITDEVICESIO_TARGETS=""
case "$host" in
mips*) CFLAGS="$CFLAGS -signed -D_BSD_SIGNALS -KPIC";
       FFLAGS="$FFLAGS -D_BSD_SIGNALS -KPIC";
       LDSHARE="-B dynamic";
       LDARC="-B static";
       LD_LDSHARE="-B dynamic";
       LD_LDARC="-B static";
       LINKSHARED="-shared ";
       FOR_LINKSHARED="$LINKSHARED";
       FOR_LDFLAGS="";
       LIBPATH="LD_LIBRARY_PATH";
       FEXECLIBDIR="-L";
       HUP_TO_INETD="kill -HUP \`ps -e | grep inetd | grep -v grep | awk '{print $1}'\`";
       ;;
*-solaris2*)  
       if test $CC = gcc; then
	 LD=gcc;
	 FORLD=gcc;
         LINKSHARED="-shared ";
         FOR_LINKSHARED="$LINKSHARED"
         LD_LDSHARE="-Wl,-B,dynamic";
         LD_LDARC="-Wl,-B,static";
         LDSHARE="-Wl,-B,dynamic";
         LDARC="-Wl,-B,static";
         CFLAGS="$CFLAGS -fPIC -D_POSIX_PTHREAD_SEMANTICS";
         LDFLAGS="$CFLAGS";
       else 
         LINKSHARED="-G ";
         FOR_LINKSHARED="$LINKSHARED";
         LD_LDARC="-B static ";
         LD_LDSHARE="-B dynamic ";
         LDSHARE="-B dynamic";
         LDARC="-B static";
         if test -n "`echo 'int main(){return 0;}' | cc -o /dev/null -E -c -Kpic - 2>&1`"; then
           LDSHARE="-Wl,-B,dynamic";
           LDARC="-Wl,-B,static";
         else
           CFLAGS="$CFLAGS -Kpic";
         fi;
       fi;
       if test "$F77" = "gfortran"
       then
         FFLAGS="$FFLAGS -fPIC -fno-range-check"
       else
         FFLAGS="$FFLAGS -PIC";
       fi
       IDL_LD="-L${IDL_DIR}/bin/bin.solaris2.sparc -lidl"
       LIBPATH="LD_LIBRARY_PATH";
       FEXECLIBDIR="-L";
       jni_inc_dir="${JDK_DIR}/include";
       jni_md_inc_dir="${JDK_DIR}/include/solaris";
       HUP_TO_INETD="kill -HUP \`ps -e -o pid -o command | grep /usr/sbin/inetd | grep -v grep | awk '{print $1}'\`";;
*mingw*)
       AC_PROG_F77
       ICONS=icons
       IDLMDSEVENT=""
       MINGW="yes"
       LIBPRE=""
       SOCKETLIB="-lws2_32"
       CFLAGS="$CFLAGS -fno-strict-aliasing -mno-ms-bitfields";
       LD="$CXX -static-libgcc"
       FFLAGS="$FFLAGS -fno-range-check"
       FORLD="$F77"
       if ( echo $host | grep i686 > /dev/null )
       then
         SQL_ARCH=32
         BINDIR=bin_x86
         VS_ARCH=x86
	 IDL_LIB="-L/mnt/scratch/mdsplus/idl-mingw-libs -lidl64"
	 WINDRES=/usr/bin/i686-w64-mingw32-windres
       else
         SQL_ARCH=64
         BINDIR=bin_x86_64
         VS_ARCH=x64
	 IDL_LIB="-L/mnt/scratch/mdsplus/idl-mingw-libs -lidl32"
	 WINDRES=/usr/bin/x86_64-w64-mingw32-windres
       fi
       MAKELIBDIR="\$(top_srcdir)/$BINDIR/"
       MAKESHLIBDIR="\$(top_srcdir)/$BINDIR/"
       MAKEBINDIR="\$(top_srcdir)/$BINDIR/"
       FFLAGS="$FFLAGS -fno-backslash";
       LDSHARE="-Wl,-Bdynamic ";
       LDARC="-Wl,-Bstatic ";
       LD_LDSHARE="-Bdynamic ";
       LD_LDARC="-Bstatic ";
       LINKSHARED="-shared ";
       FOR_LINKSHARED="$LINKSHARED";
       LIBPATH="LD_LIBRARY_PATH";
       FOR_LDFLAGS="";
       FEXECLIBDIR="-L";
       SHARETYPE=".dll"
       jni_inc_dir="$with_jdk/include";
       jni_md_inc_dir="$with_jdk/include/linux";;

*86*linux*)
       CFLAGS="$CFLAGS -fpic -shared-libgcc -fsigned-char -fno-strict-aliasing";
       FORLD="$F77";
       LD="gcc"
       if ( uname -m | grep 64 > /dev/null ) 
       then
         if ( echo $host| grep 64 > /dev/null )
         then
           if [[ -d /usr/lib64 ]]
           then
             D64="64"
           else
             D64=""
           fi
           SYB64=$D64
           TARGET_ARCH="-m64"
           UILCMD=uil
           uiddir="${uiddir}${D64}"
	   MAKELIBDIR="\$(top_srcdir)/lib${D64}/"
           MAKESHLIBDIR="\$(top_srcdir)/lib${D64}/"
           MAKEUIDDIR="\$(top_srcdir)/uid${D64}/"
	   MAKEBINDIR="\$(top_srcdir)/bin${D64}/"
         else
           TARGET_ARCH="-m32"
           UILCMD=uil32
           uiddir="${uiddir}32"
           MAKELIBDIR="\$(top_srcdir)/lib32/"
           MAKESHLIBDIR="\$(top_srcdir)/lib32/"
           MAKEUIDDIR="\$(top_srcdir)/uid32/"
           MAKEBINDIR="\$(top_srcdir)/bin32/"
         fi
       fi
       FFLAGS="$FFLAGS -fno-range-check"
       FOR_LDFLAGS="-lg2c"
       FFLAGS="$FFLAGS -fpic -fno-backslash";
       LDSHARE="-Wl,-Bdynamic ";
       LDARC="-Wl,-Bstatic ";
       LD_LDSHARE="-Bdynamic ";
       LD_LDARC="-Bstatic ";
       LINKSHARED="-shared ";
       FOR_LINKSHARED="$LINKSHARED";
       LIBPATH="LD_LIBRARY_PATH";
       FOR_LDFLAGS="";
       FEXECLIBDIR="-L";
       TAR_EXCLUDE="--exclude";
       MITDEVICESIO_TARGETS="${MAKESHLIBDIR}libMitDevicesIO${SHARETYPE} ${MAKELIBDIR}libMitDevicesIO.a ${MAKEBINDIR}daq_server"; 
       jni_inc_dir="$with_jdk/include";
       jni_md_inc_dir="$with_jdk/include/linux";
       HUP_TO_XINETD="/etc/rc.d/init.d/xinetd restart";
       HUP_TO_INETD="kill -HUP \`/sbin/pidof inetd\`";
       ;;
*arm-xilinx-linux-gnueabi) echo "configuring for Xylinx zynq board (arm cortex a9)";
       CC=arm-xilinx-linux-gnueabi-gcc;
       LD=arm-xilinx-linux-gnueabi-ld;
       AR=arm-xilinx-linux-gnueabi-ar;
       RANLIB=arm-xilinx-linux-gnueabi-ranlib;
       SIZEOF_LONG=4;
       SIZEOF_LONG_LONG=8;
       D64="";
       CFLAGS="$CFLAGS -fpic -shared-libgcc -fsigned-char -fno-strict-aliasing";
       if (test "$F77" = "g77"); then
         FFLAGS="$FFLAGS -Wno-globals"
         FOR_LDFLAGS="-lg2c"
         FORLD="$F77"
       elif (test "$F77" = "gfortran"); then
         FFLAGS="$FFLAGS -fno-range-check";
         FORLD="$F77"
         FOR_LDFLAGS="-lg2c"
       elif (($F77 --version | grep 'GNU Fortran') >/dev/null 2>&1); then
         FFLAGS="$FFLAGS -fno-range-check"
         FORLD="$F77"
         FOR_LDFLAGS="-lg2c"
       fi
       FFLAGS="$FFLAGS -fpic -fno-backslash";
       LDSHARE="-Wl,-Bdynamic ";
       LDARC="-Wl,-Bstatic ";
       LD_LDSHARE="-Bdynamic ";
       LD_LDARC="-Bstatic ";
       LINKSHARED="-shared ";
       FOR_LINKSHARED="$LINKSHARED";
       LIBPATH="LD_LIBRARY_PATH";
       FOR_LDFLAGS="";
       FEXECLIBDIR="-L";
       TAR_EXCLUDE="--exclude";
       jni_inc_dir="$with_jdk/include";
       jni_md_inc_dir="$with_jdk/include/linux";
       HUP_TO_XINETD="/etc/rc.d/init.d/xinetd restart";
       HUP_TO_INETD="kill -HUP \`/sbin/pidof inetd\`";;
*linux*) CFLAGS="$CFLAGS -fpic -fsigned-char -shared-libgcc -fno-strict-aliasing";
       FFLAGS="$FFLAGS -fno-range-check";
       FORLD="$F77"
       FOR_LDFLAGS="-lg2c"
       FFLAGS="$FFLAGS -fpic -fno-backslash";
       LDSHARE="-Wl,-Bdynamic ";
       LDARC="-Wl,-Bstatic ";
       LD_LDSHARE="-Bdynamic ";
       LD_LDARC="-Bstatic ";
       LINKSHARED="-shared ";
       FOR_LINKSHARED="$LINKSHARED";
       LIBPATH="LD_LIBRARY_PATH";
       FOR_LDFLAGS="";
       FEXECLIBDIR="-L";
       TAR_EXCLUDE="--exclude";
       jni_inc_dir="$with_jdk/include";
       jni_md_inc_dir="$with_jdk/include/linux";
       HUP_TO_XINETD="/etc/rc.d/init.d/xinetd restart";
       HUP_TO_INETD="kill -HUP \`/sbin/pidof inetd\`";;
*apple-darwin*) echo "Configuring for MacOS X";
       MACOSX="macosx"
       CFLAGS="$CFLAGS -arch x86_64 -arch i386 -dynamic";
       if (test "$F77" = "f77"); then 
          FFLAGS="$FFLAGS -w -f -V -W"
		  FORLD="$F77"
       elif (test "$F77" = "g77"); then
          FFLAGS="$FFLAGS -fno-backslash -Wno-globals";
          FOR_LDFLAGS="-lg2c"; 
		  FORLD="$F77"
       elif (test "$F77" = "fort77"); then
          FFLAGS="$FFLAGS -!bs -Wf,-!it";
          FOR_LDFLAGS="-L/usr/local/lib/ -lf2c";
		  FORLD="$CC"
       elif (test "$F77" = "gfortran"); then
          FFLAGS="$FFLAGS -fno-range-check"
          FORLD="gfortran"
          FOR_LDFLAGS="-shared"
       fi;
       FEXECLIBDIR="-L";
       LD="$CC"
       LDSHARE="";
       LD_LDSHARE="";
       LDARC="";
       LD_LDARC="";
       UILPATH=/usr/OpenMotif/bin;
       MOTIF_LDARC="-Wl,-bind_at_load -multiply_defined suppress -L/usr/OpenMotif/lib"
       MOTIF_LD_LDARC="-multiply_defined suppress -L/usr/OpenMotif/lib"
       dnl LINKSHARED="$LDFLAGS -dynamiclib -install_name $libdir/\$(@F) -headerpad_max_install_names -prebind \
	   dnl -seg_addr_table_filename \$(@F) -seg_addr_table ../macosx/bindtable -Wl,-single_module";
	   LINKSHARED="$LDFLAGS -shared -arch i386 -arch x86_64";
           FOR_LINKSHARED="$LDFLAGS -shared";
	   LINKMODULE="$LDFLAGS -bundle -undefined dynamic_lookup";
       IDL_LD="";
       LINKJNI="$LINKSHARED";
       SHARETYPE=".dylib";
       SHARETYPEJNI=".dylib";
       SHARETYPEMOD=".dylib";
       TAR_EXCLUDE="--exclude";
       JDK_DIR=/Library/Java/Home
       jni_inc_dir="/System/Library/Frameworks/JavaVM.framework/Versions/Current/Headers";
       jni_md_inc_dir="$jni_inc_dir";
       JDK_LIVECONNECT="$JDK_DIR/lib/plugin.jar"
       java_enable="yes"
       LIBPATH="DYLD_LIBRARY_PATH"
       dnl HDF5_LIBS="-lz -lsz";
       dnl HDF5_DIR="/usr/local";
       X_EXTRA_LIBS="-lXmu";;
*aix*) CFLAGS="$CFLAGS -fpic -fno-strict-aliasing";
       FFLAGS="$FFLAGS -qpic -qnoescape";
       LDSHARE="";
       LDARC="";
       FOR_LDFLAGS="-lxlf90";
       LINKSHARED="-bnoentry -bM:SRE -bE:\$(EXPORTS)";
       FOR_LINKSHARED="$LINKSHARED";
       LIBPATH="LIBPATH";
       MAKESHLIBDIR="\$(top_srcdir)/shlib/";
       EXPORTS_FILE="\$(EXPORTS)";
       FEXECLIBDIR="-L";
       SHARETYPE=".a";
       HUP_TO_INETD="kill -HUP \`ps -e | grep inetd | grep -v grep | awk '{print $1}'\`";;
*qnx*) CFLAGS="$CFLAGS -fpic";
       LDSHARE="-Wl,-Bdynamic ";
       LDARC="-Wl,-Bstatic ";
       LD_LDSHARE="-Bdynamic ";
       LD_LDARC="-Bstatic ";
       LINKSHARED="-shared ";
       FOR_LINKSHARED="$LINKSHARED";
       LIBPATH="LD_LIBRARY_PATH";
       FOR_LDFLAGS="";
       FEXECLIBDIR="-L";
       ;;
esac

dnl see if we have libdc1394 libraries and what version
AC_CHECK_LIB(dc1394,dc1394_new ,dc1394_v2=yes)
AC_CHECK_LIB(dc1394,dc1394_get_camera_info ,dc1394_v1=yes)
AC_CHECK_LIB(raw1394,raw1394_get_libversion ,raw1394=yes)
if test "$dc1394_v2" = "yes" -a "$raw1394"="yes"; then
  DC1394_SUPPORT2="${MAKESHLIBDIR}libdc1394_support2$SHARETYPE"
else
  DC1394_SUPPORT2=""
fi
if test "$dc1394_v1" = "yes" -a "$raw1394"="yes"; then
  DC1394_SUPPORT="${MAKESHLIBDIR}libdc1394_support$SHARETYPE"
else
  DC1394_SUPPORT=""
fi

AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(_int64)


dnl Checks for programs.
AC_PROG_RANLIB
AC_PROG_MKDIR_P
AC_PROG_INSTALL
AC_PROG_SED

#FIXME: Remove this when Makefile.inc goes away
AS_CASE(["$MKDIR_P"],
        [*install-sh*], [MKDIR_P="\$(top_srcdir)/$MKDIR_P"])

dnl Define build directories

# Stuff that only non-automake dirs need
AC_SUBST([MAKEETCDIR], ["\$(top_srcdir)/etc/"])

dnl Check for 0xnnnnll (long long constants)
AC_LANG_SAVE
AC_LANG_C
AC_TRY_COMPILE(,int gub(){return((int)0x1ll);},AC_DEFINE(HAVE_LL_CONSTANTS))
AC_LANG_RESTORE

AC_MSG_CHECKING(if JNI libraries are different)
if test "$LINKJNI" 
then
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
	SHARETYPEJNI="$SHARETYPE"
        LINKJNI="$LINKSHARED"
fi

AC_MSG_CHECKING(if IDL plugins are different)
if test "$LINKMODULE" 
then
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
	SHARETYPEMOD="$SHARETYPE"
        LINKMODULE="$LINKSHARED"
fi


dnl Checks for libraries.

AC_CHECK_LIB([m], [pow], [LIBM="-lm"], [LIBM=""])
AC_CHECK_LIB(resolv,__dn_skipname,LIBRESOLV="-lresolv",LIBRESOLV="")
AC_CHECK_LIB(dl,dlopen,LIBDL="-ldl",LIBDL="")
AC_CHECK_LIB(c,gethostbyname,LIBNSL="",AC_CHECK_LIB(socket,gethostbyname,LIBNSL="-lsocket",AC_CHECK_LIB(nsl,gethostbyname,LIBNSL="-lnsl",LIBNSL="")))
AC_CHECK_LIB(c,socket,LIBSOCKET="",AC_CHECK_LIB(socket,socket,LIBSOCKET="-lsocket",LIBSOCKET=""))
AC_CHECK_LIB(c,getgrgid,AC_DEFINE(HAVE_GETGRGID))
AC_CHECK_LIB(c,getpwuid,AC_DEFINE(HAVE_GETPWUID))
AC_CHECK_LIB(dnet_stub,gethostbyname,DNET_STUB="-ldnet_stub",DNET_STUB="")
OLDLIBS="$LIBS"
AC_SEARCH_LIBS([clock_gettime],[rt],,,)
LIBS="$OLDLIBS"
CLOCK_GETTIME_LIB=""
if test "$ac_cv_search_clock_gettime" != "no"
then
  if test "$ac_cv_search_clock_gettime" != "none required"
  then
    CLOCK_GETTIME_LIB="$ac_cv_search_clock_gettime"
  fi
  AC_DEFINE(HAVE_CLOCK_GETTIME)
fi




AC_CHECK_LIB(c,gettimeofday,AC_DEFINE(HAVE_GETTIMEOFDAY))
AC_CHECK_LIB(c,getaddrinfo,AC_DEFINE(HAVE_GETADDRINFO))
AC_CHECK_LIB(c,strsep,AC_DEFINE(HAVE_STRSEP))
AC_CHECK_LIB(c,getrusage,AC_DEFINE(HAVE_GETRUSAGE))
AC_ARG_ENABLE(d3d,
	[  --enable-d3d            build d3d ptdata access library ],
	if test "$enableval" = yes; then
          AC_MSG_CHECKING(...D3DLIB_PATH...)
          : ${D3DLIB_PATH:?"You must define D3DLIB_PATH to be the directory containing the libd3 library"}
          if test -r "$D3DLIB_PATH/libd3.a" -o -r "$D3DLIB_PATH/libd3$SHARETYPE"
          then
		 D3D_PACKAGE="\$(D3D_PACKAGE)";
		 D3DLIB="-L$D3DLIB_PATH";
                 AC_MSG_RESULT($D3DLIB)
          else
		 AC_MSG_RESULT(libd3.a or libd3$SHARETYPE not found in $D3DLIB_PATH)
                 exit 0
          fi
        fi)



## ////////////////////////////////////////////////////////////////////////// ##
## //  READLINE  //////////////////////////////////////////////////////////// ##
## ////////////////////////////////////////////////////////////////////////// ##


AC_SEARCH_READLINE([READLINE])
AM_CONDITIONAL(READLINE, test x"$have_readline" = x"yes")

dnl sets for retro compatibility
if test x"$have_readline" = x"yes"; then
  LIBREADLINE="${READLINE_LIBS}"
  TDIC="tdic"

  CPPFLAGS_save="${CPPFLAGS}"
  CPPFLAGS="${READLINE_CPPFLAGS} ${CPPFLAGS}"
  AC_CHECK_HEADERS(readline/readline.h readline/history.h
     ,,AC_MSG_ERROR("libreadline headers was not found"))
  CPPFLAGS=$CPPFLAGS_save
else
  AC_MSG_ERROR(readline library was not found and must be installed.)
fi

dnl //// discontinued implementation ////
dnl LIBS_save="$LIBS"
dnl   AC_SEARCH_LIBS([readline],[readline 'readline -lcurses'])
dnl LIBS="$LIBS_save"
dnl if test "$ac_cv_search_readline" = "no"
dnl then
dnl   AC_MSG_RESULT("libreadline is not available so the build of tdic will be skipped") 
dnl   TDIC=""
dnl   LIBREADLINE=""
dnl else
dnl   LIBREADLINE="$ac_cv_search_readline"
dnl   TDIC="tdic"
dnl fi
dnl AC_SEARCH_LIBS([rl_set_signals],[readline 'readline -lcurses'],AC_DEFINE(HAVE_RL_SET_SIGNALS))
dnl AC_CHECK_HEADERS(readline/readline.h readline/history.h)


## ////////////////////////////////////////////////////////////////////////// ##
## //  LIBXML  ////////////////////////////////////////////////////////////// ##
## ////////////////////////////////////////////////////////////////////////// ##

AM_PATH_XML2('2.0.0', [have_xml=yes], [have_xml=no])
if test "x$have_xml" != "xyes"; then
 AC_MSG_NOTICE([libxml not found using xml2-config, reverting to pkg-config query])
 PKG_CHECK_MODULES([XML], [libxml-2.0], [have_xml=yes], [have_xml=no])
 XML_CPPFLAGS="$XML_CFLAGS"
fi
AC_SUBST(XML_CFLAGS)
AC_SUBST(XML_CPPFLAGS)
AC_SUBST(XML_LIBS)
AM_CONDITIONAL(XML, test x"$have_xml" = x"yes")

if test "x$have_xml" = "xyes"; then
 dnl test also for headers usability required by mdsdcl
 CPPFLAGS_save="$CPPFLAGS"
 CPPFLAGS="$XML_CPPFLAGS $CPPFLAGS"
 AC_CHECK_HEADERS(libxml/tree.h libxml/parser.h libxml/xpath.h libxml/xpathInternals.h
  ,,AC_MSG_ERROR(libxml2 development files was not found and must be installed.))
 CPPFLAGS="$CPPFLAGS_save"
else
 AC_MSG_ERROR(libxml2 was not found and must be installed.)
fi


## ////////////////////////////////////////////////////////////////////////// ##
## //  HEADERS  ///////////////////////////////////////////////////////////// ##
## ////////////////////////////////////////////////////////////////////////// ##

dnl Checks for header files.
AC_CHECK_HEADERS(stdarg.h fcntl.h strings.h sys/ioctl.h syslog.h unistd.h sys/filio.h netdb.h resolv.h sys/types.h linux/types.h drm/drm.h pwd.h grp.h)
AC_CHECK_HEADERS(dlfcn.h dl.h vxWorks.h windows.h sys/resource.h)
AC_CHECK_HEADERS(malloc.h pthread.h alloca.h)




REMCAM="remcam"
MITDEVICES="mitdevices"
AC_CHECK_HEADERS(scsi/sg.h,DO_CAMSHR="yes",DO_CAMSHR="no")
if test "$DO_CAMSHR" = yes
then
  CAMSHR="camshr"
  REMCAMLIB="RemCamShr"
else
  CAMSHR=""
  REMCAMLIB="CamShr"
fi

AC_CHECK_HEADERS([stdint.h])

dnl Check for default hdf5 header and library
HDF5_APS=""
AC_CHECK_HEADERS(hdf5.h,DO_HDF5="yes")
if test "$DO_HDF5" = yes; then
  AC_CHECK_LIB(hdf5,H5Fopen,DO_HDF5="yes",DO_HDF5="no")
  if test "$DO_HDF5" = yes; then
    HDF5_APS="\$(HDF5_APS)"
    HDF5_INCS=""
    HDF5_LIBS=""
  fi

dnl Check for user specified  hdf5 header and library
if test -n "$HDF5_DIR" -a -r "$HDF5_DIR"
then
      HDF5_APS="\$(HDF5_APS)"
      HDF5_INCS="-I$HDF5_DIR/include"
      HDF5_LIBS="$HDF5_LIBS -L$HDF5_DIR/lib"
fi	
fi

dnl Check for jdk files
OLD_CPPFLAGS=$CPPFLAGS
AS_VAR_SET_IF([JNI_INCLUDE_DIR],[jni_inc_dir="$JNI_INCLUDE_DIR"])
AS_VAR_SET_IF([JNI_MD_INCLUDE_DIR],[jni_md_inc_dir="$JNI_MD_INCLUDE_DIR"])
CPPFLAGS="$CPPFLAGS -I$jni_inc_dir -I$jni_md_inc_dir"
AC_CHECK_HEADER(jni.h,JDK_CFLAGS="-I$jni_inc_dir")
AC_CHECK_HEADER(jni_md.h,JDK_CFLAGS="$JDK_CFLAGS -I$jni_md_inc_dir")
AS_VAR_SET_IF([JDK_CFLAGS], [AS_CASE([$enable_java], [yes], [JAVA_APS="\$(JAVA_APS)"])])
CPPFLAGS="$OLD_CPPFLAGS"

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_HEADER_TIME
AC_STRUCT_TM
AC_TYPE_SIGNAL
AC_TYPE_SIZE_T

dnl Check if we are missing <sys/sem.h> but can use <semaphore.h> API instead
AC_MSG_CHECKING([if we should use named semaphores])
AC_TRY_CPP([ #include <sys/sem.h> ] , namedsem=no, namedsem=yes )
if test "$namedsem" = yes; then
AC_TRY_CPP([ #include <semaphore.h> ], 
  [AC_DEFINE(USE_SEMAPHORE_H) namedsem=yes], 
   namedsem=no)
fi
AC_MSG_RESULT([ $namedsem])

dnl Check if we want to try Named Pipes instead of <sys/msg.h> API
AC_CHECK_HEADERS(sys/msg.h,mdsplus_ok=no,mdsplus_ok=yes)
if test "$mdsplus_ok" = yes; then
   AC_CHECK_HEADERS(sys/stat.h, mdsplus_ok=yes, mdsplus_ok=no)
   AC_MSG_CHECKING(if we should use pipes for messaging)
   if test "$mdsplus_ok" = yes; then
        AC_DEFINE(USE_PIPED_MESSAGING)
        AC_MSG_RESULT($mdsplus_ok)
    fi
fi

#AC_CACHE_CHECK([for timezone and daylight externals], mdsplus_cv_have_timezone, 
#    AC_TRY_LINK([#include <time.h>], [long z2 = timezone - daylight*3600;], 
#        mdsplus_cv_have_timezone=yes, mdsplus_cv_have_timezone=no))
#    if test "$mdsplus_cv_have_timezone" = yes; then
#        AC_DEFINE(HAVE_TIMEZONE)
#    else
#        AC_CACHE_CHECK([for tm_gmtoff in struct tm], mdsplus_cv_tm_gmtoff_in_tm,
#            AC_TRY_LINK([#include <time.h>], [struct tm tim; tim.tm_gmtoff = 0;],
#            mdsplus_cv_tm_gmtoff_in_tm=yes,mdsplus_cv_tm_gmtoff_in_tm=no))
#    fi
#    if test "$mdsplus_cv_tm_gmtoff_in_tm" = yes; then
#        AC_DEFINE(USE_TM_GMTOFF)
#    fi
AC_CACHE_CHECK([for tm_gmtoff in struct tm], mdsplus_cv_tm_gmtoff_in_tm,
     AC_TRY_LINK([#include <time.h>], [struct tm tim; tim.tm_gmtoff = 0;],
         mdsplus_cv_tm_gmtoff_in_tm=yes,mdsplus_cv_tm_gmtoff_in_tm=no))
     if test "$mdsplus_cv_tm_gmtoff_in_tm" = yes; then
        AC_DEFINE(USE_TM_GMTOFF)
     fi

AC_MSG_CHECKING(for semun union declaration)
AC_TRY_COMPILE([#include <sys/types.h>
#include <sys/sem.h>],[union semun arg;],
							 mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = no; then
		 AC_DEFINE(NEED_SEMUN)
fi
AC_MSG_RESULT($mdsplus_ok)

AC_MSG_CHECKING(whether we need to type shmat)
AC_TRY_COMPILE([#include <sys/shm.h>],[char *shmat();],
							 mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = yes; then
		 AC_DEFINE(TYPE_SHMAT)
fi
AC_MSG_RESULT($mdsplus_ok)

AC_MSG_CHECKING(for two byte fd in *FILE)
AC_EGREP_HEADER(_fileL,stdio.h,mdsplus_ok=yes,mdsplus_ok=no)
if test $mdsplus_ok = yes; then
		 AC_DEFINE(FILE_PTR_HL)
fi
AC_MSG_RESULT($mdsplus_ok)

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_HEADER_STDC
AC_CHECK_FUNCS(gethostname gettimeofday select socket)
AC_CHECK_FUNC(nis_local_host,mdsplus_ok=yes,mdsplus_ok=no)
AC_CHECK_FUNC(malloc)
AC_CHECK_FUNC(sched_setscheduler)

dnl Check for Sybase
if test "$host_cpu" = "arm" -a "$(echo $host | grep arm-xilinx)" != ""
then
   SYBASE_INC=""
   SYBASE_LIB=""
   SYBASE=""
   AC_MSG_RESULT(no sybase open/client)
elif ( echo $host | grep "mingw" >/dev/null )
then
    SYBASE_INC="-DSYBASE"
    SYBASE_LIB="-L. -lntwdblib${SQL_ARCH}"
    SYBASE="SYBASE"
    AC_MSG_RESULT(using Windows mssql)
elif test "$(echo $SYBASE_LIB | grep '\-L')" = ""
then
    SYBASE_INC=""
    SYBASE_LIB=""
    OLDLIBS="$LIBS"
    AC_SEARCH_LIBS([dbsqlexec],[sybdb],SYBASE_LIB="-lsybdb";SYBASE_INC="-DSYBASE";SYBASE="SYBASE",SYBASE_LIB="",)
    LIBS="$OLDLIBS"
    if test "$SYBASE_LIB" = ""
    then
      AC_MSG_CHECKING(for SYBASE open/client or freetds)
      if test -r "/usr/lib${SYB64}/libsybdb.so"
      then
          SYBASE_INC="-DSYBASE"
          SYBASE_LIB="-lsybdb"
          SYBASE="SYBASE"
          AC_MSG_RESULT(have freetds)
      else
        : ${SYBASE=/usr/local/sybase}
        if test -r "$SYBASE/lib"
	then SYBASE_LIBDIR="$SYBASE/lib"
	elif test -r "$SYBASE/lib${SYB64}"
	then SYBASE_LIBDIR="$SYBASE/lib${SYB64}"
	fi
	if test "$SYBASE_LIBDIR" != ""
	then
	  if test -r "$SYBASE_LIBDIR/libsybdb.a"
	  then
	    SYBASE_LIB="-L$SYBASE_LIBDIR $LD_LDARC -lsybdb $LD_LDSHARE"
	  else
	    SYBASE_LIB="-L$SYBASE_LIBDIR -lsybdb"
	  fi
	  SYBASE_INC="-I$SYBASE/include -DSYBASE"
	  AC_MSG_RESULT(have sybase)
	else
	  SYBASE=""
          AC_MSG_RESULT(no sybase open/client)
	fi
      fi
    fi
else
  SYBASE="SYBASE"
fi
AC_MSG_CHECKING(if mdssql should be built)
if test -n "$SYBASE_INC"
then
        MDSSQL="mdssql"
        AC_MSG_RESULT(have sql so yes.)
        AC_DEFINE(HAVE_SYBASE)
else
        MDSSQL=""
        AC_MSG_RESULT(missing sql so no.)
fi

AC_DEFINE_UNQUOTED(SHARELIB_TYPE,"${SHARETYPE}")
AC_C_BIGENDIAN

AC_PATH_XTRA
AS_CASE([$host],
        [*darwin*|*apple*], [X_CFLAGS+=" -I/usr/OpenMotif/include"
                             X_LIBS+=" -L/usr/OpenMotif/lib"])
AS_CASE([$host],[arm*gnueabihf],[X_CFLAGS=""])
#FIXME: Change the above to AS_VAR_APPEND with a new autoconf version (2.64+?)

if test $UILCMD = uil32
then
  X_LIBS=`echo $X_LIBS | sed s/lib64/lib/`
fi
AC_PATH_PROG(UIL,$UILCMD,$UILCMD,$UILPATH:/usr/bin/X11:$PATH:/usr/dt/bin)
AC_MSG_CHECKING(for uil command)
if ( which $UIL 2>/dev/null )
then
  UIL="env LANG=en_US $UIL"
  MOTIF_APS="\$(MOTIF_APS)"
  AC_MSG_RESULT(have uil so openmotif apps will be built.)
else
  MOTIF_APS=""
  AC_MSG_RESULT(no uil so skipping openmotif apps.openmotif-devel not installed.)
fi
if [[ "$MINGW" = "yes" ]]
then
  MOTIF_APS=""
fi





## ////////////////////////////////////////////////////////////////////////// ##
## //  DOXYGEN  ///////////////////////////////////////////////////////////// ##
## ////////////////////////////////////////////////////////////////////////// ##

## minimum requred doxygen for cute documentation rendering
DOXYGEN_VERSION_REQUIRED="1.8"

## versioning check script for sh usign sort builtin command
## check if $2 is a version higher than $1
function _ver_higher {
        ver=`echo -ne "$1\n$2" |sort -Vr |head -n1`
        if [[ "$2" == "$1" ]]; then return 1
        elif [[ "$2" == "$ver" ]]; then return 0
        else return 1
        fi
}

## checking for doxygen bin in path (see also m4 macro below)
AC_CHECK_PROGS([DOXYGEN], [doxygen])
if test -z "$DOXYGEN";
  then AC_MSG_WARN([Doxygen not found - continuing without Doxygen support])
  AM_CONDITIONAL([HAVE_CUTE_DOXYGEN], [false])
else  
  AM_CONDITIONAL([HAVE_CUTE_DOXYGEN], 
    [_ver_higher $DOXYGEN_VERSION_REQUIRED `$DOXYGEN --version`])
  AM_COND_IF([HAVE_CUTE_DOXYGEN], 
    [ echo "Doxygen version is cute!" ], 
    [ AC_MSG_WARN(["Doxygen version outdated, very limited documentation support"]) ])
fi

## DEFAULT ACTIVE FEATURES 
DX_HTML_FEATURE(ON)
DX_CHM_FEATURE(OFF)
DX_CHI_FEATURE(OFF)
DX_MAN_FEATURE(OFF)
DX_RTF_FEATURE(OFF)
DX_XML_FEATURE(OFF)
DX_PDF_FEATURE(ON)
DX_PS_FEATURE(OFF)

## refers to ax_prog_doxygen.m4 macro expansion 
DX_INIT_DOXYGEN(mdsplus, doxygen.cfg)






XM_LIBS="-lMrm -lXm"
AC_CHECK_LIB(Xext,XextAddDisplay,LIBXEXT="-lXext",LIBXEXT="")
AC_CHECK_LIB(Xp,XpGetDocumentData,LIBXP="-lXp",LIBXP="")

AM_CONDITIONAL([NOT_MINGW], [test "$MINGW" != "yes"])

AC_SUBST(CAMSHR)
AC_SUBST(CLOCK_GETTIME_LIB)
AC_SUBST(D3D_PACKAGE)
AC_SUBST(D3DLIB)
AC_SUBST(D3D_FFLAGS)
AC_SUBST(DNET_STUB)
AC_SUBST(EXPORTS_FILE)
AC_SUBST(FEXECLIBDIR)
AC_SUBST(FORLD)
AC_SUBST(FOR_LDFLAGS)
AC_SUBST(FOR_LINKSHARED)
AC_SUBST(GEN_DEVICE)
AC_SUBST(GLOBUS_CFLAGS)
AC_SUBST(GLOBUS_FLAVOR)
AC_SUBST(GLOBUS_LIBS)
AC_SUBST(GLOBUS_LOCATION)
AC_SUBST(HDF5_INCS)
AC_SUBST(HDF5_LIBS)
AC_SUBST(HDF5_APS)
AC_SUBST(HUP_TO_INETD)
AC_SUBST(HUP_TO_XINETD)
AC_SUBST(ICONS)
AC_SUBST(IDL_INC)
AC_SUBST(IDL_LIB)
AC_SUBST(IDLMDSEVENT)
AC_SUBST(IDLMDSWIDGETS)
AC_SUBST(JAVA_APS)
AC_SUBST(JAVACFLAGS)
AC_SUBST(JDK_CFLAGS)
AC_SUBST(JDK_DIR)
AC_SUBST(JDK_LIVECONNECT)
AC_SUBST(LD)
AC_SUBST(LDSHARE)
AC_SUBST(LDARC)
AC_SUBST(LD_LDSHARE)
AC_SUBST(LD_LDARC)
AC_SUBST(LIBDL)
AC_SUBST(LIBM)
AC_SUBST(LIBNSL)
AC_SUBST(LIBPATH)
AC_SUBST(LIBPRE)
AC_SUBST(LIBREADLINE)
AC_SUBST(LIBRESOLV)
AC_SUBST(LIBSOCKET)
AC_SUBST(LIBXP)
AC_SUBST(LIBXEXT)
AC_SUBST(LINKSHARED)
AC_SUBST(LINKJNI)
AC_SUBST(LINKMODULE)
AC_SUBST(LV)
AC_SUBST(LV_CINTOOLS)
AC_SUBST(MACOSX)
AC_SUBST(MAKEBINDIR)
AC_SUBST(MAKELIBDIR)
AC_SUBST(MAKESHLIBDIR)
AC_SUBST(MAKEUIDDIR)
AC_SUBST(MDSSQL)
AC_SUBST(MDSTCPIP)
AC_SUBST(MINGW)
AC_SUBST(MITDEVICES)
AC_SUBST(MITDEVICESIO_TARGETS)
AC_SUBST(MOTIF_APS)
AC_SUBST(MOTIF_LDSHARE)
AC_SUBST(MOTIF_LDARC)
AC_SUBST(MOTIF_LD_LDSHARE)
AC_SUBST(MOTIF_LD_LDARC)
AC_SUBST(PYTHON_INCLUDE_DIR)
AC_SUBST(NEED_SEMUN)
AC_SUBST(NSLLIB)
AC_SUBST(REMCAM)
AC_SUBST(REMCAMLIB)
AC_SUBST(SHARETYPE)
AC_SUBST(SHARETYPEJNI)
AC_SUBST(SHARETYPEMOD)
AC_SUBST(SOCKETLIB)
AC_SUBST(SRBLIB)
AC_SUBST(SRBINCLUDE)
AC_SUBST(SYBASE_INC)
AC_SUBST(SYBASE_LIB)
AC_SUBST([TARGET_ARCH])
AC_SUBST(TAR_EXCLUDE)
AC_SUBST(TDIC)
AC_SUBST(UIL)
AC_SUBST(XM_LIBS)
AC_SUBST(uiddir)
AC_SUBST(USE_SEMAPHORE_H)
AC_SUBST(USE_PIPED_MESSAGING)
AC_SUBST(USE_TM_GMTOFF)
AC_SUBST(DC1394_SUPPORT)
AC_SUBST(DC1394_SUPPORT2)
AC_SUBST(VS)
AC_SUBST(VS_ARCH)
AC_SUBST(VS_DIR)
AC_SUBST(WINDRES)
AC_CONFIG_HEADER(include/config.h)


AC_OUTPUT(Makefile.inc
          Makefile
          docs/Makefile
          envsyms
          actions/Makefile
          camshr/Makefile
          ccl/Makefile 
          d3dshr/Makefile 
          dwscope/Makefile 
          hdf5/Makefile
          idlmdsevent/Makefile
          idlmdswidgets/Makefile
          javaclient/Makefile
          javadispatcher/Makefile
          javamds/Makefile 
          javascope/Makefile
          javatraverser/Makefile
          javadevices/Makefile
          LabView/Makefile
          manpages/Makefile
          macosx/Makefile
          math/Makefile 
          mdsdcl/Makefile 
          mdslib/Makefile 
          mdslibidl/Makefile 
          mdsobjects/cpp/Makefile
          mdsobjects/cpp/docs/Makefile
          mdsobjects/cpp/testing/Makefile
          mdsobjects/cpp/testing/testutils/Makefile
          mdsobjects/python/docs/Makefile
          mdsobjects/java/Makefile
          mdsobjects/java/docs/Makefile
          mdsobjects/labview/Makefile
          mdsmisc/Makefile
          mdsshr/Makefile 
          mdssql/Makefile
          mdstcpip/Makefile 
          mdstcpip/zlib/Makefile
          mdstcpip/docs/Makefile
          mdstcpip/docs/img/Makefile
          mdsvme/Makefile
          mitdevices/Makefile 
          remcam/Makefile 
          roam/Makefile
          rpm/Makefile
          rpm/envsyms
          rpm/post_install_script
          scripts/Makefile
          servershr/Makefile 
          setevent/Makefile
          tcl/Makefile 
          tdishr/Makefile 
          tdic/Makefile
          tditest/Makefile 
          traverser/Makefile 
          treeshr/Makefile 
          wfevent/Makefile 
          xmdsshr/Makefile
          xtreeshr/Makefile
          icons/Makefile
)

AC_OUTPUT_COMMANDS(make depend)
if test "$JAVA_APS" = ""
then
  AC_MSG_WARN()
  AC_MSG_WARN()
  AC_MSG_WARN(The development environment for Java applications was not found.)
  AC_MSG_WARN(The build of Java applications will be skipped from the build of MDSplus.)
  AC_MSG_WARN(Install a Java SDK and reconfigure to build the Java apps.)
  AC_MSG_WARN()
fi
if test "$LIBREADLINE" = ""
then
  AC_MSG_WARN()
  AC_MSG_WARN()
  AC_MSG_WARN(The libreadline library was not found)
  AC_MSG_WARN(The tdic application will be skipped.)
  AC_MSG_WARN(Install the package containing the readline library (perhaps libreadline-devel) and reconfigure to build the tdic application.)
  AC_MSG_WARN()
  AC_MSG_WARN()
fi
if test "$SYBASE" = ""
then
  AC_MSG_WARN()
  AC_MSG_WARN()
  AC_MSG_WARN(The open sybase software was not found in /usr/local/sybase.)
  AC_MSG_WARN(The sqlserver interface libraries will be skipped.)
  AC_MSG_WARN()
  AC_MSG_WARN()
fi
if test "$MOTIF_APS" = "" -a "$MINGW" = ""
then
  AC_MSG_WARN()
  AC_MSG_WARN()
  AC_MSG_WARN(The openmotif development environment was not found.)
  AC_MSG_WARN(The openmotif based applications and libraries will be skipped.)
  AC_MSG_WARN()
  AC_MSG_WARN()
fi
if test "$IDL_DIR" = ""
then
  AC_MSG_WARN()
  AC_MSG_WARN()
  AC_MSG_WARN(The IDL application directory was not found.)
  AC_MSG_WARN(The libraries used for interfacing IDL with MDSplus will be skipped.)
  AC_MSG_WARN()
  AC_MSG_WARN()
fi
if test "$LV" = ""
then
  AC_MSG_WARN()
  AC_MSG_WARN()
  AC_MSG_WARN("Labview include files were not found.)
  AC_MSG_WARN("The labview MDSobjects will not be built")
  AC_MSG_WARN()
  AC_MSG_WARN()
fi

