# Copyright (C) 2004 Oren Ben-Kiki
# This file is distributed under the same terms as the Automake macro files.

# Generate automatic documentation using Doxygen. Goals and variables values
# are controlled by the various DX_COND_??? conditionals set by autoconf.
#
# The provided goals are:
# doxygen-doc: Generate all doxygen documentation.
# doxygen-run: Run doxygen, which will generate some of the documentation
#              (HTML, CHM, CHI, MAN, RTF, XML) but will not do the post
#              processing required for the rest of it (PS, PDF, and some MAN).
# doxygen-man: Rename some doxygen generated man pages.
# doxygen-ps: Generate doxygen PostScript documentation.
# doxygen-pdf: Generate doxygen PDF documentation.
#
# Note that by default these are not integrated into the automake goals. If
# doxygen is used to generate man pages, you can achieve this integration by
# setting man3_MANS to the list of man pages generated and then adding the
# dependency:
#
#   $(man3_MANS): doxygen-doc
#
# This will cause make to run doxygen and generate all the documentation.
#
# The following variable is intended for use in Makefile.am:
#
# DX_CLEANFILES = everything to clean.
#
# This is usually added to MOSTLYCLEANFILES.

## --------------------------------- ##
## Format-independent Doxygen rules. ##
## --------------------------------- ##

if DX_COND_doc

## ------------------------------- ##
## Rules specific for HTML output. ##
## ------------------------------- ##

if DX_COND_html

DX_CLEAN_HTML = ${DX_DESTDIR}/html

endif DX_COND_html

## ------------------------------ ##
## Rules specific for MAN output. ##
## ------------------------------ ##

if DX_COND_man

DX_CLEAN_MAN = ${DX_DESTDIR}/man

endif DX_COND_man


## ------------------------------ ##
## Rules specific for PDF output. ##
## ------------------------------ ##

if DX_COND_pdf

DX_CLEAN_PDF = ${DX_DESTDIR}/${DX_PACKAGE_NAME}.pdf

DX_PDF_GOAL = doxygen-pdf

doxygen-pdf: doxygen-run ${DX_DESTDIR}/${DX_PACKAGE_NAME}.pdf

${DX_DESTDIR}/${DX_PACKAGE_NAME}.pdf: ${DX_DESTTAG}
	cd ${DX_DESTDIR}/latex; \
	rm -f *.aux *.toc *.idx *.ind *.ilg *.log *.out; \
	$(DX_PDFLATEX) refman.tex; \
	$(DX_MAKEINDEX) refman.idx; \
	$(DX_PDFLATEX) refman.tex; \
	countdown=5; \
	while $(DX_EGREP) 'Rerun (LaTeX|to get cross-references right)' \
	                  refman.log > /dev/null 2>&1 \
	   && test $$countdown -gt 0; do \
	    $(DX_PDFLATEX) refman.tex; \
	    countdown=`expr $$countdown - 1`; \
	done; \
	mv refman.pdf ../${DX_PACKAGE_NAME}.pdf

endif DX_COND_pdf

## ------------------------------------------------- ##
## Rules specific for LaTeX (shared for PS and PDF). ##
## ------------------------------------------------- ##

if DX_COND_latex

DX_CLEAN_LATEX = ${DX_DESTDIR}/latex

endif DX_COND_latex


## ------------------------------------------ ##
## GENERAL ENV To be passed into config file  ##
## ------------------------------------------ ##



DX_INSTALLDIR  = $(abs_top_builddir)
DX_DESTDIR     = ${DX_INSTALLDIR}/${DX_DOCDIR}
DX_TAGDIR      = ${DX_INSTALLDIR}/docs/dtags
DX_DESTTAG     = ${DX_TAGDIR}/${DX_PACKAGE_NAME}.tag
DX_SEARCHFILE  = ${DX_TAGDIR}/${DX_PACKAGE_NAME}.xml
DX_LAYOUT     ?= ${top_srcdir}/docs/config/general_layout.xml
DX_LOGO       ?= ${top_srcdir}/docs/config/style/logo.jpg
DX_IMAGE_PATH ?= img
DX_PARENT_TAG  = docs.tag

if HAVE_CUTE_DOXYGEN
 DX_HTML_HEADER     = ${top_srcdir}/docs/config/style/header.html
 DX_HTML_FOOTER     = ${top_srcdir}/docs/config/style/footer.html
 DX_HTML_STYLESHEET = ${top_srcdir}/docs/config/style/mds_style.css
endif HAVE_CUTE_DOXYGEN

DX_STYLE_FILES = ${DX_HTML_HEADER} \
                 ${DX_HTML_FOOTER} \
                 ${DX_HTML_STYLESHEET}


DX_ENVCOMMON = \
	       srcdir='${srcdir}' \
	       top_srcdir='${top_srcdir}' \
	       DX_PACKAGE_NAME='${DX_PACKAGE_NAME}' \
	       DX_PAGES='${addprefix $(srcdir)/,${DX_PAGES}}' \
	       DX_EXCLUDE_PAGES='${addprefix $(srcdir)/,${DX_EXCLUDE_PAGES}}' \
	       DX_IMAGE_PATH='${addprefix $(srcdir)/,${DX_IMAGE_PATH}}' \
               DX_INSTALLDIR='${DX_INSTALLDIR}' \
               DX_TITLE='${DX_TITLE}' \
               DX_BRIEF='${DX_BRIEF}' \
               DX_HTML_HEADER='${DX_HTML_HEADER}' \
               DX_HTML_FOOTER='${DX_HTML_FOOTER}' \
               DX_HTML_STYLESHEET='${DX_HTML_STYLESHEET}' \
	       DX_LAYOUT='${DX_LAYOUT}' \
	       DX_LOGO='${DX_LOGO}'


DX_DESTENV = ${DX_ENV} \
             ${DX_ENVCOMMON} \
             DX_DESTDIR='${DX_DESTDIR}'



### TARGETS: ###################################################################






.ONESHELL:
.PHONY: doxygen-run doxygen-doc build_tag install_tag test_nav $(DX_PS_GOAL) $(DX_PDF_GOAL)
.INTERMEDIATE: doxygen-run $(DX_PS_GOAL) $(DX_PDF_GOAL)

test_nav:
	if [ -a ${DX_DESTDIR}/html/nav.html ] ; then rm ${DX_DESTDIR}/html/nav.html; fi
	if [ -a ${DX_DESTDIR}/html/nav.xml ] ; then rm ${DX_DESTDIR}/html/nav.xml; fi	
	
	##
	## Write navigation file
	##
	if test '${DX_PARENT_TAG}'; then \
	 for i in ${DX_PARENT_TAG}; do \
	  ##
	  ## extract correct html target relative path 
	  ##
	  line=`grep $${i} ${DX_TAGDIR}/taglist.txt | sed 's|=|=${top_builddir}/|'`; \
	  nav_dir=`echo $${line} | sed 's|.*=||'`; \
	  cat ${DX_DESTDIR}/$${nav_dir}/nav.html >> ${DX_DESTDIR}/html/nav.html; \
	  tags="$${tags} $${line}"; \
	 done \
	else \
	 echo "No tag list found!"; \
	fi;
	
	_url=${DX_DOCDIR}/html; \
	echo "<dxproject name=\"${DX_TITLE}\" url=\"$${_url}\"></dxproject>" >> ${DX_DESTDIR}/html/nav.html
	
	echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" >> ${DX_DESTDIR}/html/nav.xml; \
	echo "<project_nav>" >> ${DX_DESTDIR}/html/nav.xml; \
	echo "<topdir>${top_builddir}/../</topdir>"  >> ${DX_DESTDIR}/html/nav.xml; \
	cat ${DX_DESTDIR}/html/nav.html >> ${DX_DESTDIR}/html/nav.xml; \
	echo "</project_nav>" >> ${DX_DESTDIR}/html/nav.xml;



${DX_DESTTAG}: ${DX_PAGES}
	$(MKDIR_P) ${DX_DESTDIR}
	${MKDIR_P} ${DX_TAGDIR}
	
	##
	## Start Doxygen generation
	##
	$(DX_DESTENV) \
	GENERATE_HTML="YES" \
	GENERATE_LATEX="NO" \
	DX_DESTTAG="${DX_DESTTAG}" \
	DX_SEARCHFILE="${DX_SEARCHFILE}" \
	DX_TAGFILES= \
	$(DX_DOXYGEN) $(DX_CONFIG) 2>&1 > /dev/null;


${DX_TAGDIR}/taglist.txt: ${DX_DESTTAG} 
	##
	## generate taglist to keep track of geenerated symbols.
	##
	touch $@; \
	if grep -q ${DX_DESTTAG} ${DX_TAGDIR}/taglist.txt; then \
	echo "Name Found list not updated ..."; \
	else \
	echo "Adding tag to list ... "; \
	echo "${DX_DESTTAG}=${DX_DOCDIR}/html" >> ${DX_TAGDIR}/taglist.txt; \
	fi;
	
build_tag: ${DX_TAGDIR}/taglist.txt test_nav

install_tag: DX_INSTALLDIR=${DESTDIR}${datadir}/doc/@PACKAGE@
install_tag: ${DX_TAGDIR}/taglist.txt test_nav




${DX_DESTDIR}/doxygen.stamp: ${DX_PAGES} ${DX_TAGDIR}/taglist.txt ${DX_STYLE_FILES} 
	$(MKDIR_P) ${DX_DESTDIR} 
	
	##
	## Getting tags from generated taglist 
	##
	if test '${DX_TAGFILES}'; then \
	 for i in ${DX_TAGFILES}; do \
	  ##
	  ## extract correct html target relative path 
	  ##
	  line=`grep $${i} ${DX_TAGDIR}/taglist.txt | sed 's|=|=${top_builddir}/../|'`; \
	  tags="$${tags} $${line}"; \
	 done \
	else \
	 echo "No tag list found!"; \
	fi;
	echo "Adding selected tag entries: $${tags}"	
	
	##
	## Start Doxygen generation
	##
	$(DX_DESTENV) \
	DX_TAGFILES="$${tags}" \
	DX_DESTTAG= \
	DX_SEARCHFILE= \
	$(DX_DOXYGEN) $(DX_CONFIG);
	touch $@




doxygen-run: build_tag ${DX_DESTDIR}/doxygen.stamp

doxygen-doc: DX_INSTALLDIR = $(abs_top_builddir)
doxygen-doc: doxygen-run $(DX_PS_GOAL) $(DX_PDF_GOAL) test_nav

doxygen-install: DX_INSTALLDIR = ${DESTDIR}${datadir}/doc/@PACKAGE@
doxygen-install: doxygen-run $(DX_PS_GOAL) $(DX_PDF_GOAL) test_nav



DX_CLEANFILES = \
    ${DX_DESTDIR}/doxygen.stamp \
    ${DX_DESTTAG} \
    ${DX_SEARCHFILE} \
    -r \
    $(DX_CLEAN_HTML) \
    $(DX_CLEAN_CHM) \
    $(DX_CLEAN_CHI) \
    $(DX_CLEAN_MAN) \
    $(DX_CLEAN_RTF) \
    $(DX_CLEAN_XML) \
    $(DX_CLEAN_PS) \
    $(DX_CLEAN_PDF) \
    $(DX_CLEAN_LATEX)

endif DX_COND_doc
