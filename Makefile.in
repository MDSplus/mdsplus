#@(#)$RCSfile$ $Revision$
# @configure_input@

include @top_builddir@/Makefile.inc

srcdir=@srcdir@
builddir=@builddir@
VPATH=@srcdir@

JAVA_APS = javamds \
	   javascope \
           javatraverser \
	   javadispatcher \
	   javadevices \
	   javaclient \
	   mdsobjects/java 

MOTIF_APS = xmdsshr \
	    actions \
	    dwscope \
	    @IDLMDSWIDGETS@ \
            mitdevices \
            traverser

HDF5_APS = hdf5

D3D_PACKAGE = d3dshr

PARTS = \
        mdsshr \
        treeshr \
        tdishr \
        tditest \
	xtreeshr \
        @MDSTCPIP@ \
        mdslibidl \
        mdsdcl  \
	@CAMSHR@ \
        @REMCAM@ \
        ccl \
	servershr \
        tcl \
        @TDIC@ \
        mdslib \
        math \
        wfevent \
        setevent \
        mdsmisc \
	scripts \
	rpm \
	mdsobjects/cpp \
        manpages \
        @D3D_PACKAGE@ \
        @JAVA_APS@ \
	@MOTIF_APS@ \
	@MDSSQL@ \
	@IDLMDSEVENT@ \
	@HDF5_APS@ \
	@LV@ \
	LabView \
	@MACOSX@

@MINGW_TRUE@ PARTS += icons
@ENABLE_TESTS_TRUE@ PARTS += testing


.PHONY: all $(PARTS)
all: $(PARTS)

DIRECTORIES = $(sort @MAKEBINDIR@ @MAKELIBDIR@ @MAKESHLIBDIR@ @MAKEUIDDIR@)

$(PARTS): $(DIRECTORIES)
	$(MAKE) -C $@

.PHONY: docs
docs:
	$(MAKE) -C docs install



clean_DIRS = $(addprefix clean_, $(PARTS))

.PHONY: clean
clean: $(clean_DIRS) clean_TESTS clean_DOCS

.PHONY: $(clean_DIRS)
$(clean_DIRS):
	$(MAKE) -C $(@:clean_%=%) clean

clean_DOCS:
	$(MAKE) -C docs clean



# Testing 

.PHONY: tests
tests:
@ENABLE_TESTS_TRUE@	$(MAKE) $(AM_MAKEFLAGS) -C testing all tests
@ENABLE_TESTS_FALSE@	@echo "Tests disabled"

.PHONY: tests-valgrind
tests-valgrind:
@ENABLE_TESTS_TRUE@	$(MAKE) $(AM_MAKEFLAGS) -C testing all tests-valgrind
@ENABLE_TESTS_FALSE@	@echo "Tests disabled"

.PHONY: $(clean_TESTS)
clean_TESTS:
@ENABLE_TESTS_TRUE@	$(MAKE) -C testing tests-clean





.PHONY: full_clean
full_clean: ./devscripts/rm_if clean
	@ $< bin bin64 bin32 bin_x86 bin_x86_64
	@ $< etc
	@ $< lib lib64 lib32
	@ $< java/classes
	@ $< java
	@ $< uid uid64 uid32
	@ $< config.cache
	@ $< config.log
	@ $< `find . -name '*.in' | \
	      grep -v configure.in | grep -v makekit.in | \
	      $(AWK) '{print substr($$1,0,length($$1)-3)}'`

.PHONY: depend
depend:
	cdir=`pwd`;\
	set -e; for dir in $(PARTS) ; do\
	  cd $${dir}; $${MAKE:=make} depend > /dev/null 2> /dev/null; cd $$cdir;\
	done

MISC_PARTS = tdi idl trees setup.sh setup.csh ChangeLog mdsplus.ico include mdsobjects/python desktop pixmaps matlab php epics xml

install_DIRS = $(addprefix install_, $(PARTS))
$(install_DIRS):
	$(MAKE) -C $(@:install_%=%) install

.PHONY: install
install: $(install_DIRS)
	- find $(prefix)/java -name '*.class' -delete #### No need to include class files
	$(MKDIR_P) $(prefix)/local/tdi
	$(MKDIR_P) $(prefix)/java
	tar -C ${top_srcdir} \
		--exclude='.gitignore' \
		--exclude='*.pyc' \
		--exclude=__pycache__ \
		--exclude=python/build \
		--exclude='*egg-info' \
		--exclude='*\.in' \
		--exclude='Makefile\.*' \
		-cf  - $(MISC_PARTS) | (cd $(exec_prefix); tar -xvf -)
	find . -name '_version\.py' -exec cp {} $(exec_prefix)/{} \;
	tar -C ${top_builddir} -cf - include/config.h | (cd $(exec_prefix); tar -xf -) ## TODO: remove this and config.h from headers ...
	if [ ! -z "$$MDSPLUS_VERSION" ]; then echo "mdsplus_version='$$MDSPLUS_VERSION'" > $(exec_prefix)/mdsobjects/python/mdsplus_version.py; fi
	$(INSTALL) ${top_srcdir}/MDSplus-License.txt ${top_srcdir}/MDSplus-License.rtf $(exec_prefix)
	(cd $(exec_prefix); chmod -R 755 $(MISC_PARTS))

# Interdependent directories:
actions: mdsshr tdishr treeshr xmdsshr mdstcpip servershr
camshr: mdsdcl
ccl: camshr  mdsshr mdsdcl
tcl: mdsshr treeshr tdishr mdstcpip servershr mdsdcl
dwscope: xmdsshr
javadevices: javatraverser
javadispatcher: javascope javatraverser
javamds: mdstcpip 
javatraverser: javascope
math: mdsshr
mdsdcl: mdsshr
mdslib: mdstcpip
mdslibidl: tdishr
mdsmisc: tdishr xtreeshr
mdsobjects/cpp: mdstcpip 
mdsobjects/java: javascope
mdstcpip: tdishr
mitdevices: mdsshr tdishr treeshr xmdsshr
remcam: mdstcpip
servershr: mdsdcl tdishr treeshr mdsshr mdstcpip
setevent: mdsshr
tdic: mdstcpip
tdishr: mdsshr treeshr
tditest: tdishr
traverser: xmdsshr
treeshr: mdsshr
wfevent: tdishr mdsshr
xmdsshr: tdishr
xtreeshr: tdishr

am--refresh:
