# Makefile.in generated by automake 1.15 from Makefile.am.
# @configure_input@

# Copyright (C) 1994-2014 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

# //////////////////////////////////////////////////////////////////////////// #
# ///  TESTS SECTION   /////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #
VPATH = @srcdir@
am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
target_triplet = @target@
@ENABLE_SANITIZE_TRUE@am__append_1 = ${ENABLE_SANITIZE_OPTIONS}=${${ENABLE_SANITIZE_OPTIONS}_SUPP}:${SAN_OPTIONS}:${${ENABLE_SANITIZE_OPTIONS}}:start_deactivated=1:exitcode=1 \
@ENABLE_SANITIZE_TRUE@	LSAN_OPTIONS=${LSAN_OPTIONS_SUPP}:${LSAN_OPTIONS}:G_SLICE=always-malloc \
@ENABLE_SANITIZE_TRUE@	TEST_LD_PRELOAD=${TEST_LD_PRELOAD} \
@ENABLE_SANITIZE_TRUE@	TEST_TIMEUNIT=$$(($${TEST_TIMEUNIT:-1} * \
@ENABLE_SANITIZE_TRUE@	5))
@ENABLE_SANITIZE_TRUE@am__append_2 = $(shell ${_check_sanitize_ldd} || \
@ENABLE_SANITIZE_TRUE@	echo --skip;) $(shell test \
@ENABLE_SANITIZE_TRUE@	x"${ENABLE_SANITIZE}" != x"thread" || \
@ENABLE_SANITIZE_TRUE@	echo --skip;)
check_PROGRAMS =
subdir = tditest/testing
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/ac_defun_local.m4 \
	$(top_srcdir)/m4/ax_check_java_home.m4 \
	$(top_srcdir)/m4/ax_compare_version.m4 \
	$(top_srcdir)/m4/ax_compiler_vendor.m4 \
	$(top_srcdir)/m4/ax_compiler_version.m4 \
	$(top_srcdir)/m4/ax_target_selfhelp.m4 \
	$(top_srcdir)/m4/m4_ac_search_readline.m4 \
	$(top_srcdir)/m4/m4_am_path_xml2.m4 \
	$(top_srcdir)/m4/m4_ax_check_enable_debug.m4 \
	$(top_srcdir)/m4/m4_ax_configure_args.m4 \
	$(top_srcdir)/m4/m4_ax_docker_build.m4 \
	$(top_srcdir)/m4/m4_ax_is_release.m4 \
	$(top_srcdir)/m4/m4_ax_mdsplus_directories.m4 \
	$(top_srcdir)/m4/m4_ax_mdsplus_testing.m4 \
	$(top_srcdir)/m4/m4_ax_perl_module_version.m4 \
	$(top_srcdir)/m4/m4_ax_prog_doxygen.m4 \
	$(top_srcdir)/m4/m4_ax_python_architecture.m4 \
	$(top_srcdir)/m4/m4_ax_python_module.m4 \
	$(top_srcdir)/m4/m4_ax_sanitize_check.m4 \
	$(top_srcdir)/m4/m4_ax_valgrind_check.m4 \
	$(top_srcdir)/m4/pkg.m4 $(top_srcdir)/m4/visibility.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/include/mdsplus/mdsconfig.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
AM_V_P = $(am__v_P_@AM_V@)
am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 = 
SOURCES =
DIST_SOURCES =
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
am__tty_colors_dummy = \
  mgn= red= grn= lgn= blu= brg= std=; \
  am__color_tests=no
am__tty_colors = { \
  $(am__tty_colors_dummy); \
  if test "X$(AM_COLOR_TESTS)" = Xno; then \
    am__color_tests=no; \
  elif test "X$(AM_COLOR_TESTS)" = Xalways; then \
    am__color_tests=yes; \
  elif test "X$$TERM" != Xdumb && { test -t 1; } 2>/dev/null; then \
    am__color_tests=yes; \
  fi; \
  if test $$am__color_tests = yes; then \
    red='[0;31m'; \
    grn='[0;32m'; \
    lgn='[1;32m'; \
    blu='[1;34m'; \
    mgn='[0;35m'; \
    brg='[1m'; \
    std='[m'; \
  fi; \
}
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__recheck_rx = ^[ 	]*:recheck:[ 	]*
am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*
am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*
# A command that, given a newline-separated list of test names on the
# standard input, print the name of the tests that are to be re-run
# upon "make recheck".
am__list_recheck_tests = $(AWK) '{ \
  recheck = 1; \
  while ((rc = (getline line < ($$0 ".trs"))) != 0) \
    { \
      if (rc < 0) \
        { \
          if ((getline line2 < ($$0 ".log")) < 0) \
	    recheck = 0; \
          break; \
        } \
      else if (line ~ /$(am__recheck_rx)[nN][Oo]/) \
        { \
          recheck = 0; \
          break; \
        } \
      else if (line ~ /$(am__recheck_rx)[yY][eE][sS]/) \
        { \
          break; \
        } \
    }; \
  if (recheck) \
    print $$0; \
  close ($$0 ".trs"); \
  close ($$0 ".log"); \
}'
# A command that, given a newline-separated list of test names on the
# standard input, create the global log from their .trs and .log files.
am__create_global_log = $(AWK) ' \
function fatal(msg) \
{ \
  print "fatal: making $@: " msg | "cat >&2"; \
  exit 1; \
} \
function rst_section(header) \
{ \
  print header; \
  len = length(header); \
  for (i = 1; i <= len; i = i + 1) \
    printf "="; \
  printf "\n\n"; \
} \
{ \
  copy_in_global_log = 1; \
  global_test_result = "RUN"; \
  while ((rc = (getline line < ($$0 ".trs"))) != 0) \
    { \
      if (rc < 0) \
         fatal("failed to read from " $$0 ".trs"); \
      if (line ~ /$(am__global_test_result_rx)/) \
        { \
          sub("$(am__global_test_result_rx)", "", line); \
          sub("[ 	]*$$", "", line); \
          global_test_result = line; \
        } \
      else if (line ~ /$(am__copy_in_global_log_rx)[nN][oO]/) \
        copy_in_global_log = 0; \
    }; \
  if (copy_in_global_log) \
    { \
      rst_section(global_test_result ": " $$0); \
      while ((rc = (getline line < ($$0 ".log"))) != 0) \
      { \
        if (rc < 0) \
          fatal("failed to read from " $$0 ".log"); \
        print line; \
      }; \
      printf "\n"; \
    }; \
  close ($$0 ".trs"); \
  close ($$0 ".log"); \
}'
# Restructured Text title.
am__rst_title = { sed 's/.*/   &   /;h;s/./=/g;p;x;s/ *$$//;p;g' && echo; }
# Solaris 10 'make', and several other traditional 'make' implementations,
# pass "-e" to $(SHELL), and POSIX 2008 even requires this.  Work around it
# by disabling -e (using the XSI extension "set +e") if it's set.
am__sh_e_setup = case $$- in *e*) set +e;; esac
# Default flags passed to test drivers.
am__common_driver_flags = \
  --color-tests "$$am__color_tests" \
  --enable-hard-errors "$$am__enable_hard_errors" \
  --expect-failure "$$am__expect_failure"
# To be inserted before the command running the test.  Creates the
# directory for the log if needed.  Stores in $dir the directory
# containing $f, in $tst the test, in $log the log.  Executes the
# developer- defined test setup AM_TESTS_ENVIRONMENT (if any), and
# passes TESTS_ENVIRONMENT.  Set up options for the wrapper that
# will run the test scripts (or their associated LOG_COMPILER, if
# thy have one).
am__check_pre = \
$(am__sh_e_setup);					\
$(am__vpath_adj_setup) $(am__vpath_adj)			\
$(am__tty_colors);					\
srcdir=$(srcdir); export srcdir;			\
case "$@" in						\
  */*) am__odir=`echo "./$@" | sed 's|/[^/]*$$||'`;;	\
    *) am__odir=.;; 					\
esac;							\
test "x$$am__odir" = x"." || test -d "$$am__odir" 	\
  || $(MKDIR_P) "$$am__odir" || exit $$?;		\
if test -f "./$$f"; then dir=./;			\
elif test -f "$$f"; then dir=;				\
else dir="$(srcdir)/"; fi;				\
tst=$$dir$$f; log='$@'; 				\
if test -n '$(DISABLE_HARD_ERRORS)'; then		\
  am__enable_hard_errors=no; 				\
else							\
  am__enable_hard_errors=yes; 				\
fi; 							\
case " $(XFAIL_TESTS) " in				\
  *[\ \	]$$f[\ \	]* | *[\ \	]$$dir$$f[\ \	]*) \
    am__expect_failure=yes;;				\
  *)							\
    am__expect_failure=no;;				\
esac; 							\
$(AM_TESTS_ENVIRONMENT) $(TESTS_ENVIRONMENT)
# A shell command to get the names of the tests scripts with any registered
# extension removed (i.e., equivalently, the names of the test logs, with
# the '.log' extension removed).  The result is saved in the shell variable
# '$bases'.  This honors runtime overriding of TESTS and TEST_LOGS.  Sadly,
# we cannot use something simpler, involving e.g., "$(TEST_LOGS:.log=)",
# since that might cause problem with VPATH rewrites for suffix-less tests.
# See also 'test-harness-vpath-rewrite.sh' and 'test-trs-basic.sh'.
am__set_TESTS_bases = \
  bases='$(TEST_LOGS)'; \
  bases=`for i in $$bases; do echo $$i; done | sed 's/\.log$$//'`; \
  bases=`echo $$bases`
RECHECK_LOGS = $(TEST_LOGS)
AM_RECURSIVE_TARGETS = check recheck
TEST_SUITE_LOG = test-suite.log
am__test_logs1 = $(TESTS:=.log)
am__test_logs2 = $(am__test_logs1:@EXEEXT@.log=.log)
TEST_LOGS = $(am__test_logs2:.tdi.log=.log)
TDI_LOG_DRIVER = $(SHELL) $(top_srcdir)/conf/test-driver
TDI_LOG_COMPILE = $(TDI_LOG_COMPILER) $(AM_TDI_LOG_FLAGS) \
	$(TDI_LOG_FLAGS)
am__set_b = \
  case '$@' in \
    */*) \
      case '$*' in \
        */*) b='$*';; \
          *) b=`echo '$@' | sed 's/\.log$$//'`; \
       esac;; \
    *) \
      b='$*';; \
  esac
am__DIST_COMMON = $(srcdir)/../../testing/testing.am \
	$(srcdir)/Makefile.in $(top_srcdir)/conf/test-driver
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CAMSHR = @CAMSHR@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CFLAG_VISIBILITY = @CFLAG_VISIBILITY@
CLOCK_GETTIME_LIB = @CLOCK_GETTIME_LIB@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
D3DLIB = @D3DLIB@
D3D_FFLAGS = @D3D_FFLAGS@
D3D_PACKAGE = @D3D_PACKAGE@
DC1394_SUPPORT = @DC1394_SUPPORT@
DC1394_SUPPORT2 = @DC1394_SUPPORT2@
DEFS = @DEFS@
DEF_PYLIB = @DEF_PYLIB@
DEPDIR = @DEPDIR@
DNET_STUB = @DNET_STUB@
DOXYGEN = @DOXYGEN@
DOXYGEN_PAPER_SIZE = @DOXYGEN_PAPER_SIZE@
DX_CONFIG = @DX_CONFIG@
DX_DOCDIR = @DX_DOCDIR@
DX_DOT = @DX_DOT@
DX_DOXYGEN = @DX_DOXYGEN@
DX_DVIPS = @DX_DVIPS@
DX_EGREP = @DX_EGREP@
DX_ENV = @DX_ENV@
DX_FLAG_chi = @DX_FLAG_chi@
DX_FLAG_chm = @DX_FLAG_chm@
DX_FLAG_doc = @DX_FLAG_doc@
DX_FLAG_dot = @DX_FLAG_dot@
DX_FLAG_html = @DX_FLAG_html@
DX_FLAG_man = @DX_FLAG_man@
DX_FLAG_pdf = @DX_FLAG_pdf@
DX_FLAG_ps = @DX_FLAG_ps@
DX_FLAG_rtf = @DX_FLAG_rtf@
DX_FLAG_xml = @DX_FLAG_xml@
DX_HHC = @DX_HHC@
DX_LATEX = @DX_LATEX@
DX_MAKEINDEX = @DX_MAKEINDEX@
DX_PDFLATEX = @DX_PDFLATEX@
DX_PERL = @DX_PERL@
DX_PROJECT = @DX_PROJECT@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
ENABLE_SANITIZE = @ENABLE_SANITIZE@
ENABLE_SANITIZE_LIBPATH = @ENABLE_SANITIZE_LIBPATH@
ENABLE_SANITIZE_OPTIONS = @ENABLE_SANITIZE_OPTIONS@
ENABLE_VALGRIND = @ENABLE_VALGRIND@
EXEEXT = @EXEEXT@
EXPORTS_FILE = @EXPORTS_FILE@
FC = @FC@
FCFLAGS = @FCFLAGS@
FEXECLIBDIR = @FEXECLIBDIR@
FORLD = @FORLD@
FOR_LDFLAGS = @FOR_LDFLAGS@
FOR_LINKSHARED = @FOR_LINKSHARED@
GEN_DEVICE = @GEN_DEVICE@
GLOBUS_CFLAGS = @GLOBUS_CFLAGS@
GLOBUS_FLAVOR = @GLOBUS_FLAVOR@
GLOBUS_LIBS = @GLOBUS_LIBS@
GLOBUS_LOCATION = @GLOBUS_LOCATION@
GREP = @GREP@
HAVE_DOCKER = @HAVE_DOCKER@
HAVE_MOTIF = @HAVE_MOTIF@
HAVE_VISIBILITY = @HAVE_VISIBILITY@
HAVE_WINE = @HAVE_WINE@
HAVE_WINEBOOT = @HAVE_WINEBOOT@
HAVE_WINECONSOLE = @HAVE_WINECONSOLE@
HAVE_WINEPATH = @HAVE_WINEPATH@
HDF5_APS = @HDF5_APS@
HDF5_INCS = @HDF5_INCS@
HDF5_LIBS = @HDF5_LIBS@
HUP_TO_INETD = @HUP_TO_INETD@
HUP_TO_XINETD = @HUP_TO_XINETD@
IDLMDSEVENT = @IDLMDSEVENT@
IDLMDSWIDGETS = @IDLMDSWIDGETS@
IDL_INC = @IDL_INC@
IDL_LIB = @IDL_LIB@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
JAR = @JAR@
JARS_DIR = @JARS_DIR@
JAVAC = @JAVAC@
JAVACFLAGS = @JAVACFLAGS@
JAVAC_PATH_NAME = @JAVAC_PATH_NAME@
JAVAVERSION = @JAVAVERSION@
JAVA_APS = @JAVA_APS@
JAVA_JAR = @JAVA_JAR@
JAVA_ONLY = @JAVA_ONLY@
JDK_CFLAGS = @JDK_CFLAGS@
JDK_DIR = @JDK_DIR@
JDK_LIVECONNECT = @JDK_LIVECONNECT@
LD = @LD@
LDARC = @LDARC@
LDFLAGS = @LDFLAGS@
LDSHARE = @LDSHARE@
LD_LDARC = @LD_LDARC@
LD_LDSHARE = @LD_LDSHARE@
LIBDL = @LIBDL@
LIBM = @LIBM@
LIBOBJS = @LIBOBJS@
LIBPATH = @LIBPATH@
LIBPRE = @LIBPRE@
LIBREADLINE = @LIBREADLINE@
LIBRESOLV = @LIBRESOLV@
LIBRT = @LIBRT@
LIBS = @LIBS@
LIBSOCKET = @LIBSOCKET@
LIBXEXT = @LIBXEXT@
LIBXP = @LIBXP@
LINKJNI = @LINKJNI@
LINKMODULE = @LINKMODULE@
LINKSHARED = @LINKSHARED@
LINKWHOLE = @LINKWHOLE@
LOG_COMPILER = @LOG_COMPILER@
LOG_DRIVER = @LOG_DRIVER@
LTLIBOBJS = @LTLIBOBJS@
LV = @LV@
LV_CINTOOLS = @LV_CINTOOLS@
MACOSX = @MACOSX@
MAINT = @MAINT@
MAKEBINDIR = @MAKEBINDIR@
MAKEETCDIR = @MAKEETCDIR@
MAKEFLAG_J = @MAKEFLAG_J@
MAKEFLAG_O = @MAKEFLAG_O@
MAKEINFO = @MAKEINFO@
MAKELIBDIR = @MAKELIBDIR@
MAKESHLIBDIR = @MAKESHLIBDIR@
MAKEUIDDIR = @MAKEUIDDIR@
MDSSQL = @MDSSQL@
MDSTCPIP = @MDSTCPIP@
MITDEVICESIO_TARGETS = @MITDEVICESIO_TARGETS@
MKDIR_P = @MKDIR_P@
MOTIF_APS = @MOTIF_APS@
MOTIF_LDARC = @MOTIF_LDARC@
MOTIF_LDSHARE = @MOTIF_LDSHARE@
MOTIF_LD_LDARC = @MOTIF_LD_LDARC@
MOTIF_LD_LDSHARE = @MOTIF_LD_LDSHARE@
NEED_SEMUN = @NEED_SEMUN@
NOWARNFLAGS = @NOWARNFLAGS@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PERL = @PERL@
PKG_CONFIG = @PKG_CONFIG@
PKG_CONFIG_LIBDIR = @PKG_CONFIG_LIBDIR@
PKG_CONFIG_PATH = @PKG_CONFIG_PATH@
PYTHON = @PYTHON@
PYTHON_ARCHITECTURE = @PYTHON_ARCHITECTURE@
PYTHON_EXEC_PREFIX = @PYTHON_EXEC_PREFIX@
PYTHON_INCLUDE_DIR = @PYTHON_INCLUDE_DIR@
PYTHON_PLATFORM = @PYTHON_PLATFORM@
PYTHON_PREFIX = @PYTHON_PREFIX@
PYTHON_VERSION = @PYTHON_VERSION@
PY_LOG_COMPILER = @PY_LOG_COMPILER@
PY_LOG_FLAGS = @PY_LOG_FLAGS@ $(am__append_2)
RANLIB = @RANLIB@
READLINE_CPPFLAGS = @READLINE_CPPFLAGS@
READLINE_LDFLAGS = @READLINE_LDFLAGS@
READLINE_LIBS = @READLINE_LIBS@
READLINK = @READLINK@
RELEASE_BRANCH = @RELEASE_BRANCH@
RELEASE_COMMIT = @RELEASE_COMMIT@
RELEASE_DATE = @RELEASE_DATE@
RELEASE_MAJOR = @RELEASE_MAJOR@
RELEASE_MINOR = @RELEASE_MINOR@
RELEASE_RELEASE = @RELEASE_RELEASE@
RELEASE_TAG = @RELEASE_TAG@
REMCAM = @REMCAM@
REMCAMLIB = @REMCAMLIB@
RMIC = @RMIC@
RPATHLINK = @RPATHLINK@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHARETYPE = @SHARETYPE@
SHARETYPEJNI = @SHARETYPEJNI@
SHARETYPEMOD = @SHARETYPEMOD@
SHELL = @SHELL@
SRBINCLUDE = @SRBINCLUDE@
SRBLIB = @SRBLIB@
STRIP = @STRIP@
SYBASE_INC = @SYBASE_INC@
SYBASE_LIB = @SYBASE_LIB@
TARGET_ARCH = @TARGET_ARCH@
TAR_EXCLUDE = @TAR_EXCLUDE@
TDIC = @TDIC@
TESTS_ENVIRONMENT = @TESTS_ENVIRONMENT@ $(am__append_1)
THREAD = @THREAD@
UIL = @UIL@
USE_PIPED_MESSAGING = @USE_PIPED_MESSAGING@
USE_TM_GMTOFF = @USE_TM_GMTOFF@
VALGRIND = @VALGRIND@

# DISABLE PYTHON LEAK DETECTION: This suppression file shall be removed when
# python will finally introduce the patch to detect if valgrind is running ..
# take a look at the file for details. You can also disable this if you are
# using a Python compiled with --without-pymalloc (only for valgrind as it is 5
# times slower to run)
#
#VALGRIND_SUPPRESSIONS_FILES_PY = \
#	$(top_srcdir)/conf/valgrind-mdsplus.supp \
#	${top_srcdir}/conf/valgrind-python.supp \
#	${top_srcdir}/conf/valgrind-python-disableleak.supp

# Skipping child programs that are launched inside python classes
#
VALGRIND_FLAGS = \
                 --trace-children-skip=*/diff

VALGRIND_HAVE_TOOL_drd = @VALGRIND_HAVE_TOOL_drd@
VALGRIND_HAVE_TOOL_exp_sgcheck = @VALGRIND_HAVE_TOOL_exp_sgcheck@
VALGRIND_HAVE_TOOL_helgrind = @VALGRIND_HAVE_TOOL_helgrind@
VALGRIND_HAVE_TOOL_memcheck = @VALGRIND_HAVE_TOOL_memcheck@
VALGRIND_memcheck_FLAGS = @VALGRIND_memcheck_FLAGS@
VERSION = @VERSION@
VS = @VS@
VS_ARCH = @VS_ARCH@
VS_DIR = @VS_DIR@
WARNFLAGS = @WARNFLAGS@
WINDRES = @WINDRES@
XMKMF = @XMKMF@
XML2_CONFIG = @XML2_CONFIG@
XML_CFLAGS = @XML_CFLAGS@
XML_CPPFLAGS = @XML_CPPFLAGS@
XML_LIBS = @XML_LIBS@
XM_LIBS = @XM_LIBS@
X_CFLAGS = @X_CFLAGS@
X_EXTRA_LIBS = @X_EXTRA_LIBS@
X_LIBS = @X_LIBS@
X_PRE_LIBS = @X_PRE_LIBS@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_FC = @ac_ct_FC@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
pkgpyexecdir = @pkgpyexecdir@
pkgpythondir = @pkgpythondir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
pyexecdir = @pyexecdir@
pythondir = @pythondir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target = @target@
target_alias = @target_alias@
target_cpu = @target_cpu@
target_os = @target_os@
target_vendor = @target_vendor@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
uiddir = @uiddir@
TEST_CFLAGS = -I${top_srcdir}/testing
TEST_LIBS = -lMdsTestShr @LIBM@ @THREAD@ @LIBRT@

# ///  select test form env variable  //////////////////////////////////////// #
TEST_BUILDTYPE = local
SUFFIXES = .log .tap .xml
.PRECIUS = %.log %.tap %.xml

# // check if libpath is correct or skip python tests
@ENABLE_SANITIZE_TRUE@_check_sanitize_ldd = \
@ENABLE_SANITIZE_TRUE@   ( test "${ENABLE_SANITIZE}" != "no" -a -n "${ENABLE_SANITIZE_LIBPATH}" && \
@ENABLE_SANITIZE_TRUE@     ldd ${MAKESHLIBDIR}/libMdsTestShr.so | grep ${ENABLE_SANITIZE_LIBPATH}  > /dev/null; )


# //////////////////////////////////////////////////////////////////////////// #
# ///  TAP TARGET   ////////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #

# .PHONY: $(TEST_SUITE_TAP)
TEST_BUILD_TAP = test-build.tap
TEST_SUITE_TAP = test-suite.tap
TEST_EXTENSIONS = .tdi
TDI_LOG_COMPILER = $(abs_top_srcdir)/tditest/testing/do_tditests.sh
TEST_FLAGS = @MAKEFLAG_J@
TESTS = \
	test-tcl.tdi \
	test-tdishr.tdi \
	test-treeshr.tdi \
	test-dev-py.tdi


# if VALGRIND_TESTS is defined this list is executed with valgrind

#	threadsUnitTest.py
VALGRIND_TESTS = \
	test-tcl.tdi \
	test-tdishr.tdi \
	test-treeshr.tdi \
	test-dev-py.tdi


# Files produced by tests that must be purged
#
MOSTLYCLEANFILES = \
	./*.log ./*.tap \
	tditst.tmp shotid.sys \
	main_*.characteristics* main_*.datafile* main_*.tree*

check_SCRIPTS = $(TESTS)
all: all-am

.SUFFIXES:
.SUFFIXES: .log .tap .xml .tdi .tdi$(EXEEXT) .trs
$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am $(srcdir)/../../testing/testing.am $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign tditest/testing/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign tditest/testing/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;
$(srcdir)/../../testing/testing.am $(am__empty):

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: @MAINTAINER_MODE_TRUE@ $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-checkPROGRAMS:
	-test -z "$(check_PROGRAMS)" || rm -f $(check_PROGRAMS)
tags TAGS:

ctags CTAGS:

cscope cscopelist:


# Recover from deleted '.trs' file; this should ensure that
# "rm -f foo.log; make foo.trs" re-run 'foo.test', and re-create
# both 'foo.log' and 'foo.trs'.  Break the recipe in two subshells
# to avoid problems with "make -n".
.log.trs:
	rm -f $< $@
	$(MAKE) $(AM_MAKEFLAGS) $<

# Leading 'am--fnord' is there to ensure the list of targets does not
# expand to empty, as could happen e.g. with make check TESTS=''.
am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
am--force-recheck:
	@:

$(TEST_SUITE_LOG): $(TEST_LOGS)
	@$(am__set_TESTS_bases); \
	am__f_ok () { test -f "$$1" && test -r "$$1"; }; \
	redo_bases=`for i in $$bases; do \
	              am__f_ok $$i.trs && am__f_ok $$i.log || echo $$i; \
	            done`; \
	if test -n "$$redo_bases"; then \
	  redo_logs=`for i in $$redo_bases; do echo $$i.log; done`; \
	  redo_results=`for i in $$redo_bases; do echo $$i.trs; done`; \
	  if $(am__make_dryrun); then :; else \
	    rm -f $$redo_logs && rm -f $$redo_results || exit 1; \
	  fi; \
	fi; \
	if test -n "$$am__remaking_logs"; then \
	  echo "fatal: making $(TEST_SUITE_LOG): possible infinite" \
	       "recursion detected" >&2; \
	elif test -n "$$redo_logs"; then \
	  am__remaking_logs=yes $(MAKE) $(AM_MAKEFLAGS) $$redo_logs; \
	fi; \
	if $(am__make_dryrun); then :; else \
	  st=0;  \
	  errmsg="fatal: making $(TEST_SUITE_LOG): failed to create"; \
	  for i in $$redo_bases; do \
	    test -f $$i.trs && test -r $$i.trs \
	      || { echo "$$errmsg $$i.trs" >&2; st=1; }; \
	    test -f $$i.log && test -r $$i.log \
	      || { echo "$$errmsg $$i.log" >&2; st=1; }; \
	  done; \
	  test $$st -eq 0 || exit 1; \
	fi
	@$(am__sh_e_setup); $(am__tty_colors); $(am__set_TESTS_bases); \
	ws='[ 	]'; \
	results=`for b in $$bases; do echo $$b.trs; done`; \
	test -n "$$results" || results=/dev/null; \
	all=`  grep "^$$ws*:test-result:"           $$results | wc -l`; \
	pass=` grep "^$$ws*:test-result:$$ws*PASS"  $$results | wc -l`; \
	fail=` grep "^$$ws*:test-result:$$ws*FAIL"  $$results | wc -l`; \
	skip=` grep "^$$ws*:test-result:$$ws*SKIP"  $$results | wc -l`; \
	xfail=`grep "^$$ws*:test-result:$$ws*XFAIL" $$results | wc -l`; \
	xpass=`grep "^$$ws*:test-result:$$ws*XPASS" $$results | wc -l`; \
	error=`grep "^$$ws*:test-result:$$ws*ERROR" $$results | wc -l`; \
	if test `expr $$fail + $$xpass + $$error` -eq 0; then \
	  success=true; \
	else \
	  success=false; \
	fi; \
	br='==================='; br=$$br$$br$$br$$br; \
	result_count () \
	{ \
	    if test x"$$1" = x"--maybe-color"; then \
	      maybe_colorize=yes; \
	    elif test x"$$1" = x"--no-color"; then \
	      maybe_colorize=no; \
	    else \
	      echo "$@: invalid 'result_count' usage" >&2; exit 4; \
	    fi; \
	    shift; \
	    desc=$$1 count=$$2; \
	    if test $$maybe_colorize = yes && test $$count -gt 0; then \
	      color_start=$$3 color_end=$$std; \
	    else \
	      color_start= color_end=; \
	    fi; \
	    echo "$${color_start}# $$desc $$count$${color_end}"; \
	}; \
	create_testsuite_report () \
	{ \
	  result_count $$1 "TOTAL:" $$all   "$$brg"; \
	  result_count $$1 "PASS: " $$pass  "$$grn"; \
	  result_count $$1 "SKIP: " $$skip  "$$blu"; \
	  result_count $$1 "XFAIL:" $$xfail "$$lgn"; \
	  result_count $$1 "FAIL: " $$fail  "$$red"; \
	  result_count $$1 "XPASS:" $$xpass "$$red"; \
	  result_count $$1 "ERROR:" $$error "$$mgn"; \
	}; \
	{								\
	  echo "$(PACKAGE_STRING): $(subdir)/$(TEST_SUITE_LOG)" |	\
	    $(am__rst_title);						\
	  create_testsuite_report --no-color;				\
	  echo;								\
	  echo ".. contents:: :depth: 2";				\
	  echo;								\
	  for b in $$bases; do echo $$b; done				\
	    | $(am__create_global_log);					\
	} >$(TEST_SUITE_LOG).tmp || exit 1;				\
	mv $(TEST_SUITE_LOG).tmp $(TEST_SUITE_LOG);			\
	if $$success; then						\
	  col="$$grn";							\
	 else								\
	  col="$$red";							\
	  test x"$$VERBOSE" = x || cat $(TEST_SUITE_LOG);		\
	fi;								\
	echo "$${col}$$br$${std}"; 					\
	echo "$${col}Testsuite summary for $(PACKAGE_STRING)$${std}";	\
	echo "$${col}$$br$${std}"; 					\
	create_testsuite_report --maybe-color;				\
	echo "$$col$$br$$std";						\
	if $$success; then :; else					\
	  echo "$${col}See $(subdir)/$(TEST_SUITE_LOG)$${std}";		\
	  if test -n "$(PACKAGE_BUGREPORT)"; then			\
	    echo "$${col}Please report to $(PACKAGE_BUGREPORT)$${std}";	\
	  fi;								\
	  echo "$$col$$br$$std";					\
	fi;								\
	$$success || exit 1

check-TESTS:
	@list='$(RECHECK_LOGS)';           test -z "$$list" || rm -f $$list
	@list='$(RECHECK_LOGS:.log=.trs)'; test -z "$$list" || rm -f $$list
	@test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)
	@set +e; $(am__set_TESTS_bases); \
	log_list=`for i in $$bases; do echo $$i.log; done`; \
	trs_list=`for i in $$bases; do echo $$i.trs; done`; \
	log_list=`echo $$log_list`; trs_list=`echo $$trs_list`; \
	$(MAKE) $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) TEST_LOGS="$$log_list"; \
	exit $$?;
recheck: all $(check_PROGRAMS) $(check_SCRIPTS)
	@test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)
	@set +e; $(am__set_TESTS_bases); \
	bases=`for i in $$bases; do echo $$i; done \
	         | $(am__list_recheck_tests)` || exit 1; \
	log_list=`for i in $$bases; do echo $$i.log; done`; \
	log_list=`echo $$log_list`; \
	$(MAKE) $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) \
	        am__force_recheck=am--force-recheck \
	        TEST_LOGS="$$log_list"; \
	exit $$?
.tdi.log:
	@p='$<'; \
	$(am__set_b); \
	$(am__check_pre) $(TDI_LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_TDI_LOG_DRIVER_FLAGS) $(TDI_LOG_DRIVER_FLAGS) -- $(TDI_LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
@am__EXEEXT_TRUE@.tdi$(EXEEXT).log:
@am__EXEEXT_TRUE@	@p='$<'; \
@am__EXEEXT_TRUE@	$(am__set_b); \
@am__EXEEXT_TRUE@	$(am__check_pre) $(TDI_LOG_DRIVER) --test-name "$$f" \
@am__EXEEXT_TRUE@	--log-file $$b.log --trs-file $$b.trs \
@am__EXEEXT_TRUE@	$(am__common_driver_flags) $(AM_TDI_LOG_DRIVER_FLAGS) $(TDI_LOG_DRIVER_FLAGS) -- $(TDI_LOG_COMPILE) \
@am__EXEEXT_TRUE@	"$$tst" $(AM_TESTS_FD_REDIRECT)

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS) $(check_SCRIPTS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:
	-test -z "$(MOSTLYCLEANFILES)" || rm -f $(MOSTLYCLEANFILES)
	-test -z "$(TEST_LOGS)" || rm -f $(TEST_LOGS)
	-test -z "$(TEST_LOGS:.log=.trs)" || rm -f $(TEST_LOGS:.log=.trs)
	-test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-generic

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: check-am install-am install-strip

.PHONY: all all-am check check-TESTS check-am clean \
	clean-checkPROGRAMS clean-generic cscopelist-am ctags-am \
	distclean distclean-generic distdir dvi dvi-am html html-am \
	info info-am install install-am install-data install-data-am \
	install-dvi install-dvi-am install-exec install-exec-am \
	install-html install-html-am install-info install-info-am \
	install-man install-pdf install-pdf-am install-ps \
	install-ps-am install-strip installcheck installcheck-am \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-generic pdf pdf-am ps ps-am recheck \
	tags-am uninstall uninstall-am

.PRECIOUS: Makefile


include @top_builddir@/Makefile.inc
TEST_FORMAT     ?= log,tap
AM_MAKEFLAGS    ?= V=0

.PHONY: tap xml log
tap: $(TEST_SUITE_TAP)
xml: $(TEST_SUITE_XML)
log: $(TEST_SUITE_LOG)

.PHONY: rebuild-tests
rebuild-tests:
	@ \
	if [ -n "$(check_PROGRAMS)" ]; then \
	 echo "//// Rebuilding tests ////"; \
	 rm -f *.$(OBJEXT); \
	 rm -f $(check_PROGRAMS); \
	 if [ -n "$${VALGRIND_BUILD}" ]; then \
	  $(MAKE) -k $(AM_MAKEFLAGS) $(BUILD_FLAGS) all ||:; \
	 else \
	  $(MAKE) -k $(AM_MAKEFLAGS) $(BUILD_FLAGS) all \
	  CFLAGS="${CFLAGS} -D_TESTING" CPPFLAGS="${CPPFLAGS} -D_TESTING" ||:; \
	 fi; \
	fi

.PHONY: tests
tests: rebuild-tests
	@ \
	echo "//// Performing tests /////"; \
	export TEST_FORMAT=${TEST_FORMAT}; \
	status=0; \
	$(MAKE) -k $(TEST_FLAGS) $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) || status=$$?;\
	$(MAKE) -k $(AM_MAKEFLAGS) $${TEST_FORMAT//,/ } || status=$$?; \
	exit $$status

# //////////////////////////////////////////////////////////////////////////// #
# ///  VALGRIND RULES  /////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #

@VALGRIND_CHECK_RULES@

# //////////////////////////////////////////////////////////////////////////// #
# ///  SANITIZE RULES  /////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #

@ENABLE_SANITIZE_TRUE@  # // sanitizer options specific (overload this in your Makefile.am) //
@ENABLE_SANITIZE_TRUE@  LSAN_OPTIONS       ?=
@ENABLE_SANITIZE_TRUE@  ASAN_OPTIONS       ?=
@ENABLE_SANITIZE_TRUE@  TSAN_OPTIONS       ?=
@ENABLE_SANITIZE_TRUE@  UBSAN_OPTIONS      ?=

@ENABLE_SANITIZE_TRUE@  # // suppressions files (overload this in your Makefile.am) //
@ENABLE_SANITIZE_TRUE@  LSAN_OPTIONS_SUPP  ?= suppressions=$(top_srcdir)/conf/gcc-lsan.supp
@ENABLE_SANITIZE_TRUE@  ASAN_OPTIONS_SUPP  ?= suppressions=$(top_srcdir)/conf/gcc-asan.supp
@ENABLE_SANITIZE_TRUE@  TSAN_OPTIONS_SUPP  ?= suppressions=$(top_srcdir)/conf/gcc-tsan.supp
@ENABLE_SANITIZE_TRUE@  UBSAN_OPTIONS_SUPP ?= suppressions=$(top_srcdir)/conf/gcc-ubsan.supp

@ENABLE_SANITIZE_TRUE@  # Preloaded libraries to be exported within the test-driver script. This was
@ENABLE_SANITIZE_TRUE@  # done to avoid having libraries for 32bit preloaded when we trigger the
@ENABLE_SANITIZE_TRUE@  # shell executable to run script. NOTE: This could harm a possible preload
@ENABLE_SANITIZE_TRUE@  # order that we would add in the future ... maybe an AM_LD_PRELOAD should be
@ENABLE_SANITIZE_TRUE@  # foreseen.
@ENABLE_SANITIZE_TRUE@  #
@ENABLE_SANITIZE_TRUE@  TEST_LD_PRELOAD    ?= ${ENABLE_SANITIZE_LIBPATH}

@ENABLE_SANITIZE_TRUE@  # // NOTE:
@ENABLE_SANITIZE_TRUE@  # somtimes thread sanitizer does not work with python... probably because of
@ENABLE_SANITIZE_TRUE@  # the -fpie flag for now we will disable it at all.
@ENABLE_SANITIZE_TRUE@  #

# Single tap output
# ^^^^^^^^^^^^^^^^^
# Tap target to generate single tap result beside the normal log file. This
# should make use of the TEST_TAPFILE env that generate multiple logger
# instances.

$(TEST_LOGS:.log=.tap):
	@ \
	f=$(@:.tap=.log); rm -f $$f; \
	$(MAKE) $(AM_MAKEFLAGS) $$f TEST_TAPFILE=$@ ||:

# Tap Test Build Suite
# ^^^^^^^^^^^^^^^^^^^^
# Collects the tap result of possible test build failures prior to make the
# actual tests

$(TEST_BUILD_TAP):
	@ \
	if [ -n "$(check_PROGRAMS)" ]; then \
	 echo "Try to build targets one by one"; \
	 echo "TAP version 13" > $@; \
	 count=0; \
	 for i in $(check_PROGRAMS); do \
	  if ! $(MAKE) -q $$i; then \
	    $(MAKE) -k $(AM_MAKEFLAGS) $$i || \
	    { ((count++)); \
	      echo "not ok $${count} - Build of $${i} failed." >> $@; \
	    }; \
	  fi; \
	 done; \
	fi; \
	echo "1..$${count}" >> $@;

# Tap Test Suite
# ^^^^^^^^^^^^^^
# The results are collected here using a perl script collate_tap.pl that is
# using the perl tap parser from cpan. If it is not actually available
# configure should have diabled HAVE_PL_TAP_PARSER.
#
# TODO: fix this in the case the only tap is provided as TEST_FORMAT and the
# test taps are streamed into the .log file directly ... for now a workaround
# was added: both TEST_LOGS and TEST_LOGS.tap are added to ${suite} so in both
# cases it is able to collect results. remember to add $(TEST_LOGS:.log=.tap)
# to prerequisites in the future when fix will be done.
#

$(TEST_SUITE_TAP): $(TEST_BUILD_TAP)
@HAVE_PL_TAP_PARSER_TRUE@	@ ## collate test-build.tap \
@HAVE_PL_TAP_PARSER_TRUE@	if [ -n "$(VALGRIND_TOOL)" ]; then suite="$@.$(VALGRIND_TOOL)"; \
@HAVE_PL_TAP_PARSER_TRUE@	else suite="$@"; \
@HAVE_PL_TAP_PARSER_TRUE@	fi; \
@HAVE_PL_TAP_PARSER_TRUE@	perl $(top_srcdir)/testing/collate_tap.pl $(TEST_BUILD_TAP) \
@HAVE_PL_TAP_PARSER_TRUE@	     $(TEST_LOGS) $(TEST_LOGS:.log=.tap) > $${suite} \
@HAVE_PL_TAP_PARSER_TRUE@	     || exit 1
@HAVE_PL_TAP_PARSER_FALSE@	@ ## test parser not available \
@HAVE_PL_TAP_PARSER_FALSE@	echo "Can not collate tap results" >2;

$(TEST_SUITE_XML):

$(TEST_LOGS:.log=.xml): 
	@ \
	f=$(@:.xml=.log); rm -f $$f; \
	$(MAKE) $(AM_MAKEFLAGS) $$f TEST_XMLFILE=$@ ||:s

# //////////////////////////////////////////////////////////////////////////// #
# ///  clean  //////////////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #

.PHONY: clean-local-tests
clean-local-tests:
	-$(RM) -rf $(TEST_BUILD_TAP)
	-$(RM) -rf $(TEST_SUITE_TAP)
	-$(RM) -rf $(TEST_LOGS:.log=.tap)
	-$(RM) -rf $(TEST_SUITE_XML)
	-$(RM) -rf $(TEST_LOGS:.log=.xml)

# //////////////////////////////////////////////////////////////////////////// #
# ///  utils  //////////////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #

.PHONY: tests-envdump
tests-envdump:
	@echo; \
	echo ----------------------------------------------------------------; \
	echo TESTS_ENVIRONMENT = ;\
	for _i in ${TESTS_ENVIRONMENT}; do \
	 echo "     $${_i}"; \
	done;

test-env:
	@for _i in ${TESTS_ENVIRONMENT}; do \
	  echo $${_i}; \
	  export $${_i}; \
	done; \
	echo srcdir=$(srcdir); \
	export srcdir=$(srcdir); \
	bash -i

@HAVE_WINE_TRUE@wineconsole:
@HAVE_WINE_TRUE@	@ \
@HAVE_WINE_TRUE@	echo "--------------------------------------------------------------"; \
@HAVE_WINE_TRUE@	echo "%PATH% = $(shell $${TESTS_ENVIRONMENT} wine cmd /c 'echo %PATH%' 2>/dev/null)"; \
@HAVE_WINE_TRUE@	echo "--------------------------------------------------------------"; \
@HAVE_WINE_TRUE@	${TESTS_ENVIRONMENT} wineconsole

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
