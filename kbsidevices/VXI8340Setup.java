/*
Copyright (c) 2017, Massachusetts Institute of Technology All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

Redistributions in binary form must reproduce the above copyright notice, this
list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
/*
                VXI 8340
		A basic implementation of the DeviceSetup class.
                Make by Tae-Gu Lee  at 2005.1.19
                Korea Basic Science Institute(KBSI)
                Version 1.0
*/

import java.awt.*;
import javax.swing.*;
import javax.swing.border.*;

public class VXI8340Setup extends DeviceSetup
{
    static final int NID_ADDRESS = 1;
    static final int NID_PROTOCAL = 4;
    static final int NID_TRIG_SOURCE = 5;
    static final int NID_TRIG_DESTINATION = 6;
                public VXI8340Setup(Frame parent)
	{
	super(parent);
          int i;
          JPanel jPanel;
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
                setTitle("NI VXI-8340 Optical Data Transports");
                //setSize(600,400);
                Container contentPane = getContentPane();
		contentPane.setLayout(new GridBagLayout());
                GridBagConstraints c = new GridBagConstraints();

                jPanel = new JPanel();
                address.setNumCols(15);
                address.setTextOnly(true);
                address.setLabelString("Address:");
                address.setOffsetNid(NID_ADDRESS);
                jPanel.add(address);
                c.gridy = 0;
                contentPane.add(jPanel, c);

               jPanel = new JPanel();
                jPanel.setBorder(new TitledBorder("GPIB & VXI(VXI hardware triggers)"));
                {
                  String[] tempString = new String[4];
                  tempString[0] = "VI_TRIG_PROT_DEFAULT";
                  tempString[1] = "VI_TRIG_PROT_ON";
                  tempString[2] = "VI_TRIG_PROT_OFF";
                  tempString[3] = "VI_TRIG_PROT_SYNC";
                  int trigpvalue[] = {0,1,2,5};
                  trigProtocal.setChoiceItems(tempString);
                  trigProtocal.setChoiceIntValues(trigpvalue);
                  trigProtocal.setConvert(true);
                  trigProtocal.setLabelString("Protocal :");
                  trigProtocal.setOffsetNid(NID_PROTOCAL);


                }
                jPanel.add(trigProtocal);
                c.gridy = 1;
                c.gridheight = 1;
                contentPane.add(jPanel, c);


                jPanel = new JPanel();
                jPanel.setLayout(new GridLayout(1,1));
                jPanel.setBorder(new TitledBorder("Triger "));
                {
                  {
                    String[] tempString = new String[12];
                    tempString[0] = "VI_TRIG_TTL0";
                    tempString[1] = "VI_TRIG_TTL1";
                    tempString[2] = "VI_TRIG_TTL2";
                    tempString[3] = "VI_TRIG_TTL3";
                    tempString[4] = "VI_TRIG_TTL4";
                    tempString[5] = "VI_TRIG_TTL5";
                    tempString[6] = "VI_TRIG_TTL6";
                    tempString[7] = "VI_TRIG_TTL7";
                    tempString[8] = "VI_TRIG_ECL0";
                    tempString[9] = "VI_TRIG_ECL1";
                    tempString[10] = "VI_TRIG_PANEL_IN";
                    tempString[11] = "VI_TRIG_PANEL_OUT";
                    int trigsvalue[] = {0,1,2,3,4,5,6,7,8,9,27,28};
                    trigerSource.setChoiceItems(tempString);
                    trigerSource.setChoiceIntValues(trigsvalue);
                    trigerSource.setConvert(true);
                    trigerSource.setLabelString("Triger Source:");
                    trigerSource.setOffsetNid(NID_TRIG_SOURCE);
                  }
                  {
                    String[] tempString = new String[12];
                    tempString[0] = "VI_TRIG_TTL0";
                    tempString[1] = "VI_TRIG_TTL1";
                    tempString[2] = "VI_TRIG_TTL2";
                    tempString[3] = "VI_TRIG_TTL3";
                    tempString[4] = "VI_TRIG_TTL4";
                    tempString[5] = "VI_TRIG_TTL5";
                    tempString[6] = "VI_TRIG_TTL6";
                    tempString[7] = "VI_TRIG_TTL7";
                    tempString[8] = "VI_TRIG_ECL0";
                    tempString[9] = "VI_TRIG_ECL1";
                    tempString[10] = "VI_TRIG_PANEL_IN";
                    tempString[11] = "VI_TRIG_PANEL_OUT";
                    int trigdvalue[] = {0,1,2,3,4,5,6,7,8,9,27,28};
                    trigDesti.setChoiceItems(tempString);
                    trigDesti.setChoiceIntValues(trigdvalue);
                    trigDesti.setConvert(true);
                    trigDesti.setLabelString("Triggering Destination:");
                    trigDesti.setOffsetNid(NID_TRIG_DESTINATION);
                  }
                }
                jPanel.add(trigerSource);
                jPanel.add(trigDesti);
                  c.gridy = 3;
                  contentPane.add(jPanel, c);


                c.gridy = 4;
                contentPane.add(dispatch, c);
                {
                        String[] tempString = new String[4];
                        tempString[0] = "INIT";
                        tempString[1] = "ARM";
                        tempString[2] = "STORE";
                        deviceButtons.setMethods(tempString);
                }
                c.gridy = 5;
                contentPane.add(deviceButtons, c);
                pack();
		//}}
	}

	public VXI8340Setup()
	{
		this((Frame)null);
	}

	public VXI8340Setup(String sTitle)
	{
		this();
		setTitle(sTitle);
	}

	public void setVisible(boolean b)
	{
		if (b)
                setLocation(50, 50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new VXI8340Setup()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	DeviceButtons deviceButtons = new DeviceButtons();
	DeviceDispatch dispatch = new DeviceDispatch();
	DeviceChoice trigerSource = new DeviceChoice();
	DeviceChoice trigDesti = new DeviceChoice();
        DeviceChoice trigProtocal = new DeviceChoice();
	DeviceField address = new DeviceField();
	//}}

}