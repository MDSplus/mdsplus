/*
 * Generated by the ICS builderXcessory (BX).
 *
 *
 * Builder Xcessory 3.5.1 VMS.
 *
 */
module MAIN_UIL
version = 'V1.0'
names = case_sensitive
!(BX) bx_info("app_class", "BuilderProduct")
!(BX) bx_info("app_name", "builderProduct")
!(BX) bx_info("app_defaults", "APP-DEFAULTS.DAT")
!(BX) bx_info("c++_old_construct", "false")
!(BX) bx_info("c++_unmanage_dialogs", "true")
!(BX) bx_info("c++_gen_derived", "false")
!(BX) bx_info("c++_target", "MAIN-CXX.EXE")
!(BX) bx_info("c++_hdrext", "HXX")
!(BX) bx_info("c++_srcext", "CXX")
!(BX) bx_info("c++_callbacks", "CALLBACKS-CXX", true)
!(BX) bx_info("c++_utilities", "BXUTILS-CXX", true)
!(BX) bx_info("c++_constants", "DEFS-CXX", true)
!(BX) bx_info("c++_baseclass", "UIComponent", true)
!(BX) bx_info("c++_main", "MAIN-CXX", true)
!(BX) bx_info("c++_makefile", "MAKEFILE-CXX.MMS", true)
!(BX) bx_info("c++_imakefile", "MAKEFILE-CXX.COM", true)
!(BX) bx_info("c_reverse_dialogs", "true")
!(BX) bx_info("c_dialogs_in_routine", "true")
!(BX) bx_info("c_unmanage_dialogs", "true")
!(BX) bx_info("c_target", "MAIN-C.EXE")
!(BX) bx_info("c_utilities", "BXUTILS-C.C", true)
!(BX) bx_info("c_constants", "CREATION-C.H", true)
!(BX) bx_info("c_callbacks", "CALLBACKS-C.C", true)
!(BX) bx_info("c_creation", "CREATION-C.C", true)
!(BX) bx_info("c_main", "MAIN-C.C", true)
!(BX) bx_info("c_makefile", "MAKEFILE-C.MMS", true)
!(BX) bx_info("c_imakefile", "MAKEFILE-C.COM", true)
!(BX) bx_info("uil_target", "MAIN-UIL.EXE")
!(BX) bx_info("uil_utilities", "BXUTILS-UIL.C", true)
!(BX) bx_info("uil_constants", "MAIN-UIL.H", true)
!(BX) bx_info("uil_callbacks", "CALLBACKS-UIL.C", true)
!(BX) bx_info("uil_uil", "MOTIFTRAVERSER.UIL", true)
!(BX) bx_info("uil_main", "MAIN-UIL.C", true)
!(BX) bx_info("uil_makefile", "MAKEFILE-UIL.MMS", true)
!(BX) bx_info("uil_imakefile", "MAKEFILE-UIL.COM", true)
!(BX) bx_info("include_path", "[]", false)
!(BX) bx_info("xrunner_command", "$(M_ROOT)/arch/X11.5/Xm1.2/mic_xm.o", false)
!(BX) bx_info("purify_command", "purify", false)
!(BX) bx_info("c++_libraries", "sys$share:decw$dxmlibshr12.exe/share,sys$share:decw$xmlibshr12.exe/s"&
!(BX)	"hare,sys$share:decw$mrmlibshr12.exe/share,sys$share:decw$xtlibshrr5."&
!(BX)	"exe/share,sys$share:decw$xlibshr.exe/share,sys$share:decc$shr.exe/sh"&
!(BX)	"are")
!(BX) bx_info("c++_flags", "/standard=vaxc/define=(__STDC__=1)")
!(BX) bx_info("c++_cc", "CC")
!(BX) bx_info("system_directory", "BX$SYSTEM:")
!(BX) bx_info("makefile_options", "main-uil.exe : readint.obj, readstring.obj, listtree.obj",
!(BX)		"l"&
!(BX)	"isttree.obj : listtree.c, listtree.h,listtreep.h", false)
!(BX) bx_info("builder_version", "Builder Xcessory 3.5.1 VMS")
!(BX) bx_info("uil", "uil")
!(BX) bx_info("cc", "cc")
!(BX) bx_info("cpp", "CC")
!(BX) bx_info("cOutputIncludes", "/standard=vaxc/define=(__STDC__=1)")
!(BX) bx_info("cOutputLibraries", "sys$share:decw$dxmlibshr12.exe/share,sys$share:decw$xmlibshr12.ex"&
!(BX)	"e/share,sys$share:decw$mrmlibshr12.exe/share,sys$share:decw$xtlib"&
!(BX)	"shrr5.exe/share,sys$share:decw$xlibshr.exe/share,sys$share:decc$s"&
!(BX)	"hr.exe/share")
!(BX) bx_info("uilCOutputIncludes", "/standard=vaxc/define=(__STDC__=1)/deb/noopt")
!(BX) bx_info("uilUILOutputIncludes", "/motif")
!(BX) bx_info("uilOutputLibraries", "sys$share:decw$dxmlibshr12.exe/share,sys$share:decw$xmlibshr12."&
!(BX)	"exe/share,sys$share:decw$mrmlibshr12.exe/share,sys$share:decw$x"&
!(BX)	"tlibshrr5.exe/share,sys$share:decw$xlibshr.exe/share,sys$share:"&
!(BX)	"decc$shr.exe/share,sys$share:tdishr/share,sys$share:mdsshr/shar"&
!(BX)	"e,sys$share:mdslib/share,sys$share:xmdsshr/share, []readstring."&
!(BX)	"obj, []readint.obj,[]listtree.obj")
!(BX) bx_info("makefileOptions", "main-uil.exe : readint.obj, readstring.obj, listtree.obj",
!(BX)		"l"&
!(BX)	"isttree.obj : listtree.c, listtree.h,listtreep.h")
!(BX) bx_info("cppOutputIncludes", "/standard=vaxc/define=(__STDC__=1)")
!(BX) bx_info("cppOutputLibraries", "sys$share:decw$dxmlibshr12.exe/share,sys$share:decw$xmlibshr12."&
!(BX)	"exe/share,sys$share:decw$mrmlibshr12.exe/share,sys$share:decw$x"&
!(BX)	"tlibshrr5.exe/share,sys$share:decw$xlibshr.exe/share,sys$share:"&
!(BX)	"decc$shr.exe/share")
!(BX) bx_info("makefileLinkFlags", "/deb")
!(BX) bx_info("builder_version", "Builder Xcessory 3.5.1 VMS")
!(BX) bx_info("ansi", "true")
!(BX) bx_info("use_locales", "false")
!(BX) bx_info("new_mrm_style", "true")
!(BX) bx_info("c_wrap_lines", "true")
!(BX) bx_info("uil_wrap_lines", "true")
!(BX) bx_info("integrate_purify", "false")
!(BX) bx_info("purify_command", "purify")
!(BX) bx_info("integrate_xrunner", "false")
!(BX) bx_info("xrunner_command", "$(M_ROOT)/arch/X11.5/Xm1.2/mic_xm.o")

value
    USAGE_STRUCTURE : 1;
    USAGE_ACTION :    2;
    USAGE_DEVICE :    3;
    USAGE_DISPATCH :  4;
    USAGE_NUMERIC :   5;
    USAGE_SIGNAL :    6;
    USAGE_TASK :      7;
    USAGE_TEXT :      8;
    USAGE_WINDOW :    9;
    USAGE_AXIS :     10;
    USAGE_SUBTREE :  11;

    TAGS_OK: 0;
    TAGS_APPLY: 1;
    TAGS_RESET: 2;
    TAGS_CANCEL: 3;
    TAGS_ADD: 4;
    TAGS_REMOVE: 5;



procedure BxManageCB(string);
procedure BxExitCB(integer);
procedure AddListTree();
procedure TurnOnOff(integer);
procedure DisplayData();
procedure DisplayNci();
procedure ModifyData();
procedure SetupDevice();
procedure MenuUnmap();
procedure MTurnOnOff(integer);
procedure MSetupDevice();
procedure MDisplayData();
procedure MDisplayNci();
procedure MModifyData();
procedure CloseTree();
procedure OpenTree();
procedure SetDefault();
procedure MSetDefault();
procedure MDoAction();
procedure DoAction();
procedure AddNode();
procedure AddNodeApply();
procedure AddNodeDismiss();
procedure SetUsage(integer);
procedure CommandEntered();
procedure MessageDismiss();
procedure MessageClear();
procedure AddDeviceDismiss();
procedure CreateAddDevice();
procedure AddDevice();
procedure WriteTree(integer);
procedure CreateTree();
procedure RenameNode();
procedure DeleteNode();
procedure DeleteNodeNow();
procedure ModifyTags();
procedure tag_button_proc(integer);
procedure tag_selection_proc();
procedure  AddNodeStart();
list BaseStyle : arguments {
};

list BaseStyleReasons : callbacks {
};

!(BX)list BaseStyleHandlers : handlers {
!(BX)};


!(BX)object topLevelShell : TopLevelShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "Traverser";
!(BX)        XmNiconName = "Traverser";
!(BX)        XmNx = 947;
!(BX)        XmNy = 349;
!(BX)        XmNwidth = 509;
!(BX)        XmNheight = 672;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmMainWindow mainWindow;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object mainWindow : XmMainWindow widget {
    arguments {
        XmNcommandWindowLocation = XmCOMMAND_BELOW_WORKSPACE;
        XmNx = 951;
        XmNy = 372;
        XmNwidth = 509;
        XmNheight = 672;
    };
    controls {
!(BX)         unmanaged XmDialogShell xmDialogShell3;
!(BX)         unmanaged XmDialogShell xmDialogShell2;
!(BX)         unmanaged XmDialogShell xmDialogShell1;
!(BX)         unmanaged XmDialogShell xmDialogShell;
         managed XmMenuBar menuBar;
         managed XmCommand command;
         unmanaged XmFormDialog message_box;
	 unmanaged XmMessageDialog createDialog;
	 unmanaged XmMessageDialog delete_ok_box;
         unmanaged XmBulletinBoardDialog tags_box;
    };
    callbacks {
        MrmNcreateCallback = procedure AddListTree();
    };
};

object 
delete_ok_box : XmMessageDialog widget {
    arguments {
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
        XmNdialogType = XmDIALOG_QUESTION;
        XmNmessageString = compound_string("Are you sure you want to delete...");
        XmNmessageAlignment = XmALIGNMENT_CENTER;
        XmNokLabelString = compound_string("Delete");
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 290;
        XmNheight = 112;
    };
    controls {
	XmScrolledList delete_ok_list;
    };
    callbacks {
        XmNokCallback = procedure DeleteNodeNow;
    };
};

object delete_ok_list: XmScrolledList 
        {
        arguments
            {
            XmNx = 17;
            XmNy = 50;
            XmNwidth = 192;
            XmNlistSizePolicy = XmCONSTANT;
            XmNselectionPolicy = XmSINGLE_SELECT;
            XmNvisibleItemCount = 10;
            };
        };

object 
createDialog : XmMessageDialog widget {
    arguments {
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
        XmNdialogType = XmDIALOG_QUESTION;
        XmNmessageString = compound_string("Tree does not exist");
        XmNmessageAlignment = XmALIGNMENT_CENTER;
        XmNokLabelString = compound_string("Create");
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 290;
        XmNheight = 112;
    };
    callbacks {
        XmNokCallback = procedure CreateTree;
    };
};

!(BX)object xmDialogShell2 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "Write Tree Dialog";
!(BX)        XmNwidth = 290;
!(BX)        XmNheight = 112;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmMessageDialog writeDialog;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object writeDialog : XmMessageDialog widget {
    arguments {
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
        XmNdialogType = XmDIALOG_QUESTION;
        XmNmessageString = compound_string("The tree has been modified.");
        XmNmessageAlignment = XmALIGNMENT_CENTER;
        XmNokLabelString = compound_string("Write");
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 290;
        XmNheight = 112;
    };
    controls {
         managed XmPushButton pushButton15;
    };
    callbacks {
        XmNokCallback = procedure WriteTree(1);
    };
};

object pushButton15 : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Quit");
        XmNx = 78;
        XmNy = 59;
        XmNwidth = 67;
        XmNheight = 42;
    };
    controls {
         unmanaged XmPopupMenu rightButtonMenu;
    };
    callbacks {
        XmNactivateCallback = procedure WriteTree(0);
    };
};

object rightButtonMenu : XmPopupMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 92;
        XmNheight = 248;
    };
    controls {
         managed XmPushButton openButton1;
         managed XmPushButton closeButton1;
         managed XmPushButton quitButton1;
         managed XmSeparator separator;
         managed XmPushButton pushButton1;
         managed XmPushButton pushButton2;
         managed XmPushButton pushButton3;
         /*managed XmPushButton pushButton16;*/
         managed XmPushButton pushButton17;
         managed XmPushButton pushButton21;
         managed XmPushButton pushButton22;
         managed XmPushButton pushButton23;
    };
    callbacks {
        XmNunmapCallback = procedure MenuUnmap();
    };
};

object openButton1 : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Open");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure BxManageCB("openDialog");
    };
};

object closeButton1 : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Close");
    };
    controls {
    };
    callbacks {
    };
};

object quitButton1 : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Quit");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure BxExitCB(0);
    };
};

object separator : XmSeparator widget {
    arguments {
    };
    controls {
    };
    callbacks {
    };
};

object pushButton1 : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Turn On");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure MTurnOnOff(1);
    };
};

object pushButton2 : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Turn Off");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure MTurnOnOff(0);
    };
};

object pushButton3 : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Display Data");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure MDisplayData();
    };
};

object pushButton16 : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Display NCI");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure MDisplayNci();
    };
};

object pushButton17 : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Modify Data");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure MModifyData();
    };
};

object pushButton21 : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Set Default");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure MSetDefault();
    };
};

object pushButton22 : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Setup Device");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure MSetupDevice();
    };
};

object pushButton23 : XmPushButton widget {
    arguments {
        XmNsensitive = false;
        XmNlabelString = compound_string("Do Action");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure MDoAction();
    };
};

!(BX)object xmDialogShell1 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 263;
!(BX)        XmNheight = 270;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmMessageDialog addDialog;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object addDialog : XmMessageDialog widget {
    arguments {
	XmNautoUnmanage = false;
        XmNshadowType = XmSHADOW_ETCHED_IN;
        XmNdialogStyle = XmDIALOG_MODELESS;
        XmNdialogTitle = compound_string("Add Node");
        XmNdialogType = XmDIALOG_MESSAGE;
        XmNmessageAlignment = XmALIGNMENT_BEGINNING;
        XmNx = 807;
        XmNy = 194;
        XmNwidth = 410;
        XmNheight = 311;
    };
    controls {
         managed XmBulletinBoard bulletinBoard;
         managed XmPushButton pushButton;
    };
    callbacks {
        XmNokCallback = procedure AddNode();
        XmNcancelCallback = procedure AddNodeDismiss();
    };
};

object bulletinBoard : XmBulletinBoard widget {
    arguments {
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 11;
        XmNy = 25;
        XmNwidth = 388;
        XmNheight = 211;
    };
    controls {
         managed XmSeparator separator2;
         managed XmRadioBox radioBox1;
         managed XmTextField nodeTags;
         managed XmLabel label;
         managed XmTextField nodeName;
         managed XmLabel label1;
    };
    callbacks {
    };
};

object label1 : XmLabel widget {
    arguments {
        XmNlabelString = compound_string("Node Name:");
        XmNx = 11;
        XmNy = 12;
    };
    controls {
    };
    callbacks {
    };
};

object nodeName : XmTextField widget {
    arguments {
        XmNmarginHeight = 1;
        XmNmarginWidth = 1;
        XmNcolumns = 12;
        XmNx = 104;
        XmNy = 10;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
    };
};

object label : XmLabel widget {
    arguments {
        XmNlabelString = compound_string("Tags:");
        XmNx = 50;
        XmNy = 33;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object nodeTags : XmTextField widget {
    arguments {
        XmNmarginHeight = 1;
        XmNmarginWidth = 1;
        XmNcolumns = 32;
        XmNx = 102;
        XmNy = 31;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
    };
};

object radioBox1 : XmRadioBox widget {
    arguments {
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNnumColumns = 3;
        XmNx = 55;
        XmNy = 85;
        XmNwidth = 297;
        XmNheight = 170;
    };
    controls {
         managed XmToggleButton toggleButton;
         managed XmToggleButton toggleButton2;
         managed XmToggleButton toggleButton3;
         managed XmToggleButton toggleButton4;
         managed XmToggleButton toggleButton5;
         managed XmToggleButton toggleButton6;
         managed XmToggleButton toggleButton7;
         managed XmToggleButton toggleButton8;
         managed XmToggleButton toggleButton9;
         managed XmToggleButton toggleButton10;
    };
    callbacks {
    };
};

object toggleButton : XmToggleButton widget {
    arguments {
        XmNlabelString = compound_string("action");
        XmNwidth = 83;
        XmNheight = 26;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure SetUsage(USAGE_ACTION);
    };
};

object toggleButton2 : XmToggleButton widget {
    arguments {
        XmNlabelString = compound_string("dispatch");
        XmNwidth = 83;
        XmNheight = 26;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure SetUsage(USAGE_DISPATCH);
    };
};

object toggleButton3 : XmToggleButton widget {
    arguments {
        XmNlabelString = compound_string("numeric");
        XmNwidth = 83;
        XmNheight = 26;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure SetUsage(USAGE_NUMERIC);
    };
};

object toggleButton4 : XmToggleButton widget {
    arguments {
        XmNlabelString = compound_string("signal");
        XmNwidth = 83;
        XmNheight = 26;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure SetUsage(USAGE_SIGNAL);
    };
};

object toggleButton5 : XmToggleButton widget {
    arguments {
        XmNlabelString = compound_string("task");
        XmNwidth = 83;
        XmNheight = 26;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure SetUsage(USAGE_TASK);
    };
};

object toggleButton6 : XmToggleButton widget {
    arguments {
        XmNlabelString = compound_string("text");
        XmNwidth = 83;
        XmNheight = 26;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure SetUsage(USAGE_TEXT);
    };
};

object toggleButton7 : XmToggleButton widget {
    arguments {
        XmNlabelString = compound_string("window");
        XmNwidth = 83;
        XmNheight = 26;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure SetUsage(USAGE_WINDOW);
    };
};

object toggleButton8 : XmToggleButton widget {
    arguments {
        XmNlabelString = compound_string("axis");
        XmNwidth = 119;
        XmNheight = 26;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure SetUsage(USAGE_AXIS);
    };
};

object toggleButton9 : XmToggleButton widget {
    arguments {
        XmNlabelString = compound_string("subtree");
        XmNwidth = 119;
        XmNheight = 26;
	XmNsensitive = false;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure SetUsage(USAGE_SUBTREE);
    };
};

object toggleButton10 : XmToggleButton widget {
    arguments {
        XmNlabelString = compound_string("Structure");
        XmNwidth = 119;
        XmNheight = 26;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure SetUsage(USAGE_STRUCTURE);
    };
};

object separator2 : XmSeparator widget {
    arguments {
        XmNy = 65;
        XmNwidth = 367;
    };
    controls {
    };
    callbacks {
    };
};

object pushButton : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Apply");
        XmNx = 118;
        XmNy = 258;
        XmNwidth = 67;
        XmNheight = 42;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure AddNodeApply();
    };
};



!(BX)object xmDialogShell3 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 263;
!(BX)        XmNheight = 270;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmMessageDialog addDeviceDialog;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object addDeviceDialog : XmMessageDialog widget {
    arguments {
        XmNresizePolicy = XmRESIZE_GROW;
	XmNautoUnmanage = false;
        XmNshadowType = XmSHADOW_ETCHED_IN;
        XmNdialogStyle = XmDIALOG_MODELESS;
        XmNdialogTitle = compound_string("Add Device");
        XmNdialogType = XmDIALOG_MESSAGE;
        XmNmessageAlignment = XmALIGNMENT_BEGINNING;
        XmNx = 807;
        XmNy = 194;
!        XmNwidth = 410;
!        XmNheight = 311;
    };
    controls {
         managed XmBulletinBoard ad_bulletinBoard;
         managed XmPushButton ad_pushButton;
    };
    callbacks {
        XmNcancelCallback = procedure AddDeviceDismiss();
        XmNokCallback = procedure AddNode();
    };
};

object ad_bulletinBoard : XmBulletinBoard widget {
    arguments {
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 11;
        XmNy = 25;
!        XmNwidth = 388;
!        XmNheight = 211;
    };
    controls {
         managed XmSeparator ad_separator2;
         managed XmRadioBox ad_radioBox1;
         managed XmTextField nodeTags;
         managed XmLabel ad_label;
         managed XmTextField nodeName;
         managed XmLabel ad_label1;
    };
    callbacks {
    };
};

object ad_label1 : XmLabel widget {
    arguments {
        XmNlabelString = compound_string("Node Name:");
        XmNx = 11;
        XmNy = 12;
    };
    controls {
    };
    callbacks {
    };
};

!object ad_nodeName : XmTextField widget {
!    arguments {
!        XmNmarginHeight = 1;
!        XmNmarginWidth = 1;
!        XmNcolumns = 12;
!        XmNx = 104;
!        XmNy = 10;
!        XmNheight = 23;
!    };
!    controls {
!    };
!    callbacks {
!    };
!};
!
object ad_label : XmLabel widget {
    arguments {
        XmNlabelString = compound_string("Tags:");
        XmNx = 50;
        XmNy = 33;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

!object ad_nodeTags : XmTextField widget {
!    arguments {
!        XmNmarginHeight = 1;
!        XmNmarginWidth = 1;
!        XmNcolumns = 32;
!        XmNx = 102;
!        XmNy = 31;
!        XmNheight = 25;
!    };
!    controls {
!    };
!    callbacks {
!    };
!};
!

object ad_radioBox1 : XmRadioBox widget {
    arguments {
        XmNresizeWidth = true;
        XmNresizeHeight = true;
        XmNnumColumns = 6;
        XmNx = 55;
        XmNy = 85;
 !       XmNwidth = 297;
 !       XmNheight = 170;
    };
    controls {
    };
    callbacks {
    };
};


object ad_separator2 : XmSeparator widget {
    arguments {
        XmNy = 65;
        XmNwidth = 367;
    };
    controls {
    };
    callbacks {
    };
};

object ad_pushButton : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Apply");
        XmNx = 118;
        XmNy = 258;
        XmNwidth = 67;
        XmNheight = 42;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure AddNodeApply();
    };
};


!(BX)object xmDialogShell : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNwidth = 327;
!(BX)        XmNheight = 215;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog openDialog;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object openDialog : XmBulletinBoardDialog widget {
    arguments {
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogStyle = XmDIALOG_APPLICATION_MODAL;
        XmNdialogTitle = compound_string("Open Tree");
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 327;
        XmNheight = 215;
	XmNdefaultButton = XmPushButton openOkButton;
    };
    controls {
         managed XmRadioBox radioBox;
         managed XmTextField shot_name;
         managed XmTextField tree_name;
         managed XmLabel label2;
         managed XmLabel label3;
         managed XmSeparator separator1;
         managed XmPushButton openOkButton;
         managed XmPushButton pushButton19;
         managed XmPushButton pushButton18;
    };
    callbacks {
    };
};

object openOkButton : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Ok");
        XmNx = 29;
        XmNy = 169;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure OpenTree();
    };
};

object pushButton19 : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Cancel");
        XmNx = 134;
        XmNy = 169;
    };
    controls {
    };
    callbacks {
    };
};

object pushButton18 : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Help");
        XmNx = 261;
        XmNy = 169;
    };
    controls {
    };
    callbacks {
    };
};

object separator1 : XmSeparator widget {
    arguments {
        XmNx = 10;
        XmNy = 141;
        XmNwidth = 337;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object label3 : XmLabel widget {
    arguments {
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Tree:");
        XmNx = 37;
        XmNy = 18;
    };
    controls {
    };
    callbacks {
    };
};

object label2 : XmLabel widget {
    arguments {
        XmNlabelString = compound_string("Shot:");
        XmNx = 40;
        XmNy = 64;
    };
    controls {
    };
    callbacks {
    };
};

object tree_name : XmTextField widget {
    arguments {
        XmNmaxLength = 32;
        XmNx = 124;
        XmNy = 17;
    };
    controls {
    };
    callbacks {
    };
};

object shot_name : XmTextField widget {
    arguments {
        XmNcolumns = 10;
        XmNmaxLength = 10;
        XmNx = 129;
        XmNy = 56;
    };
    controls {
    };
    callbacks {
    };
};

object radioBox : XmRadioBox widget {
    arguments {
        XmNborderWidth = 0;
        XmNorientation = XmHORIZONTAL;
        XmNradioAlwaysOne = false;
        XmNx = 70;
        XmNy = 104;
        XmNwidth = 185;
        XmNheight = 32;
    };
    controls {
         managed XmToggleButton r_w_toggle;
         managed XmToggleButton r_o_toggle;
         managed XmToggleButton edit_toggle;
    };
    callbacks {
    };
};

object r_o_toggle : XmToggleButton widget {
    arguments {
        XmNlabelString = compound_string("Read Only");
        XmNwidth = 88;
        XmNheight = 26;
    };
    controls {
    };
    callbacks {
    };
};
object r_w_toggle : XmToggleButton widget {
    arguments {
        XmNlabelString = compound_string("Read Write");
        XmNwidth = 88;
        XmNheight = 26;
        XmNset = true;
    };
    controls {
    };
    callbacks {
    };
};

object edit_toggle : XmToggleButton widget {
    arguments {
        XmNlabelString = compound_string("Edit");
        XmNwidth = 88;
        XmNheight = 26;
    };
    controls {
    };
    callbacks {
    };
};

object menuBar : XmMenuBar widget {
    arguments {
        XmNmenuHelpWidget = XmCascadeButton cascadeButton3;
        XmNwidth = 509;
        XmNheight = 32;
    };
    controls {
         managed XmCascadeButton cascadeButton;
         managed XmCascadeButton cascadeButton1;
         managed XmCascadeButton cascadeButton2;
         managed XmCascadeButton cascadeButton3;
    };
    callbacks {
    };
};

object cascadeButton : XmCascadeButton widget {
    arguments {
        XmNlabelString = compound_string("File");
        XmNx = 5;
        XmNy = 5;
        XmNwidth = 36;
        XmNheight = 22;
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu;
    };
    callbacks {
    };
};

object pulldownMenu : XmPulldownMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 44;
        XmNheight = 70;
    };
    controls {
         managed XmPushButton openButton;
         managed XmPushButton closeButton;
         managed XmPushButton quitButton;
    };
    callbacks {
    };
};

object openButton : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Open");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure BxManageCB("openDialog");
    };
};

object closeButton : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Close");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure CloseTree();
    };
};

object quitButton : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Quit");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure BxExitCB(0);
    };
};

object cascadeButton1 : XmCascadeButton widget {
    arguments {
        XmNlabelString = compound_string("Edit");
        XmNx = 41;
        XmNy = 5;
        XmNwidth = 39;
        XmNheight = 22;
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu1;
    };
    callbacks {
    };
};

object pulldownMenu1 : XmPulldownMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 86;
        XmNheight = 70;
    };
    controls {
         managed XmPushButton pushButtonss;
         managed XmPushButton pushButtonAddDevice;
         managed XmPushButton pushButton4;
         managed XmPushButton pushButton5;
         managed XmPushButton renameButton;
    };
    callbacks {
    };
};

object pushButtonss : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Add Node");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure AddNodeStart();
    };
};

object pushButtonAddDevice : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Add Device");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure CreateAddDevice();
    };
};

object pushButton4 : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Modify Tags");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure ModifyTags();
    };
};

object pushButton5 : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Delete Node");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure DeleteNode();
    };
};

object renameButton : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Rename Node");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure RenameNode();
    };
};

object cascadeButton2 : XmCascadeButton widget {
    arguments {
        XmNlabelString = compound_string("Data");
        XmNx = 80;
        XmNy = 5;
        XmNwidth = 44;
        XmNheight = 22;
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu2;
    };
    callbacks {
    };
};

object pulldownMenu2 : XmPulldownMenu widget {
    arguments {
        XmNx = 847;
        XmNy = 404;
        XmNwidth = 92;
        XmNheight = 180;
    };
    controls {
         managed XmPushButton pushButton6;
         managed XmPushButton pushButton7;
         managed XmPushButton pushButton8;
         /*managed XmPushButton pushButton9;*/
         managed XmPushButton pushButton10;
         managed XmPushButton pushButton14;
         managed XmPushButton pushButton11;
         managed XmPushButton pushButton12;
    };
    callbacks {
    };
};

object pushButton6 : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Turn On");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure TurnOnOff(1);
    };
};

object pushButton7 : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Turn Off");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure TurnOnOff(0);
    };
};

object pushButton8 : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Display Data");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure DisplayData();
    };
};

object pushButton9 : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Display NCI");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure DisplayNci();
    };
};

object pushButton10 : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Modify Data");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure ModifyData();
    };
};

object pushButton14 : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Set Default");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure SetDefault();
    };
};

object pushButton11 : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Setup Device");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure SetupDevice();
    };
};

object pushButton12 : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("Do Action");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure DoAction();
    };
};

object cascadeButton3 : XmCascadeButton widget {
    arguments {
        XmNlabelString = compound_string("Help");
        XmNx = 462;
        XmNy = 5;
        XmNwidth = 42;
        XmNheight = 22;
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu3;
    };
    callbacks {
    };
};

object pulldownMenu3 : XmPulldownMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 109;
        XmNheight = 26;
    };
    controls {
         managed XmPushButton pushButton13;
    };
    callbacks {
    };
};

object pushButton13 : XmPushButton widget {
    arguments {
        XmNlabelString = compound_string("About Traverser");
    };
    controls {
    };
    callbacks {
    };
};

object command : XmCommand widget {
    arguments {
        XmNwidth = 509;
        XmNheight = 151;
        XmNpromptString = "TCL>";
    };
    controls {
    };
    callbacks {
        XmNcommandEnteredCallback = procedure CommandEntered();
    };
};

object
    message_box: XmFormDialog
        {
        arguments
            {
            XmNborderWidth = 1;
            XmNdialogTitle =
            compound_string("SVN Text output");
            XmNmarginHeight = 3;
            XmNmarginWidth = 3;
            XmNautoUnmanage = false;
            };
        controls
            {
            XmPushButtonGadget
                {
                arguments
                    {
                    XmNlabelString =
                    compound_string("Clear");
                    XmNleftAttachment = XmATTACH_FORM;
                    XmNleftOffset = 95;
                    XmNbottomAttachment = XmATTACH_FORM;
                    XmNbottomOffset = 10;
                    XmNtopOffset = 3;
                    };
                callbacks
                    {
                    XmNactivateCallback = procedures
                        {
                        MessageClear();
                        };
                    };
                };
            XmPushButtonGadget
                {
                arguments
                    {
                    XmNlabelString =
                    compound_string("Dismiss");
                    XmNleftAttachment = XmATTACH_NONE;
                    XmNleftOffset = 354;
                    XmNbottomAttachment = XmATTACH_FORM;
                    XmNbottomOffset = 10;
                    XmNtopOffset = 5;
                    XmNrightAttachment = XmATTACH_FORM;
                    XmNrightOffset = 96;
                    XmNx = 354;
                    XmNy = 191;
                    };
                callbacks
                    {
                    XmNactivateCallback = procedures
                        {
                        MessageDismiss();
                        };
                    };
                };
            XmScrolledText message_text;
            };
        callbacks
            {
            };
        };
    message_text: XmScrolledText
        {
        arguments
            {
            XmNcolumns = 80;
            XmNleftAttachment = XmATTACH_FORM;
            XmNtopAttachment = XmATTACH_FORM;
            XmNleftOffset = 8;
            XmNtopOffset = 6;
            XmNrows = 10;
            XmNeditMode = XmMULTI_LINE_EDIT;
            XmNeditable = false;
            XmNrightAttachment = XmATTACH_FORM;
            XmNrightOffset = 7;
            XmNbottomAttachment = XmATTACH_FORM;
            XmNbottomOffset = 50;
            };
        };

object
    tags_box: XmBulletinBoardDialog 
        {
        arguments
            {
            XmNborderWidth = 1;
            XmNresizePolicy = XmRESIZE_ANY;
            XmNdialogTitle = 
            compound_string("Modify Tags");
            XmNautoUnmanage = false;
            XmNcancelButton = XmPushButtonGadget tag_cancel_button;
            XmNdefaultButton = XmPushButtonGadget tag_ok_button;
            };
        controls
            {
            XmLabelGadget 
                {
                arguments
                    {
                    XmNx = 15;
                    XmNy = 9;
                    XmNlabelString = 
                    compound_string("Node:");
                    };
                };
            XmLabelGadget tag_node_label;
            XmScrolledList tag_list;
            XmPushButtonGadget tag_add_tag_button;
            XmPushButtonGadget tag_remove_tag_button;
            XmTextField tag_current_text;
            XmLabelGadget 
                {
                arguments
                    {
                    XmNx = 17;
                    XmNy = 158;
                    XmNlabelString = 
                    compound_string("Current Selection");
                    };
                };
            XmLabelGadget 
                {
                arguments
                    {
                    XmNx = 17;
                    XmNy = 26;
                    XmNlabelString = 
                    compound_string("Tag List:");
                    };
                };
            XmPushButtonGadget tag_ok_button;
            XmPushButtonGadget tag_apply_button;
            XmPushButtonGadget tag_reset_button;
            XmPushButtonGadget tag_cancel_button;
            };
        };
    tag_list: XmScrolledList 
        {
        arguments
            {
            XmNx = 17;
            XmNy = 50;
            XmNwidth = 192;
            XmNlistSizePolicy = XmCONSTANT;
            XmNselectionPolicy = XmSINGLE_SELECT;
            XmNvisibleItemCount = 5;
            };
        callbacks
            {
            XmNsingleSelectionCallback = procedures
                {
                tag_selection_proc();
                };
            };
        };
    tag_node_label: XmLabelGadget 
        {
        arguments
            {
            XmNx = 62;
            XmNy = 9;
            XmNlabelString = 
            compound_string("Full-path-here");
            };
        };
    tag_ok_button: XmPushButtonGadget 
        {
        arguments
            {
            XmNx = 15;
            XmNy = 210;
            XmNlabelString = 
            compound_string("Ok");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                tag_button_proc(TAGS_OK);
                };
            };
        };
    tag_cancel_button: XmPushButtonGadget 
        {
        arguments
            {
            XmNx = 253;
            XmNy = 210;
            XmNlabelString = 
            compound_string("Cancel");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                tag_button_proc(TAGS_CANCEL);
                };
            };
        };
    tag_current_text: XmTextField 
        {
        arguments
            {
            XmNx = 15;
            XmNy = 179;
            XmNheight = 25;
            XmNcolumns = 25;
            XmNmarginHeight = 1;
            };
        };
    tag_apply_button: XmPushButtonGadget 
        {
        arguments
            {
            XmNx = 86;
            XmNy = 210;
            XmNlabelString = 
            compound_string("Apply");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                tag_button_proc(TAGS_APPLY);
                };
            };
        };
    tag_reset_button: XmPushButtonGadget 
        {
        arguments
            {
            XmNx = 174;
            XmNy = 210;
            XmNlabelString = 
            compound_string("Reset");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                tag_button_proc(TAGS_RESET);
                };
            };
        };
    tag_add_tag_button: XmPushButtonGadget 
        {
        arguments
            {
            XmNx = 220;
            XmNy = 50;
            XmNlabelString = 
            compound_string("Add Tag");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                tag_button_proc(TAGS_ADD);
                };
            };
        };
    tag_remove_tag_button: XmPushButtonGadget 
        {
        arguments
            {
            XmNx = 222;
            XmNy = 92;
            XmNlabelString = 
            compound_string("Remove Tag");
            };
        callbacks
            {
            XmNactivateCallback = procedures
                {
                tag_button_proc(TAGS_REMOVE);
                };
            };
        };


end module;
