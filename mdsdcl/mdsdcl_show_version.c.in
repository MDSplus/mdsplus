#include <stdlib.h>
#include <mdsplus/mdsconfig.h>
#include <string.h>
#include <stdio.h>

EXPORT int mdsdcl_show_version(void *ctx __attribute__ ((unused)), char **error __attribute__ ((unused)), char **output)
{
  static const char *MAJOR="@RELEASE_MAJOR@";
  static const char *MINOR="@RELEASE_MINOR@";
  static const char *RELEASE="@RELEASE_RELEASE@";
  static const char *BRANCH="@RELEASE_BRANCH@";
  static const char *RELEASE_TAG="@RELEASE_TAG@";
  static const char *COMMIT="@RELEASE_COMMIT@";
  static const char *DATE="@RELEASE_DATE@";
  char *info = malloc(strlen(MAJOR)+strlen(MINOR)+strlen(RELEASE)+
		      strlen(BRANCH)+strlen(RELEASE_TAG)+
		      strlen(COMMIT)+1000);
  strcpy(info,"\n\n");
  if (strlen(MAJOR) && strlen(MINOR) && strlen(MAJOR)) {
    sprintf(info+strlen(info),"MDSplus version: %s.%s.%s\n",MAJOR,MINOR,RELEASE);
  }
  if (strlen(BRANCH)) {
    sprintf(info+strlen(info),"Git branch: %s\n",BRANCH);
    if (strlen(RELEASE_TAG)==0 && strlen(COMMIT)==0) {
      sprintf(info+strlen(info),"  View:\n    https://github.com/MDSplus/mdsplus/tree/%s\n",BRANCH);
      sprintf(info+strlen(info),"  Download:\n    https://github.com/MDSplus/mdsplus/archive/%s.tar.gz\n",BRANCH);
    }
  }
  if (strlen(RELEASE_TAG)) {
    sprintf(info+strlen(info),"  Git tag: %s\n",RELEASE_TAG);
    sprintf(info+strlen(info),"  View:\n    https://github.com/MDSplus/mdsplus/tree/%s\n",RELEASE_TAG);
    sprintf(info+strlen(info),"  Download:\n    https://github.com/MDSplus/mdsplus/archive/%s.tar.gz\n",RELEASE_TAG);
  }
  if (strlen(COMMIT)) {
    sprintf(info+strlen(info),"  Git commit: %s\n",COMMIT);
    if (strlen(RELEASE_TAG)==0) {
      sprintf(info+strlen(info),"  View:\n    https://github.com/MDSplus/mdsplus/tree/%s\n",COMMIT);
      sprintf(info+strlen(info),"  Download:\n    https://github.com/MDSplus/mdsplus/archive/%s.tar.gz\n",COMMIT);
    }
  }
  if (strlen(DATE)) {
    sprintf(info+strlen(info),"  Build date: %s\n",DATE);
  }
  if (strlen(info) == 2) {
    strcat(info,"Manual build from sources, no version information available\n");
  }
  strcat(info,"\n\n");
  *output=strdup(info);
  free(info);
  return 1;
}
