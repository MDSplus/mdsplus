include @top_builddir@/Makefile.inc

srcdir=@srcdir@
builddir=@builddir@
VPATH = @srcdir@
CFLAGS+=@SRBINCLUDE@ $(THREAD)
LIBS=-L@MAKESHLIBDIR@ @LIBS@ -lMdsShr @SRBLIB@ $(LIBSOCKET) $(THREAD)

@MINGW_TRUE@ IMPLIB=@MAKELIBDIR@TreeShr.dll.a
@MINGW_TRUE@ DEF=${srcdir}/TreeShr.def

SOURCES = \
dummies.c \
TreeAddNode.c \
TreeAddTag.c \
TreeCallHook.c \
TreeCleanDatafile.c \
TreeCreatePulseFile.c \
TreeDeleteNode.c \
TreeDeletePulseFile.c \
TreeDoMethod.c \
TreeFindNode.c \
TreeFindTag.c \
TreeFindTagWild.c \
TreeGetDbi.c \
TreeGetNci.c \
TreeGetRecord.c \
TreeGetSetShotId.c \
TreeOpen.c \
TreePerf.c \
TreePutRecord.c \
TreeRenameNode.c \
TreeRemoveNodesTags.c\
TreeSegments.c \
TreeSerializeNci.c \
TreeSetDbi.c \
TreeSetDefault.c \
TreeSetNci.c \
TreeThreadSafe.c \
TreeVerify.c \
RemoteAccess.c \
lex.yytreepath.c 

OBJECTS = $(SOURCES:.c=.o)
EXPORTS = TreeShr.exports

all : @MAKELIBDIR@ @MAKESHLIBDIR@ @MAKESHLIBDIR@@LIBPRE@TreeShr@SHARETYPE@ $(IMPLIB) @MAKELIBDIR@@LIBPRE@TreeShr.a

clean:
	@ $(RM) $(OBJECTS)
	@ $(RM) so_locations
	@ $(RM) @MAKESHLIBDIR@@LIBPRE@TreeShr@SHARETYPE@ $(IMPLIB)
	@ $(RM) @MAKELIBDIR@@LIBPRE@TreeShr.a

depend:
	 @makedepend -- $(CFLAGS) -- $(SOURCES)

install: $(libdir)
	$(INSTALL) -m 755  @MAKESHLIBDIR@@LIBPRE@TreeShr@SHARETYPE@ $(IMPLIB) @libdir@
	if test @SHARETYPE@ != .a ; then \
		$(INSTALL) -m 644  @MAKELIBDIR@@LIBPRE@TreeShr.a @libdir@; \
	fi;


@MINGW_TRUE@ MAKE_IMPLIB=-Wl,--out-implib,$(IMPLIB)
@MAKESHLIBDIR@@LIBPRE@TreeShr@SHARETYPE@ $(IMPLIB): $(OBJECTS) $(DEF) @EXPORTS_FILE@ 
	$(LINK.c) $(OUTPUT_OPTION) @LINKSHARED@ $(OBJECTS) $(DEF) $(LIBS) $(MAKE_IMPLIB)

@MAKELIBDIR@@LIBPRE@TreeShr.a : $(OBJECTS)
	$(AR) -cr $@ $(OBJECTS)
	@RANLIB@ $@

TreeShr.exports: TreeShr.def
	$(SED) -e /LIBRARY/\;/\;/d TreeShr.def > $@

lex.yytreepath.o: lex.yytreepath.c
	$(COMPILE.c) $(CFLAGS) -Wno-sign-compare -Wno-unused-parameter -c $^

#lex.yytreepath.c: TreeFindNodeWild.l
#	flex $^
