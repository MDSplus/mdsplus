

# //////////////////////////////////////////////////////////////////////////// #
# ///  TESTS SECTION   /////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #

TEST_CFLAGS = -I${top_srcdir}/testing
TEST_LIBS   = -lMdsTestShr @LIBM@ @THREAD@ @LIBRT@
TESTS_ENVIRONMENT += MDSPLUS_VERSION_CHECK=off

# ///  select test form env variable  //////////////////////////////////////// #

TEST_BUILDTYPE   = local
TEST_FORMAT     ?= log,tap
AM_MAKEFLAGS    ?= V=0


.PHONY: tap xml log
tap: ##@@tests-targets perform all TAP test targets
tap: $(TEST_SUITE_TAP)
xml: ##@@tests-targets perform all XML test targets
xml: $(TEST_SUITE_XML)
log: ##@@tests-targets perform all LOG test targets
log: $(TEST_SUITE_LOG)


SUFFIXES = .log .tap .xml
.PRECIUS = %.log %.tap %.xml

## HELP ##
tests: ##@tests perform tests in this directory
rebuild-tests: ##@tests rebuild tests in this directory


.PHONY: tests
tests: rebuild-tests
	@ \
	echo "//// Performing tests /////"; \
	export TEST_FORMAT=${TEST_FORMAT}; \
	status=0; \
	$(MAKE) -k $(TEST_FLAGS) $(AM_MAKEFLAGS) $${TEST_FORMAT//,/ } || status=$$?; \
	exit $$status


.PHONY: rebuild-tests
rebuild-tests:
	@ \
	if [ -n "$(check_PROGRAMS)" ]; then \
	 if [ -n "$${VALGRIND_BUILD}" ]; then \
          if [   -f testing ]; then $(MAKE) clean; fi; \
          $(MAKE) -k $(AM_MAKEFLAGS) $(BUILD_FLAGS) all; \
	 else \
          if [ ! -f testing ]; then $(MAKE) clean; fi; \
          $(MAKE) -k $(AM_MAKEFLAGS) $(BUILD_FLAGS) all \
           CFLAGS="${CFLAGS} -D_TESTING" CPPFLAGS="${CPPFLAGS} -D_TESTING" && touch testing; \
	 fi;\
	fi


# //////////////////////////////////////////////////////////////////////////// #
# ///  VALGRIND RULES  /////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #

## Valgrind rules are provided by autoconf macro m4_ax_valgrind_check.m4 where
## targets tests-valgrind and test-valgrind-suppressions are provided.

@VALGRIND_CHECK_RULES@


# //////////////////////////////////////////////////////////////////////////// #
# ///  SANITIZE RULES  /////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #

if ENABLE_SANITIZE
  # // sanitizer options specific (overload this in your Makefile.am) //
  LSAN_OPTIONS       ?=
  ASAN_OPTIONS       ?= use_sigaltstack=0
  TSAN_OPTIONS       ?= second_deadlock_stack=1
  UBSAN_OPTIONS      ?=

  # // suppressions files (overload this in your Makefile.am) //
  LSAN_OPTIONS_SUPP  ?= suppressions=$(top_srcdir)/conf/sanitizer.supp/leak.supp
  ASAN_OPTIONS_SUPP  ?= suppressions=$(top_srcdir)/conf/sanitizer.supp/address.supp
  TSAN_OPTIONS_SUPP  ?= suppressions=$(top_srcdir)/conf/sanitizer.supp/thread.supp
  UBSAN_OPTIONS_SUPP ?= suppressions=$(top_srcdir)/conf/sanitizer.supp/undefined.supp

  # Preloaded libraries to be exported within the test-driver script. This was
  # done to avoid having libraries for 32bit preloaded when we trigger the
  # shell executable to run script. NOTE: This could harm a possible preload
  # order that we would add in the future ... maybe an AM_LD_PRELOAD should be
  # foreseen.
  #
  TEST_LD_PRELOAD    ?= ${ENABLE_SANITIZE_LIBPATH}

  TESTS_ENVIRONMENT += ${ENABLE_SANITIZE_OPTIONS}=${${ENABLE_SANITIZE_OPTIONS}_SUPP}:${SAN_OPTIONS}:${${ENABLE_SANITIZE_OPTIONS}}:start_deactivated=1:exitcode=1
  TESTS_ENVIRONMENT += LSAN_OPTIONS=${LSAN_OPTIONS_SUPP}:${LSAN_OPTIONS}:G_SLICE=always-malloc
  TESTS_ENVIRONMENT += TEST_LD_PRELOAD=${TEST_LD_PRELOAD}
  TESTS_ENVIRONMENT += TEST_TIMEUNIT=$$(($${TEST_TIMEUNIT:-1} * 5))
endif

# // check if libpath is correct or skip python tests
if ENABLE_SANITIZE
  _check_sanitize_ldd = \
   ( test "${ENABLE_SANITIZE}" != "no" -a -n "${ENABLE_SANITIZE_LIBPATH}" && \
     ldd ${MAKESHLIBDIR}/libMdsTestShr.so | grep ${ENABLE_SANITIZE_LIBPATH}  > /dev/null; )
  PY_LOG_FLAGS += $(shell ${_check_sanitize_ldd} || echo --skip;)

  # // NOTE:
  # somtimes thread sanitizer does not work with python... probably because of
  # the -fpie flag for now we will disable it at all.
  #
  PY_LOG_FLAGS += $(shell test x"${ENABLE_SANITIZE}" != x"thread" || echo --skip;)
endif


# //////////////////////////////////////////////////////////////////////////// #
# ///  TAP TARGET   ////////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #

# .PHONY: $(TEST_SUITE_TAP)

TEST_BUILD_TAP = test-build.tap
TEST_SUITE_TAP = test-suite.tap


# Single tap output
# ^^^^^^^^^^^^^^^^^
# Tap target to generate single tap result beside the normal log file. This
# should make use of the TEST_TAPFILE env that generate multiple logger
# instances.

$(TEST_LOGS:.log=.tap):
	@ \
	f=$(@:.tap=.log); rm -f $$f; \
	$(MAKE) $(AM_MAKEFLAGS) $$f TEST_TAPFILE=$@ ||:




# Tap Test Build Suite
# ^^^^^^^^^^^^^^^^^^^^
# Collects the tap result of possible test build failures prior to make the
# actual tests

$(TEST_BUILD_TAP):
	@ \
	if [ -n "$(check_PROGRAMS)" ]; then \
	 echo "Try to build targets one by one"; \
	 echo "TAP version 13" > $@; \
	 count=0; \
	 for i in $(check_PROGRAMS); do \
	  if ! $(MAKE) -s -q $$i; then \
	    $(MAKE) -k $(AM_MAKEFLAGS) $$i || \
	    { ((count++)); \
	      echo "not ok $${count} - Build of $${i} failed." >> $@; \
	    }; \
	  fi; \
	 done; \
	fi; \
	echo "1..$${count}" >> $@;



# Tap Test Suite
# ^^^^^^^^^^^^^^
# The results are collected here using a perl script collate_tap.pl that is
# using the perl tap parser from cpan. If it is not actually available
# configure should have diabled HAVE_PL_TAP_PARSER.
#
# TODO: fix this in the case the only tap is provided as TEST_FORMAT and the
# test taps are streamed into the .log file directly ... for now a workaround
# was added: both TEST_LOGS and TEST_LOGS.tap are added to ${suite} so in both
# cases it is able to collect results. remember to add $(TEST_LOGS:.log=.tap)
# to prerequisites in the future when fix will be done.
#

$(TEST_SUITE_TAP): $(TEST_BUILD_TAP)
if HAVE_PL_TAP_PARSER
	@ ## collate test-build.tap \
	if [ -n "$(VALGRIND_TOOL)" ]; then suite="$@.$(VALGRIND_TOOL)"; \
	else suite="$@"; \
	fi; \
	perl $(top_srcdir)/testing/collate_tap.pl $(TEST_BUILD_TAP) \
	     $(TEST_LOGS) $(TEST_LOGS:.log=.tap) > $${suite} \
	     || exit 1
else
	@ ## test parser not available \
	echo "Can not collate tap results" >2;
endif


## ////////////////////////////////////////////////////////////////////////// ##
## //  LOG  ///////////////////////////////////////////////////////////////// ##
## ////////////////////////////////////////////////////////////////////////// ##

## test suite log is already provided by automake
## $(TEST_SUITE_LOG):


## ////////////////////////////////////////////////////////////////////////// ##
## //  XML  ///////////////////////////////////////////////////////////////// ##
## ////////////////////////////////////////////////////////////////////////// ##

## TODO: add xml output
$(TEST_SUITE_XML):

$(TEST_LOGS:.log=.xml):
	@ \
	f=$(@:.xml=.log); rm -f $$f; \
	$(MAKE) $(AM_MAKEFLAGS) $$f TEST_XMLFILE=$@ ||:s


# //////////////////////////////////////////////////////////////////////////// #
# ///  clean  //////////////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #



.PHONY: clean-local-tests
clean-local-tests:
	-$(RM) -f testing
	-$(RM) -rf $(TEST_BUILD_TAP)
	-$(RM) -rf $(TEST_SUITE_TAP)
	-$(RM) -rf $(TEST_LOGS:.log=.tap)
	-$(RM) -rf $(TEST_SUITE_XML)
	-$(RM) -rf $(TEST_LOGS:.log=.xml)



# //////////////////////////////////////////////////////////////////////////// #
# ///  utils  //////////////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #

.PHONY: tests-envdump
tests-envdump: ##@tests enter a new shell with all tests enviroment set
tests-envdump:
	@echo; \
	echo ----------------------------------------------------------------; \
	echo TESTS_ENVIRONMENT = ;\
	for _i in ${TESTS_ENVIRONMENT}; do \
	 echo "     $${_i}"; \
	done;


tests-env: ##@tests enter a new shell with all tests enviroment set
tests-env:
	@ echo; echo "    [ RUNNING A TESTS ENV BASH ]"; \
	echo ----------------------------------------------------------------; \
	for _i in ${TESTS_ENVIRONMENT}; do \
	  echo $${_i}; \
	  export $${_i}; \
	done; \
	echo srcdir=$(srcdir); \
	export srcdir=$(srcdir); \
	echo ----------------------------------------------------------------; \
	echo ""; \
	bash --rcfile $(top_srcdir)/testing/bashrc -i



if HAVE_WINE
wineconsole: ##@tests enter a new WINE console with tests environment set
wineconsole:
	@ \
	echo "--------------------------------------------------------------"; \
	echo "%PATH% = $(shell $${TESTS_ENVIRONMENT} wine cmd /c 'echo %PATH%' 2>/dev/null)"; \
	echo "--------------------------------------------------------------"; \
	${TESTS_ENVIRONMENT} wineconsole
endif
