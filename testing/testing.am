
TEST_CFLAGS = -I${top_srcdir}/testing
TEST_LIBS =  -lMdsTestShr @LIBM@ @THREAD@ @LIBRT@


PY_LOG_COMPILER = $(PYTHON)
PY_LOG_FLAGS    = -v





# not used #
_tap_py_execute = \
 import unittest; \
 import tap; \
 import os; \
 import sys; \
 pt = os.path.dirname(os.path.curdir); \
 loader = unittest.TestLoader(); \
 tests = loader.loadTestsFromName(sys.argv[1]); \
 tr = tap.TAPTestRunner(); \
 tr.set_stream(1); \
 tr.run(tests); 

#prova:
#	echo $(TEST_LOGS);
#	python -c "${_tap_py_execute}" pyex1;


# //////////////////////////////////////////////////////////////////////////// #
# ///  select test form env variable  //////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #


.PHONY: tap xml log
tap: $(TEST_SUITE_TAP)
xml: $(TEST_SUITE_XML)
log: $(TEST_SUITE_LOG)

tests:
	echo "Making tests ... "
	if [ -z ${TEST_FORMAT} ] ; then
	 $(MAKE) $(AM_MAKEFLAGS) tap;
	else
	 $(MAKE) $(AM_MAKEFLAGS) $(TEST_FORMAT);
	fi



# //////////////////////////////////////////////////////////////////////////// #
# ///  VALGRIND RULES  /////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #

@VALGRIND_CHECK_RULES@ 



# //////////////////////////////////////////////////////////////////////////// #
# ///  FILL TEST CHAIN  ////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #

TESTS_ENVIRONMENT   = @TS_TESTS_ENVIRONMENT@
LOG_COMPILER        = @TS_LOG_COMPILER@
TAP_PY_LOG_COMPILER = @TS_PY_TAP_COMPILER@

# use default ...
# LOG_DRIVER        = @TS_LOG_DRIVER@




# //////////////////////////////////////////////////////////////////////////// #
# ///  TAP TARGET   ////////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #

TEST_BUILD_TAP = test-build.tap
TEST_SUITE_TAP = test-suite.tap


.ONESHELL:
$(TEST_BUILD_TAP):
	## Make all recursive targets here without dying.
	$(MAKE) -k $(AM_MAKEFLAGS) clean all \
	CFLAGS="${CFLAGS} -D_TESTING" CPPFLAGS="${CPPFLAGS} -D_TESTING";
	
	## Try to build failed targets one by one
	echo "TAP version 13" > $@;
	count=0;
	for i in $(check_PROGRAMS); do \
	  if ! $(MAKE) -q $$i; then \
	    $(MAKE) -k $(AM_MAKEFLAGS) $$i || \
	    { ((count++)); \
	      echo "not ok $${count} - Build of $${i} failed." >> $@; \
	    }; \
	  fi; \
	done; \
	echo "1..$${count}" >> $@;


.ONESHELL:
$(TEST_SUITE_TAP): $(TEST_BUILD_TAP)
	export TEST_FORMAT="tap";
	
	## run tests	
	$(MAKE) -k $(AM_MAKEFLAGS) $(TEST_LOGS) \
	  PY_LOG_COMPILER="$(TAP_PY_LOG_COMPILER)" \
	  PY_LOG_FLAGS="$(TAP_PY_LOG_FLAGS)";
	 
	## collate test-build.tap and 
	perl ${top_srcdir}/testing/collate_tap.pl $(TEST_BUILD_TAP) $(TEST_LOGS) > $@ \
	 || exit 1;



## ////////////////////////////////////////////////////////////////////////// ##
## //  LOG  ///////////////////////////////////////////////////////////////// ##
## ////////////////////////////////////////////////////////////////////////// ##

## TODO: add log output
$(TEST_SUITE_LOG):


## ////////////////////////////////////////////////////////////////////////// ##
## //  XML  ///////////////////////////////////////////////////////////////// ##
## ////////////////////////////////////////////////////////////////////////// ##

## TODO: add xml output
$(TEST_SUITE_XML):



# //////////////////////////////////////////////////////////////////////////// #
# ///  clean  //////////////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #


.PHONY: clean-local-tests
clean-local-tests:
	-$(RM) -rf $(TEST_BUILD_TAP) $(TEST_SUITE_TAP)








